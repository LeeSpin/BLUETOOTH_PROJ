
Blue_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ca4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002e74  08002e74  00012e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002ecc  08002ecc  00012ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002ed4  08002ed4  00012ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002ed8  08002ed8  00012ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  20000000  08002edc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001bc  2000006c  08002f48  0002006c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000228  08002f48  00020228  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000154f1  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002e51  00000000  00000000  0003558d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000060c7  00000000  00000000  000383de  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000a80  00000000  00000000  0003e4a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000009c8  00000000  00000000  0003ef28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000648c  00000000  00000000  0003f8f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003bfb  00000000  00000000  00045d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00049977  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001ce0  00000000  00000000  000499f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002e5c 	.word	0x08002e5c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08002e5c 	.word	0x08002e5c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b97a 	b.w	80005bc <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	468c      	mov	ip, r1
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	9e08      	ldr	r6, [sp, #32]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d151      	bne.n	8000394 <__udivmoddi4+0xb4>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d96d      	bls.n	80003d2 <__udivmoddi4+0xf2>
 80002f6:	fab2 fe82 	clz	lr, r2
 80002fa:	f1be 0f00 	cmp.w	lr, #0
 80002fe:	d00b      	beq.n	8000318 <__udivmoddi4+0x38>
 8000300:	f1ce 0c20 	rsb	ip, lr, #32
 8000304:	fa01 f50e 	lsl.w	r5, r1, lr
 8000308:	fa20 fc0c 	lsr.w	ip, r0, ip
 800030c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000310:	ea4c 0c05 	orr.w	ip, ip, r5
 8000314:	fa00 f40e 	lsl.w	r4, r0, lr
 8000318:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800031c:	0c25      	lsrs	r5, r4, #16
 800031e:	fbbc f8fa 	udiv	r8, ip, sl
 8000322:	fa1f f987 	uxth.w	r9, r7
 8000326:	fb0a cc18 	mls	ip, sl, r8, ip
 800032a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800032e:	fb08 f309 	mul.w	r3, r8, r9
 8000332:	42ab      	cmp	r3, r5
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x6c>
 8000336:	19ed      	adds	r5, r5, r7
 8000338:	f108 32ff 	add.w	r2, r8, #4294967295
 800033c:	f080 8123 	bcs.w	8000586 <__udivmoddi4+0x2a6>
 8000340:	42ab      	cmp	r3, r5
 8000342:	f240 8120 	bls.w	8000586 <__udivmoddi4+0x2a6>
 8000346:	f1a8 0802 	sub.w	r8, r8, #2
 800034a:	443d      	add	r5, r7
 800034c:	1aed      	subs	r5, r5, r3
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb5 f0fa 	udiv	r0, r5, sl
 8000354:	fb0a 5510 	mls	r5, sl, r0, r5
 8000358:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800035c:	fb00 f909 	mul.w	r9, r0, r9
 8000360:	45a1      	cmp	r9, r4
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x98>
 8000364:	19e4      	adds	r4, r4, r7
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	f080 810a 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800036e:	45a1      	cmp	r9, r4
 8000370:	f240 8107 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000374:	3802      	subs	r0, #2
 8000376:	443c      	add	r4, r7
 8000378:	eba4 0409 	sub.w	r4, r4, r9
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	2100      	movs	r1, #0
 8000382:	2e00      	cmp	r6, #0
 8000384:	d061      	beq.n	800044a <__udivmoddi4+0x16a>
 8000386:	fa24 f40e 	lsr.w	r4, r4, lr
 800038a:	2300      	movs	r3, #0
 800038c:	6034      	str	r4, [r6, #0]
 800038e:	6073      	str	r3, [r6, #4]
 8000390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000394:	428b      	cmp	r3, r1
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0xc8>
 8000398:	2e00      	cmp	r6, #0
 800039a:	d054      	beq.n	8000446 <__udivmoddi4+0x166>
 800039c:	2100      	movs	r1, #0
 800039e:	e886 0021 	stmia.w	r6, {r0, r5}
 80003a2:	4608      	mov	r0, r1
 80003a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a8:	fab3 f183 	clz	r1, r3
 80003ac:	2900      	cmp	r1, #0
 80003ae:	f040 808e 	bne.w	80004ce <__udivmoddi4+0x1ee>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xdc>
 80003b6:	4282      	cmp	r2, r0
 80003b8:	f200 80fa 	bhi.w	80005b0 <__udivmoddi4+0x2d0>
 80003bc:	1a84      	subs	r4, r0, r2
 80003be:	eb65 0503 	sbc.w	r5, r5, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	46ac      	mov	ip, r5
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d03f      	beq.n	800044a <__udivmoddi4+0x16a>
 80003ca:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	b912      	cbnz	r2, 80003da <__udivmoddi4+0xfa>
 80003d4:	2701      	movs	r7, #1
 80003d6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003da:	fab7 fe87 	clz	lr, r7
 80003de:	f1be 0f00 	cmp.w	lr, #0
 80003e2:	d134      	bne.n	800044e <__udivmoddi4+0x16e>
 80003e4:	1beb      	subs	r3, r5, r7
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	2101      	movs	r1, #1
 80003ee:	fbb3 f8f2 	udiv	r8, r3, r2
 80003f2:	0c25      	lsrs	r5, r4, #16
 80003f4:	fb02 3318 	mls	r3, r2, r8, r3
 80003f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fc:	fb0c f308 	mul.w	r3, ip, r8
 8000400:	42ab      	cmp	r3, r5
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x134>
 8000404:	19ed      	adds	r5, r5, r7
 8000406:	f108 30ff 	add.w	r0, r8, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x132>
 800040c:	42ab      	cmp	r3, r5
 800040e:	f200 80d1 	bhi.w	80005b4 <__udivmoddi4+0x2d4>
 8000412:	4680      	mov	r8, r0
 8000414:	1aed      	subs	r5, r5, r3
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb5 f0f2 	udiv	r0, r5, r2
 800041c:	fb02 5510 	mls	r5, r2, r0, r5
 8000420:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000424:	fb0c fc00 	mul.w	ip, ip, r0
 8000428:	45a4      	cmp	ip, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x15c>
 800042c:	19e4      	adds	r4, r4, r7
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x15a>
 8000434:	45a4      	cmp	ip, r4
 8000436:	f200 80b8 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 040c 	sub.w	r4, r4, ip
 8000440:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000444:	e79d      	b.n	8000382 <__udivmoddi4+0xa2>
 8000446:	4631      	mov	r1, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1ce 0420 	rsb	r4, lr, #32
 8000452:	fa05 f30e 	lsl.w	r3, r5, lr
 8000456:	fa07 f70e 	lsl.w	r7, r7, lr
 800045a:	fa20 f804 	lsr.w	r8, r0, r4
 800045e:	0c3a      	lsrs	r2, r7, #16
 8000460:	fa25 f404 	lsr.w	r4, r5, r4
 8000464:	ea48 0803 	orr.w	r8, r8, r3
 8000468:	fbb4 f1f2 	udiv	r1, r4, r2
 800046c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000470:	fb02 4411 	mls	r4, r2, r1, r4
 8000474:	fa1f fc87 	uxth.w	ip, r7
 8000478:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800047c:	fb01 f30c 	mul.w	r3, r1, ip
 8000480:	42ab      	cmp	r3, r5
 8000482:	fa00 f40e 	lsl.w	r4, r0, lr
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x1bc>
 8000488:	19ed      	adds	r5, r5, r7
 800048a:	f101 30ff 	add.w	r0, r1, #4294967295
 800048e:	f080 808a 	bcs.w	80005a6 <__udivmoddi4+0x2c6>
 8000492:	42ab      	cmp	r3, r5
 8000494:	f240 8087 	bls.w	80005a6 <__udivmoddi4+0x2c6>
 8000498:	3902      	subs	r1, #2
 800049a:	443d      	add	r5, r7
 800049c:	1aeb      	subs	r3, r5, r3
 800049e:	fa1f f588 	uxth.w	r5, r8
 80004a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004a6:	fb02 3310 	mls	r3, r2, r0, r3
 80004aa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ae:	fb00 f30c 	mul.w	r3, r0, ip
 80004b2:	42ab      	cmp	r3, r5
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x1e6>
 80004b6:	19ed      	adds	r5, r5, r7
 80004b8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004bc:	d26f      	bcs.n	800059e <__udivmoddi4+0x2be>
 80004be:	42ab      	cmp	r3, r5
 80004c0:	d96d      	bls.n	800059e <__udivmoddi4+0x2be>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443d      	add	r5, r7
 80004c6:	1aeb      	subs	r3, r5, r3
 80004c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004cc:	e78f      	b.n	80003ee <__udivmoddi4+0x10e>
 80004ce:	f1c1 0720 	rsb	r7, r1, #32
 80004d2:	fa22 f807 	lsr.w	r8, r2, r7
 80004d6:	408b      	lsls	r3, r1
 80004d8:	fa05 f401 	lsl.w	r4, r5, r1
 80004dc:	ea48 0303 	orr.w	r3, r8, r3
 80004e0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004e4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004e8:	40fd      	lsrs	r5, r7
 80004ea:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ee:	fbb5 f9fc 	udiv	r9, r5, ip
 80004f2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004f6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004fa:	fa1f f883 	uxth.w	r8, r3
 80004fe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000502:	fb09 f408 	mul.w	r4, r9, r8
 8000506:	42ac      	cmp	r4, r5
 8000508:	fa02 f201 	lsl.w	r2, r2, r1
 800050c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000510:	d908      	bls.n	8000524 <__udivmoddi4+0x244>
 8000512:	18ed      	adds	r5, r5, r3
 8000514:	f109 30ff 	add.w	r0, r9, #4294967295
 8000518:	d243      	bcs.n	80005a2 <__udivmoddi4+0x2c2>
 800051a:	42ac      	cmp	r4, r5
 800051c:	d941      	bls.n	80005a2 <__udivmoddi4+0x2c2>
 800051e:	f1a9 0902 	sub.w	r9, r9, #2
 8000522:	441d      	add	r5, r3
 8000524:	1b2d      	subs	r5, r5, r4
 8000526:	fa1f fe8e 	uxth.w	lr, lr
 800052a:	fbb5 f0fc 	udiv	r0, r5, ip
 800052e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000532:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000536:	fb00 f808 	mul.w	r8, r0, r8
 800053a:	45a0      	cmp	r8, r4
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x26e>
 800053e:	18e4      	adds	r4, r4, r3
 8000540:	f100 35ff 	add.w	r5, r0, #4294967295
 8000544:	d229      	bcs.n	800059a <__udivmoddi4+0x2ba>
 8000546:	45a0      	cmp	r8, r4
 8000548:	d927      	bls.n	800059a <__udivmoddi4+0x2ba>
 800054a:	3802      	subs	r0, #2
 800054c:	441c      	add	r4, r3
 800054e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000552:	eba4 0408 	sub.w	r4, r4, r8
 8000556:	fba0 8902 	umull	r8, r9, r0, r2
 800055a:	454c      	cmp	r4, r9
 800055c:	46c6      	mov	lr, r8
 800055e:	464d      	mov	r5, r9
 8000560:	d315      	bcc.n	800058e <__udivmoddi4+0x2ae>
 8000562:	d012      	beq.n	800058a <__udivmoddi4+0x2aa>
 8000564:	b156      	cbz	r6, 800057c <__udivmoddi4+0x29c>
 8000566:	ebba 030e 	subs.w	r3, sl, lr
 800056a:	eb64 0405 	sbc.w	r4, r4, r5
 800056e:	fa04 f707 	lsl.w	r7, r4, r7
 8000572:	40cb      	lsrs	r3, r1
 8000574:	431f      	orrs	r7, r3
 8000576:	40cc      	lsrs	r4, r1
 8000578:	6037      	str	r7, [r6, #0]
 800057a:	6074      	str	r4, [r6, #4]
 800057c:	2100      	movs	r1, #0
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	4618      	mov	r0, r3
 8000584:	e6f8      	b.n	8000378 <__udivmoddi4+0x98>
 8000586:	4690      	mov	r8, r2
 8000588:	e6e0      	b.n	800034c <__udivmoddi4+0x6c>
 800058a:	45c2      	cmp	sl, r8
 800058c:	d2ea      	bcs.n	8000564 <__udivmoddi4+0x284>
 800058e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000592:	eb69 0503 	sbc.w	r5, r9, r3
 8000596:	3801      	subs	r0, #1
 8000598:	e7e4      	b.n	8000564 <__udivmoddi4+0x284>
 800059a:	4628      	mov	r0, r5
 800059c:	e7d7      	b.n	800054e <__udivmoddi4+0x26e>
 800059e:	4640      	mov	r0, r8
 80005a0:	e791      	b.n	80004c6 <__udivmoddi4+0x1e6>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e7be      	b.n	8000524 <__udivmoddi4+0x244>
 80005a6:	4601      	mov	r1, r0
 80005a8:	e778      	b.n	800049c <__udivmoddi4+0x1bc>
 80005aa:	3802      	subs	r0, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	e745      	b.n	800043c <__udivmoddi4+0x15c>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e708      	b.n	80003c6 <__udivmoddi4+0xe6>
 80005b4:	f1a8 0802 	sub.w	r8, r8, #2
 80005b8:	443d      	add	r5, r7
 80005ba:	e72b      	b.n	8000414 <__udivmoddi4+0x134>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <apInit>:
//최종 목표는 serial, dcmi

#include "ap.h"

void apInit(void)
{
 80005c0:	b508      	push	{r3, lr}
	//printf("test....\n");
	uartOpen(_DEF_UART1, 115200);
 80005c2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80005c6:	2000      	movs	r0, #0
 80005c8:	f000 f9cc 	bl	8000964 <uartOpen>
 80005cc:	bd08      	pop	{r3, pc}
	...

080005d0 <apMain>:
	//ledInit();
}

void apMain()
{
 80005d0:	b510      	push	{r4, lr}
	int len=0;
 80005d2:	2400      	movs	r4, #0
 80005d4:	e008      	b.n	80005e8 <apMain+0x18>
	  if(uartAvailable(_DEF_UART1) > 0)
	  {
		  len = uartPrintf(_DEF_UART1, "rx = 0x%X\n", uartRead(_DEF_UART1));

	  }
	  ledToggle(0);
 80005d6:	2000      	movs	r0, #0
 80005d8:	f000 f968 	bl	80008ac <ledToggle>
	  delay(len * 1000);
 80005dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e0:	fb00 f004 	mul.w	r0, r0, r4
 80005e4:	f000 fb4e 	bl	8000c84 <delay>
	  if(uartAvailable(_DEF_UART1) > 0)
 80005e8:	2000      	movs	r0, #0
 80005ea:	f000 fa23 	bl	8000a34 <uartAvailable>
 80005ee:	2800      	cmp	r0, #0
 80005f0:	d0f1      	beq.n	80005d6 <apMain+0x6>
		  len = uartPrintf(_DEF_UART1, "rx = 0x%X\n", uartRead(_DEF_UART1));
 80005f2:	2000      	movs	r0, #0
 80005f4:	f000 fa62 	bl	8000abc <uartRead>
 80005f8:	4602      	mov	r2, r0
 80005fa:	4903      	ldr	r1, [pc, #12]	; (8000608 <apMain+0x38>)
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 fa7d 	bl	8000afc <uartPrintf>
 8000602:	4604      	mov	r4, r0
 8000604:	e7e7      	b.n	80005d6 <apMain+0x6>
 8000606:	bf00      	nop
 8000608:	08002e74 	.word	0x08002e74

0800060c <SystemClock_Config>:
	__HAL_RCC_GPIOA_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();
}

void SystemClock_Config()
{
 800060c:	b500      	push	{lr}
 800060e:	b095      	sub	sp, #84	; 0x54
	  RCC_OscInitTypeDef RCC_OscInitStruct;
	  RCC_ClkInitTypeDef RCC_ClkInitStruct;

	    /**Configure the main internal regulator output voltage
	    */
	  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2200      	movs	r2, #0
 8000612:	9200      	str	r2, [sp, #0]
 8000614:	4b27      	ldr	r3, [pc, #156]	; (80006b4 <SystemClock_Config+0xa8>)
 8000616:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000618:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800061c:	6419      	str	r1, [r3, #64]	; 0x40
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	9b00      	ldr	r3, [sp, #0]

	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000628:	9201      	str	r2, [sp, #4]
 800062a:	4923      	ldr	r1, [pc, #140]	; (80006b8 <SystemClock_Config+0xac>)
 800062c:	680b      	ldr	r3, [r1, #0]
 800062e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000636:	600b      	str	r3, [r1, #0]
 8000638:	680b      	ldr	r3, [r1, #0]
 800063a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	9b01      	ldr	r3, [sp, #4]

	    /**Initializes the CPU, AHB and APB busses clocks
	    */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000642:	2302      	movs	r3, #2
 8000644:	9307      	str	r3, [sp, #28]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000646:	2101      	movs	r1, #1
 8000648:	910a      	str	r1, [sp, #40]	; 0x28
	  RCC_OscInitStruct.HSICalibrationValue = 16;
 800064a:	2110      	movs	r1, #16
 800064c:	910b      	str	r1, [sp, #44]	; 0x2c
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	930d      	str	r3, [sp, #52]	; 0x34
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000650:	920e      	str	r2, [sp, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLM = 16;
 8000652:	910f      	str	r1, [sp, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLN = 336;
 8000654:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8000658:	9210      	str	r2, [sp, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800065a:	2204      	movs	r2, #4
 800065c:	9211      	str	r2, [sp, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLQ = 2;
 800065e:	9312      	str	r3, [sp, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLR = 2;
 8000660:	9313      	str	r3, [sp, #76]	; 0x4c
	  
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	a807      	add	r0, sp, #28
 8000664:	f001 f86a 	bl	800173c <HAL_RCC_OscConfig>
 8000668:	b100      	cbz	r0, 800066c <SystemClock_Config+0x60>
 800066a:	e7fe      	b.n	800066a <SystemClock_Config+0x5e>
		while(1);
	  }

	    /**Initializes the CPU, AHB and APB busses clocks
	    */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066c:	230f      	movs	r3, #15
 800066e:	9302      	str	r3, [sp, #8]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000670:	2102      	movs	r1, #2
 8000672:	9103      	str	r1, [sp, #12]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	9304      	str	r3, [sp, #16]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000678:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800067c:	9205      	str	r2, [sp, #20]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067e:	9306      	str	r3, [sp, #24]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000680:	a802      	add	r0, sp, #8
 8000682:	f000 fcb9 	bl	8000ff8 <HAL_RCC_ClockConfig>
 8000686:	b100      	cbz	r0, 800068a <SystemClock_Config+0x7e>
 8000688:	e7fe      	b.n	8000688 <SystemClock_Config+0x7c>
	  }

	    /**Configure the Systick interrupt time
	    */

	  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800068a:	f000 fd61 	bl	8001150 <HAL_RCC_GetHCLKFreq>
 800068e:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <SystemClock_Config+0xb0>)
 8000690:	fba3 3000 	umull	r3, r0, r3, r0
 8000694:	0980      	lsrs	r0, r0, #6
 8000696:	f000 fb8b 	bl	8000db0 <HAL_SYSTICK_Config>

	    /**Configure the Systick
	    */
	  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800069a:	2004      	movs	r0, #4
 800069c:	f000 fb9e 	bl	8000ddc <HAL_SYSTICK_CLKSourceConfig>

	  /* SysTick_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80006a0:	2200      	movs	r2, #0
 80006a2:	4611      	mov	r1, r2
 80006a4:	f04f 30ff 	mov.w	r0, #4294967295
 80006a8:	f000 fb44 	bl	8000d34 <HAL_NVIC_SetPriority>
}
 80006ac:	b015      	add	sp, #84	; 0x54
 80006ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000
 80006bc:	10624dd3 	.word	0x10624dd3

080006c0 <bspInit>:
{
 80006c0:	b500      	push	{lr}
 80006c2:	b085      	sub	sp, #20
	HAL_Init();
 80006c4:	f000 fae4 	bl	8000c90 <HAL_Init>
	SystemClock_Config();
 80006c8:	f7ff ffa0 	bl	800060c <SystemClock_Config>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006cc:	2200      	movs	r2, #0
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <bspInit+0x68>)
 80006d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80006d4:	f041 0104 	orr.w	r1, r1, #4
 80006d8:	6319      	str	r1, [r3, #48]	; 0x30
 80006da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80006dc:	f001 0104 	and.w	r1, r1, #4
 80006e0:	9100      	str	r1, [sp, #0]
 80006e2:	9900      	ldr	r1, [sp, #0]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80006e4:	9201      	str	r2, [sp, #4]
 80006e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80006e8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80006ec:	6319      	str	r1, [r3, #48]	; 0x30
 80006ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80006f0:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80006f4:	9101      	str	r1, [sp, #4]
 80006f6:	9901      	ldr	r1, [sp, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006f8:	9202      	str	r2, [sp, #8]
 80006fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80006fc:	f041 0101 	orr.w	r1, r1, #1
 8000700:	6319      	str	r1, [r3, #48]	; 0x30
 8000702:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000704:	f001 0101 	and.w	r1, r1, #1
 8000708:	9102      	str	r1, [sp, #8]
 800070a:	9902      	ldr	r1, [sp, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800070c:	9203      	str	r2, [sp, #12]
 800070e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000710:	f042 0202 	orr.w	r2, r2, #2
 8000714:	631a      	str	r2, [r3, #48]	; 0x30
 8000716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000718:	f003 0302 	and.w	r3, r3, #2
 800071c:	9303      	str	r3, [sp, #12]
 800071e:	9b03      	ldr	r3, [sp, #12]
}
 8000720:	b005      	add	sp, #20
 8000722:	f85d fb04 	ldr.w	pc, [sp], #4
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800

0800072c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800072c:	490f      	ldr	r1, [pc, #60]	; (800076c <SystemInit+0x40>)
 800072e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000732:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800073a:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <SystemInit+0x44>)
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	f042 0201 	orr.w	r2, r2, #1
 8000742:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000744:	2000      	movs	r0, #0
 8000746:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800074e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000752:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000754:	4a07      	ldr	r2, [pc, #28]	; (8000774 <SystemInit+0x48>)
 8000756:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800075e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000760:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000762:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000766:	608b      	str	r3, [r1, #8]
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000ed00 	.word	0xe000ed00
 8000770:	40023800 	.word	0x40023800
 8000774:	24003010 	.word	0x24003010

08000778 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000778:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800077c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800077e:	e003      	b.n	8000788 <LoopCopyDataInit>

08000780 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000782:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000784:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000786:	3104      	adds	r1, #4

08000788 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000788:	480b      	ldr	r0, [pc, #44]	; (80007b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800078c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800078e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000790:	d3f6      	bcc.n	8000780 <CopyDataInit>
  ldr  r2, =_sbss
 8000792:	4a0b      	ldr	r2, [pc, #44]	; (80007c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000794:	e002      	b.n	800079c <LoopFillZerobss>

08000796 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000796:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000798:	f842 3b04 	str.w	r3, [r2], #4

0800079c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800079e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80007a0:	d3f9      	bcc.n	8000796 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80007a2:	f7ff ffc3 	bl	800072c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007a6:	f001 ff03 	bl	80025b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007aa:	f001 fee5 	bl	8002578 <main>
  bx  lr    
 80007ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80007b4:	08002edc 	.word	0x08002edc
  ldr  r0, =_sdata
 80007b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80007bc:	2000006c 	.word	0x2000006c
  ldr  r2, =_sbss
 80007c0:	2000006c 	.word	0x2000006c
  ldr  r3, = _ebss
 80007c4:	20000228 	.word	0x20000228

080007c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007c8:	e7fe      	b.n	80007c8 <ADC_IRQHandler>

080007ca <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80007ca:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007cc:	f000 fa7a 	bl	8000cc4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80007d0:	f000 fb15 	bl	8000dfe <HAL_SYSTICK_IRQHandler>
 80007d4:	bd08      	pop	{r3, pc}

080007d6 <qbufferCreate>:
bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
  bool ret = true;


  p_node->ptr_in  = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	6003      	str	r3, [r0, #0]
  p_node->ptr_out = 0;
 80007da:	6043      	str	r3, [r0, #4]
  p_node->length  = length;
 80007dc:	6082      	str	r2, [r0, #8]
  p_node->p_buf   = p_buf;
 80007de:	60c1      	str	r1, [r0, #12]

  if (p_node->p_buf == NULL)
 80007e0:	b109      	cbz	r1, 80007e6 <qbufferCreate+0x10>
  bool ret = true;
 80007e2:	2001      	movs	r0, #1
    p_node->length = 0;
    ret = false;
  }

  return ret;
}
 80007e4:	4770      	bx	lr
    p_node->length = 0;
 80007e6:	6083      	str	r3, [r0, #8]
    ret = false;
 80007e8:	4618      	mov	r0, r3
 80007ea:	4770      	bx	lr

080007ec <qbufferWrite>:
{
  bool ret = true;
  uint32_t index;
  uint32_t next_index;
  uint32_t i;
  if (p_node->p_buf == NULL) return false;
 80007ec:	68c3      	ldr	r3, [r0, #12]
 80007ee:	b1b3      	cbz	r3, 800081e <qbufferWrite+0x32>
{
 80007f0:	b4f0      	push	{r4, r5, r6, r7}
 80007f2:	2400      	movs	r4, #0
 80007f4:	e007      	b.n	8000806 <qbufferWrite+0x1a>
    if (next_index == p_node->length)
    {
      next_index = 0;
    }

    if (next_index != p_node->ptr_out)
 80007f6:	6846      	ldr	r6, [r0, #4]
 80007f8:	42b3      	cmp	r3, r6
 80007fa:	d012      	beq.n	8000822 <qbufferWrite+0x36>
    {
      p_node->p_buf[index] = p_data[i];
 80007fc:	68c6      	ldr	r6, [r0, #12]
 80007fe:	5d0f      	ldrb	r7, [r1, r4]
 8000800:	5577      	strb	r7, [r6, r5]
      p_node->ptr_in       = next_index;
 8000802:	6003      	str	r3, [r0, #0]
  for (i=0; i<length; i++)
 8000804:	3401      	adds	r4, #1
 8000806:	4294      	cmp	r4, r2
 8000808:	d206      	bcs.n	8000818 <qbufferWrite+0x2c>
    index      = p_node->ptr_in;
 800080a:	6805      	ldr	r5, [r0, #0]
    next_index = p_node->ptr_in + 1;
 800080c:	1c6b      	adds	r3, r5, #1
    if (next_index == p_node->length)
 800080e:	6886      	ldr	r6, [r0, #8]
 8000810:	42b3      	cmp	r3, r6
 8000812:	d1f0      	bne.n	80007f6 <qbufferWrite+0xa>
      next_index = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	e7ee      	b.n	80007f6 <qbufferWrite+0xa>
  bool ret = true;
 8000818:	2001      	movs	r0, #1
      break;
    }
  }

  return ret;
}
 800081a:	bcf0      	pop	{r4, r5, r6, r7}
 800081c:	4770      	bx	lr
  if (p_node->p_buf == NULL) return false;
 800081e:	2000      	movs	r0, #0
 8000820:	4770      	bx	lr
      ret = false; // ERR_FULL
 8000822:	2000      	movs	r0, #0
 8000824:	e7f9      	b.n	800081a <qbufferWrite+0x2e>

08000826 <qbufferRead>:
  bool ret = true;
  uint32_t index;
  uint32_t next_index;
  uint32_t i;

  if (p_node->p_buf == NULL) return false; //blocked tmp
 8000826:	68c3      	ldr	r3, [r0, #12]
 8000828:	b1c3      	cbz	r3, 800085c <qbufferRead+0x36>
 800082a:	2300      	movs	r3, #0


  for (i=0; i<length; i++)
 800082c:	4293      	cmp	r3, r2
 800082e:	d219      	bcs.n	8000864 <qbufferRead+0x3e>
{
 8000830:	b470      	push	{r4, r5, r6}
 8000832:	e009      	b.n	8000848 <qbufferRead+0x22>
    if (next_index == p_node->length)
    {
      next_index = 0;
    }

    if (index != p_node->ptr_in)
 8000834:	6806      	ldr	r6, [r0, #0]
 8000836:	42b4      	cmp	r4, r6
 8000838:	d012      	beq.n	8000860 <qbufferRead+0x3a>
    {
      p_data[i]       = p_node->p_buf[index];
 800083a:	68c6      	ldr	r6, [r0, #12]
 800083c:	5d34      	ldrb	r4, [r6, r4]
 800083e:	54cc      	strb	r4, [r1, r3]
      p_node->ptr_out = next_index;
 8000840:	6045      	str	r5, [r0, #4]
  for (i=0; i<length; i++)
 8000842:	3301      	adds	r3, #1
 8000844:	4293      	cmp	r3, r2
 8000846:	d206      	bcs.n	8000856 <qbufferRead+0x30>
    index      = p_node->ptr_out;
 8000848:	6844      	ldr	r4, [r0, #4]
    next_index = p_node->ptr_out + 1;
 800084a:	1c65      	adds	r5, r4, #1
    if (next_index == p_node->length)
 800084c:	6886      	ldr	r6, [r0, #8]
 800084e:	42b5      	cmp	r5, r6
 8000850:	d1f0      	bne.n	8000834 <qbufferRead+0xe>
      next_index = 0;
 8000852:	2500      	movs	r5, #0
 8000854:	e7ee      	b.n	8000834 <qbufferRead+0xe>
  bool ret = true;
 8000856:	2001      	movs	r0, #1
      break;
    }
  }

  return ret;
}
 8000858:	bc70      	pop	{r4, r5, r6}
 800085a:	4770      	bx	lr
  if (p_node->p_buf == NULL) return false; //blocked tmp
 800085c:	2000      	movs	r0, #0
 800085e:	4770      	bx	lr
      ret = false; // ERR_EMPTY
 8000860:	2000      	movs	r0, #0
 8000862:	e7f9      	b.n	8000858 <qbufferRead+0x32>
  bool ret = true;
 8000864:	2001      	movs	r0, #1
}
 8000866:	4770      	bx	lr

08000868 <qbufferAvailable>:
uint32_t qbufferAvailable(qbuffer_t *p_node)
{
  uint32_t length;


  length = (p_node->length + p_node->ptr_in - p_node->ptr_out) % p_node->length;
 8000868:	6882      	ldr	r2, [r0, #8]
 800086a:	6803      	ldr	r3, [r0, #0]
 800086c:	4413      	add	r3, r2
 800086e:	6840      	ldr	r0, [r0, #4]
 8000870:	1a1b      	subs	r3, r3, r0
 8000872:	fbb3 f0f2 	udiv	r0, r3, r2

  return length;
}
 8000876:	fb02 3010 	mls	r0, r2, r0, r3
 800087a:	4770      	bx	lr

0800087c <qbufferFlush>:

void qbufferFlush(qbuffer_t *p_node)
{
  p_node->ptr_in  = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	6003      	str	r3, [r0, #0]
  p_node->ptr_out = 0;
 8000880:	6043      	str	r3, [r0, #4]
 8000882:	4770      	bx	lr

08000884 <ledInit>:

#include "led.h"


void ledInit(void)
{
 8000884:	b500      	push	{lr}
 8000886:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000888:	2301      	movs	r3, #1
 800088a:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800088c:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800088e:	2302      	movs	r3, #2
 8000890:	9304      	str	r3, [sp, #16]

	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000892:	a906      	add	r1, sp, #24
 8000894:	2320      	movs	r3, #32
 8000896:	f841 3d14 	str.w	r3, [r1, #-20]!
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	4803      	ldr	r0, [pc, #12]	; (80008a8 <ledInit+0x24>)
 800089c:	f000 fac6 	bl	8000e2c <HAL_GPIO_Init>
}
 80008a0:	b007      	add	sp, #28
 80008a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80008a6:	bf00      	nop
 80008a8:	40020000 	.word	0x40020000

080008ac <ledToggle>:
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
}

void ledToggle(uint8_t ch)
{
 80008ac:	b508      	push	{r3, lr}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008ae:	2120      	movs	r1, #32
 80008b0:	4801      	ldr	r0, [pc, #4]	; (80008b8 <ledToggle+0xc>)
 80008b2:	f000 fb9d 	bl	8000ff0 <HAL_GPIO_TogglePin>
 80008b6:	bd08      	pop	{r3, pc}
 80008b8:	40020000 	.word	0x40020000

080008bc <uartStartRx>:
	}
	return ret;
}

void uartStartRx(uint8_t channel)
{
 80008bc:	b508      	push	{r3, lr}
	uart_t *p_uart = &uart_tbl[channel];

	if(p_uart->rx_mode == UART_MODE_INTERRUPT)
 80008be:	236c      	movs	r3, #108	; 0x6c
 80008c0:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <uartStartRx+0x30>)
 80008c2:	fb03 2300 	mla	r3, r3, r0, r2
 80008c6:	7a5b      	ldrb	r3, [r3, #9]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d000      	beq.n	80008ce <uartStartRx+0x12>
 80008cc:	bd08      	pop	{r3, pc}
	{
		HAL_UART_Receive_IT(&p_uart->handle, p_uart->rx_buf, 1);
 80008ce:	236c      	movs	r3, #108	; 0x6c
 80008d0:	fb03 f000 	mul.w	r0, r3, r0
 80008d4:	f100 0108 	add.w	r1, r0, #8
 80008d8:	4411      	add	r1, r2
 80008da:	3028      	adds	r0, #40	; 0x28
 80008dc:	4410      	add	r0, r2
 80008de:	2201      	movs	r2, #1
 80008e0:	3102      	adds	r1, #2
 80008e2:	3004      	adds	r0, #4
 80008e4:	f001 fd2e 	bl	8002344 <HAL_UART_Receive_IT>
	}

}
 80008e8:	e7f0      	b.n	80008cc <uartStartRx+0x10>
 80008ea:	bf00      	nop
 80008ec:	20000094 	.word	0x20000094

080008f0 <uartRxHandler>:

void uartRxHandler(uint8_t channel)
{
	uart_t *p_uart = &uart_tbl[channel];

	if(p_uart->rx_mode == UART_MODE_INTERRUPT)
 80008f0:	236c      	movs	r3, #108	; 0x6c
 80008f2:	4a10      	ldr	r2, [pc, #64]	; (8000934 <uartRxHandler+0x44>)
 80008f4:	fb03 2300 	mla	r3, r3, r0, r2
 80008f8:	7a5b      	ldrb	r3, [r3, #9]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d000      	beq.n	8000900 <uartRxHandler+0x10>
 80008fe:	4770      	bx	lr
{
 8000900:	b570      	push	{r4, r5, r6, lr}
 8000902:	4604      	mov	r4, r0
	{
		qbufferWrite(&p_uart->qbuffer_rx, &p_uart->rx_buf[0], 1);
 8000904:	256c      	movs	r5, #108	; 0x6c
 8000906:	fb05 f600 	mul.w	r6, r5, r0
 800090a:	f106 0108 	add.w	r1, r6, #8
 800090e:	4615      	mov	r5, r2
 8000910:	4411      	add	r1, r2
 8000912:	f106 0018 	add.w	r0, r6, #24
 8000916:	4410      	add	r0, r2
 8000918:	2201      	movs	r2, #1
 800091a:	3102      	adds	r1, #2
 800091c:	3004      	adds	r0, #4
 800091e:	f7ff ff65 	bl	80007ec <qbufferWrite>

		__HAL_UNLOCK(&p_uart->handle);
 8000922:	4435      	add	r5, r6
 8000924:	2300      	movs	r3, #0
 8000926:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
		uartStartRx(channel);
 800092a:	4620      	mov	r0, r4
 800092c:	f7ff ffc6 	bl	80008bc <uartStartRx>
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	bf00      	nop
 8000934:	20000094 	.word	0x20000094

08000938 <uartInit>:
	for(i=0; i < UART_MAX_CH ; i++)
 8000938:	2300      	movs	r3, #0
 800093a:	b103      	cbz	r3, 800093e <uartInit+0x6>
 800093c:	4770      	bx	lr
void uartInit(void){
 800093e:	b410      	push	{r4}
		uart_tbl[i].is_open = false;
 8000940:	4c07      	ldr	r4, [pc, #28]	; (8000960 <uartInit+0x28>)
 8000942:	226c      	movs	r2, #108	; 0x6c
 8000944:	fb02 f203 	mul.w	r2, r2, r3
 8000948:	18a0      	adds	r0, r4, r2
 800094a:	2100      	movs	r1, #0
 800094c:	54a1      	strb	r1, [r4, r2]
		uart_tbl[i].rx_mode = UART_MODE_POLLING;
 800094e:	7241      	strb	r1, [r0, #9]
		uart_tbl[i].tx_mode = UART_MODE_POLLING;
 8000950:	7201      	strb	r1, [r0, #8]
	for(i=0; i < UART_MAX_CH ; i++)
 8000952:	3301      	adds	r3, #1
 8000954:	b2db      	uxtb	r3, r3
 8000956:	2b00      	cmp	r3, #0
 8000958:	d0f2      	beq.n	8000940 <uartInit+0x8>
}
 800095a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	20000094 	.word	0x20000094

08000964 <uartOpen>:
{
 8000964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000968:	468a      	mov	sl, r1
	if(channel == _DEF_UART1) p_uart -> handle.Instance = USART2;
 800096a:	4607      	mov	r7, r0
 800096c:	b160      	cbz	r0, 8000988 <uartOpen+0x24>
	else if(channel == _DEF_UART2) p_uart -> handle.Instance = USART3;
 800096e:	2801      	cmp	r0, #1
 8000970:	d045      	beq.n	80009fe <uartOpen+0x9a>
	else if(channel == _DEF_UART3) p_uart -> handle.Instance = UART4;
 8000972:	2802      	cmp	r0, #2
 8000974:	d04a      	beq.n	8000a0c <uartOpen+0xa8>
	else if(channel == _DEF_UART4) p_uart -> handle.Instance = UART5;
 8000976:	2803      	cmp	r0, #3
 8000978:	d10c      	bne.n	8000994 <uartOpen+0x30>
 800097a:	236c      	movs	r3, #108	; 0x6c
 800097c:	4a27      	ldr	r2, [pc, #156]	; (8000a1c <uartOpen+0xb8>)
 800097e:	fb03 2300 	mla	r3, r3, r0, r2
 8000982:	4a27      	ldr	r2, [pc, #156]	; (8000a20 <uartOpen+0xbc>)
 8000984:	62da      	str	r2, [r3, #44]	; 0x2c
 8000986:	e005      	b.n	8000994 <uartOpen+0x30>
	if(channel == _DEF_UART1) p_uart -> handle.Instance = USART2;
 8000988:	236c      	movs	r3, #108	; 0x6c
 800098a:	4a24      	ldr	r2, [pc, #144]	; (8000a1c <uartOpen+0xb8>)
 800098c:	fb03 2300 	mla	r3, r3, r0, r2
 8000990:	4a24      	ldr	r2, [pc, #144]	; (8000a24 <uartOpen+0xc0>)
 8000992:	62da      	str	r2, [r3, #44]	; 0x2c
	p_uart -> handle.Init.BaudRate 		= baud;
 8000994:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8000a1c <uartOpen+0xb8>
 8000998:	256c      	movs	r5, #108	; 0x6c
 800099a:	fb05 f507 	mul.w	r5, r5, r7
 800099e:	eb09 0405 	add.w	r4, r9, r5
 80009a2:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
	p_uart -> handle.Init.WordLength 	= UART_WORDLENGTH_8B;
 80009a6:	f04f 0800 	mov.w	r8, #0
 80009aa:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
	p_uart -> handle.Init.StopBits 		= UART_STOPBITS_1;
 80009ae:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
	p_uart -> handle.Init.Parity 		= UART_PARITY_NONE;
 80009b2:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
	p_uart -> handle.Init.HwFlowCtl 	= UART_HWCONTROL_NONE;
 80009b6:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
	p_uart -> handle.Init.Mode			= UART_MODE_TX_RX;
 80009ba:	230c      	movs	r3, #12
 80009bc:	6423      	str	r3, [r4, #64]	; 0x40
	HAL_UART_DeInit(&p_uart->handle);
 80009be:	f105 0628 	add.w	r6, r5, #40	; 0x28
 80009c2:	444e      	add	r6, r9
 80009c4:	3604      	adds	r6, #4
 80009c6:	4630      	mov	r0, r6
 80009c8:	f001 fc38 	bl	800223c <HAL_UART_DeInit>
	HAL_UART_Init(&p_uart->handle);
 80009cc:	4630      	mov	r0, r6
 80009ce:	f001 fc05 	bl	80021dc <HAL_UART_Init>
	qbufferCreate(&p_uart->qbuffer_rx, uart_rx_qbuf[channel], UART_RX_BUF_LENGTH);
 80009d2:	f105 0018 	add.w	r0, r5, #24
 80009d6:	4448      	add	r0, r9
 80009d8:	2210      	movs	r2, #16
 80009da:	4913      	ldr	r1, [pc, #76]	; (8000a28 <uartOpen+0xc4>)
 80009dc:	eb01 2107 	add.w	r1, r1, r7, lsl #8
 80009e0:	3004      	adds	r0, #4
 80009e2:	f7ff fef8 	bl	80007d6 <qbufferCreate>
	p_uart->rx_mode = UART_MODE_INTERRUPT;
 80009e6:	2301      	movs	r3, #1
 80009e8:	7263      	strb	r3, [r4, #9]
	p_uart->baud	= baud;
 80009ea:	f8c4 a004 	str.w	sl, [r4, #4]
	p_uart->is_open	= true;
 80009ee:	f809 3005 	strb.w	r3, [r9, r5]
	uartStartRx(channel);
 80009f2:	4638      	mov	r0, r7
 80009f4:	f7ff ff62 	bl	80008bc <uartStartRx>
}
 80009f8:	4640      	mov	r0, r8
 80009fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	else if(channel == _DEF_UART2) p_uart -> handle.Instance = USART3;
 80009fe:	236c      	movs	r3, #108	; 0x6c
 8000a00:	4a06      	ldr	r2, [pc, #24]	; (8000a1c <uartOpen+0xb8>)
 8000a02:	fb03 2300 	mla	r3, r3, r0, r2
 8000a06:	4a09      	ldr	r2, [pc, #36]	; (8000a2c <uartOpen+0xc8>)
 8000a08:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a0a:	e7c3      	b.n	8000994 <uartOpen+0x30>
	else if(channel == _DEF_UART3) p_uart -> handle.Instance = UART4;
 8000a0c:	236c      	movs	r3, #108	; 0x6c
 8000a0e:	4a03      	ldr	r2, [pc, #12]	; (8000a1c <uartOpen+0xb8>)
 8000a10:	fb03 2300 	mla	r3, r3, r0, r2
 8000a14:	4a06      	ldr	r2, [pc, #24]	; (8000a30 <uartOpen+0xcc>)
 8000a16:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a18:	e7bc      	b.n	8000994 <uartOpen+0x30>
 8000a1a:	bf00      	nop
 8000a1c:	20000094 	.word	0x20000094
 8000a20:	40005000 	.word	0x40005000
 8000a24:	40004400 	.word	0x40004400
 8000a28:	20000100 	.word	0x20000100
 8000a2c:	40004800 	.word	0x40004800
 8000a30:	40004c00 	.word	0x40004c00

08000a34 <uartAvailable>:
	if(channel > UART_MAX_CH)
 8000a34:	2801      	cmp	r0, #1
 8000a36:	d901      	bls.n	8000a3c <uartAvailable+0x8>
		return 0;
 8000a38:	2000      	movs	r0, #0
 8000a3a:	4770      	bx	lr
{
 8000a3c:	b508      	push	{r3, lr}
	return qbufferAvailable(&uart_tbl[channel].qbuffer_rx);
 8000a3e:	236c      	movs	r3, #108	; 0x6c
 8000a40:	fb03 f000 	mul.w	r0, r3, r0
 8000a44:	3018      	adds	r0, #24
 8000a46:	4b03      	ldr	r3, [pc, #12]	; (8000a54 <uartAvailable+0x20>)
 8000a48:	4418      	add	r0, r3
 8000a4a:	3004      	adds	r0, #4
 8000a4c:	f7ff ff0c 	bl	8000868 <qbufferAvailable>
 8000a50:	bd08      	pop	{r3, pc}
 8000a52:	bf00      	nop
 8000a54:	20000094 	.word	0x20000094

08000a58 <uartFlush>:
{
 8000a58:	b508      	push	{r3, lr}
	if(uart_tbl[channel].rx_mode == UART_MODE_INTERRUPT)
 8000a5a:	236c      	movs	r3, #108	; 0x6c
 8000a5c:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <uartFlush+0x24>)
 8000a5e:	fb03 2300 	mla	r3, r3, r0, r2
 8000a62:	7a5b      	ldrb	r3, [r3, #9]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d000      	beq.n	8000a6a <uartFlush+0x12>
 8000a68:	bd08      	pop	{r3, pc}
		qbufferFlush(&uart_tbl[channel].qbuffer_rx);
 8000a6a:	236c      	movs	r3, #108	; 0x6c
 8000a6c:	fb03 f000 	mul.w	r0, r3, r0
 8000a70:	3018      	adds	r0, #24
 8000a72:	4410      	add	r0, r2
 8000a74:	3004      	adds	r0, #4
 8000a76:	f7ff ff01 	bl	800087c <qbufferFlush>
}
 8000a7a:	e7f5      	b.n	8000a68 <uartFlush+0x10>
 8000a7c:	20000094 	.word	0x20000094

08000a80 <uartWrite>:
{
 8000a80:	b538      	push	{r3, r4, r5, lr}
	  if (p_uart->rx_mode == UART_MODE_INTERRUPT)
 8000a82:	236c      	movs	r3, #108	; 0x6c
 8000a84:	4d0c      	ldr	r5, [pc, #48]	; (8000ab8 <uartWrite+0x38>)
 8000a86:	fb03 5300 	mla	r3, r3, r0, r5
 8000a8a:	7a5b      	ldrb	r3, [r3, #9]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d001      	beq.n	8000a94 <uartWrite+0x14>
	int32_t ret = 0;
 8000a90:	2000      	movs	r0, #0
 8000a92:	bd38      	pop	{r3, r4, r5, pc}
 8000a94:	4614      	mov	r4, r2
	    if (HAL_UART_Transmit(&p_uart->handle, (uint8_t*)p_data, length, 1000) == HAL_OK)
 8000a96:	236c      	movs	r3, #108	; 0x6c
 8000a98:	fb03 f000 	mul.w	r0, r3, r0
 8000a9c:	3028      	adds	r0, #40	; 0x28
 8000a9e:	4428      	add	r0, r5
 8000aa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa4:	b292      	uxth	r2, r2
 8000aa6:	3004      	adds	r0, #4
 8000aa8:	f001 fbdb 	bl	8002262 <HAL_UART_Transmit>
 8000aac:	b908      	cbnz	r0, 8000ab2 <uartWrite+0x32>
	      ret = length;
 8000aae:	4620      	mov	r0, r4
 8000ab0:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = 0;
 8000ab2:	2000      	movs	r0, #0
}
 8000ab4:	bd38      	pop	{r3, r4, r5, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000094 	.word	0x20000094

08000abc <uartRead>:
{
 8000abc:	b500      	push	{lr}
 8000abe:	b083      	sub	sp, #12
	uint8_t ret =0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f88d 3007 	strb.w	r3, [sp, #7]
	if(p_uart->rx_mode == UART_MODE_INTERRUPT)
 8000ac6:	236c      	movs	r3, #108	; 0x6c
 8000ac8:	4a0b      	ldr	r2, [pc, #44]	; (8000af8 <uartRead+0x3c>)
 8000aca:	fb03 2300 	mla	r3, r3, r0, r2
 8000ace:	7a5b      	ldrb	r3, [r3, #9]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d004      	beq.n	8000ade <uartRead+0x22>
}
 8000ad4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000ad8:	b003      	add	sp, #12
 8000ada:	f85d fb04 	ldr.w	pc, [sp], #4
		qbufferRead(&p_uart->qbuffer_rx, &ret, 1);
 8000ade:	236c      	movs	r3, #108	; 0x6c
 8000ae0:	fb03 f000 	mul.w	r0, r3, r0
 8000ae4:	3018      	adds	r0, #24
 8000ae6:	4410      	add	r0, r2
 8000ae8:	2201      	movs	r2, #1
 8000aea:	f10d 0107 	add.w	r1, sp, #7
 8000aee:	3004      	adds	r0, #4
 8000af0:	f7ff fe99 	bl	8000826 <qbufferRead>
 8000af4:	e7ee      	b.n	8000ad4 <uartRead+0x18>
 8000af6:	bf00      	nop
 8000af8:	20000094 	.word	0x20000094

08000afc <uartPrintf>:
{
 8000afc:	b40e      	push	{r1, r2, r3}
 8000afe:	b510      	push	{r4, lr}
 8000b00:	b0c3      	sub	sp, #268	; 0x10c
 8000b02:	4604      	mov	r4, r0
 8000b04:	ab45      	add	r3, sp, #276	; 0x114
 8000b06:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(arg, fmt);
 8000b0a:	9341      	str	r3, [sp, #260]	; 0x104
	len = vsnprintf(print_buffer, 255 , fmt, arg);
 8000b0c:	21ff      	movs	r1, #255	; 0xff
 8000b0e:	a801      	add	r0, sp, #4
 8000b10:	f001 fd9e 	bl	8002650 <vsniprintf>
	ret = uartWrite(channel, (uint8_t*)print_buffer, len);
 8000b14:	4602      	mov	r2, r0
 8000b16:	a901      	add	r1, sp, #4
 8000b18:	4620      	mov	r0, r4
 8000b1a:	f7ff ffb1 	bl	8000a80 <uartWrite>
}
 8000b1e:	b043      	add	sp, #268	; 0x10c
 8000b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b24:	b003      	add	sp, #12
 8000b26:	4770      	bx	lr

08000b28 <uartErrHandler>:

	}
}

void uartErrHandler(uint8_t channel)
{
 8000b28:	b510      	push	{r4, lr}
 8000b2a:	4604      	mov	r4, r0
	uartFlush(channel);
 8000b2c:	f7ff ff94 	bl	8000a58 <uartFlush>
	uartStartRx(channel);
 8000b30:	4620      	mov	r0, r4
 8000b32:	f7ff fec3 	bl	80008bc <uartStartRx>
 8000b36:	bd10      	pop	{r4, pc}

08000b38 <HAL_UART_RxCpltCallback>:
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000b38:	b508      	push	{r3, lr}
	if(UartHandle->Instance == USART2)
 8000b3a:	6803      	ldr	r3, [r0, #0]
 8000b3c:	4a0e      	ldr	r2, [pc, #56]	; (8000b78 <HAL_UART_RxCpltCallback+0x40>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d009      	beq.n	8000b56 <HAL_UART_RxCpltCallback+0x1e>
	{
		uartRxHandler(_DEF_UART1);
	}
	else if(UartHandle->Instance == USART3)
 8000b42:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <HAL_UART_RxCpltCallback+0x44>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d00a      	beq.n	8000b5e <HAL_UART_RxCpltCallback+0x26>
	{
		uartRxHandler(_DEF_UART2);
	}
	else if(UartHandle->Instance == UART4)
 8000b48:	4a0d      	ldr	r2, [pc, #52]	; (8000b80 <HAL_UART_RxCpltCallback+0x48>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d00b      	beq.n	8000b66 <HAL_UART_RxCpltCallback+0x2e>
	{
		uartRxHandler(_DEF_UART3);
	}
	else if(UartHandle->Instance == UART5)
 8000b4e:	4a0d      	ldr	r2, [pc, #52]	; (8000b84 <HAL_UART_RxCpltCallback+0x4c>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d00c      	beq.n	8000b6e <HAL_UART_RxCpltCallback+0x36>
 8000b54:	bd08      	pop	{r3, pc}
		uartRxHandler(_DEF_UART1);
 8000b56:	2000      	movs	r0, #0
 8000b58:	f7ff feca 	bl	80008f0 <uartRxHandler>
 8000b5c:	bd08      	pop	{r3, pc}
		uartRxHandler(_DEF_UART2);
 8000b5e:	2001      	movs	r0, #1
 8000b60:	f7ff fec6 	bl	80008f0 <uartRxHandler>
 8000b64:	bd08      	pop	{r3, pc}
		uartRxHandler(_DEF_UART3);
 8000b66:	2002      	movs	r0, #2
 8000b68:	f7ff fec2 	bl	80008f0 <uartRxHandler>
 8000b6c:	bd08      	pop	{r3, pc}
	{
		uartRxHandler(_DEF_UART4);
 8000b6e:	2003      	movs	r0, #3
 8000b70:	f7ff febe 	bl	80008f0 <uartRxHandler>
	}
}
 8000b74:	e7ee      	b.n	8000b54 <HAL_UART_RxCpltCallback+0x1c>
 8000b76:	bf00      	nop
 8000b78:	40004400 	.word	0x40004400
 8000b7c:	40004800 	.word	0x40004800
 8000b80:	40004c00 	.word	0x40004c00
 8000b84:	40005000 	.word	0x40005000

08000b88 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8000b88:	b510      	push	{r4, lr}
 8000b8a:	4604      	mov	r4, r0
	HAL_UART_DeInit(UartHandle);
 8000b8c:	f001 fb56 	bl	800223c <HAL_UART_DeInit>
	HAL_UART_Init(UartHandle);
 8000b90:	4620      	mov	r0, r4
 8000b92:	f001 fb23 	bl	80021dc <HAL_UART_Init>

	if(UartHandle->Instance == USART2)
 8000b96:	6823      	ldr	r3, [r4, #0]
 8000b98:	4a0e      	ldr	r2, [pc, #56]	; (8000bd4 <HAL_UART_ErrorCallback+0x4c>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d009      	beq.n	8000bb2 <HAL_UART_ErrorCallback+0x2a>
	{
		uartErrHandler(_DEF_UART1);
	}
	else if(UartHandle->Instance == USART3)
 8000b9e:	4a0e      	ldr	r2, [pc, #56]	; (8000bd8 <HAL_UART_ErrorCallback+0x50>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d00a      	beq.n	8000bba <HAL_UART_ErrorCallback+0x32>
	{
		uartErrHandler(_DEF_UART2);
	}
	else if(UartHandle->Instance == UART4)
 8000ba4:	4a0d      	ldr	r2, [pc, #52]	; (8000bdc <HAL_UART_ErrorCallback+0x54>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d00b      	beq.n	8000bc2 <HAL_UART_ErrorCallback+0x3a>
	{
		uartErrHandler(_DEF_UART3);
	}
	else if(UartHandle->Instance == UART5)
 8000baa:	4a0d      	ldr	r2, [pc, #52]	; (8000be0 <HAL_UART_ErrorCallback+0x58>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d00c      	beq.n	8000bca <HAL_UART_ErrorCallback+0x42>
 8000bb0:	bd10      	pop	{r4, pc}
		uartErrHandler(_DEF_UART1);
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	f7ff ffb8 	bl	8000b28 <uartErrHandler>
 8000bb8:	bd10      	pop	{r4, pc}
		uartErrHandler(_DEF_UART2);
 8000bba:	2001      	movs	r0, #1
 8000bbc:	f7ff ffb4 	bl	8000b28 <uartErrHandler>
 8000bc0:	bd10      	pop	{r4, pc}
		uartErrHandler(_DEF_UART3);
 8000bc2:	2002      	movs	r0, #2
 8000bc4:	f7ff ffb0 	bl	8000b28 <uartErrHandler>
 8000bc8:	bd10      	pop	{r4, pc}
	{
		uartErrHandler(_DEF_UART4);
 8000bca:	2003      	movs	r0, #3
 8000bcc:	f7ff ffac 	bl	8000b28 <uartErrHandler>
	}
}
 8000bd0:	e7ee      	b.n	8000bb0 <HAL_UART_ErrorCallback+0x28>
 8000bd2:	bf00      	nop
 8000bd4:	40004400 	.word	0x40004400
 8000bd8:	40004800 	.word	0x40004800
 8000bdc:	40004c00 	.word	0x40004c00
 8000be0:	40005000 	.word	0x40005000

08000be4 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000be4:	b508      	push	{r3, lr}
	HAL_UART_IRQHandler(&uart_tbl[_DEF_UART1].handle);
 8000be6:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <USART2_IRQHandler+0xc>)
 8000be8:	f001 fc2e 	bl	8002448 <HAL_UART_IRQHandler>
 8000bec:	bd08      	pop	{r3, pc}
 8000bee:	bf00      	nop
 8000bf0:	200000c0 	.word	0x200000c0

08000bf4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	if(huart->Instance == USART2)
 8000bf4:	6802      	ldr	r2, [r0, #0]
 8000bf6:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <HAL_UART_MspInit+0x78>)
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d000      	beq.n	8000bfe <HAL_UART_MspInit+0xa>
 8000bfc:	4770      	bx	lr
{
 8000bfe:	b570      	push	{r4, r5, r6, lr}
 8000c00:	b088      	sub	sp, #32
	{
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	2400      	movs	r4, #0
 8000c04:	9401      	str	r4, [sp, #4]
 8000c06:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8000c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c0c:	f042 0201 	orr.w	r2, r2, #1
 8000c10:	631a      	str	r2, [r3, #48]	; 0x30
 8000c12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c14:	f002 0201 	and.w	r2, r2, #1
 8000c18:	9201      	str	r2, [sp, #4]
 8000c1a:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_USART2_CLK_ENABLE();
 8000c1c:	9402      	str	r4, [sp, #8]
 8000c1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c20:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000c24:	641a      	str	r2, [r3, #64]	; 0x40
 8000c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2c:	9302      	str	r3, [sp, #8]
 8000c2e:	9b02      	ldr	r3, [sp, #8]

		GPIO_InitStruct.Pin		= 	GPIO_PIN_2;
 8000c30:	2304      	movs	r3, #4
 8000c32:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode	=	GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Pull	=	GPIO_PULLUP;
 8000c38:	2501      	movs	r5, #1
 8000c3a:	9505      	str	r5, [sp, #20]
		GPIO_InitStruct.Speed	=	GPIO_SPEED_FREQ_HIGH;
 8000c3c:	9306      	str	r3, [sp, #24]

		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	4e0c      	ldr	r6, [pc, #48]	; (8000c70 <HAL_UART_MspInit+0x7c>)
 8000c40:	a903      	add	r1, sp, #12
 8000c42:	4630      	mov	r0, r6
 8000c44:	f000 f8f2 	bl	8000e2c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c48:	2308      	movs	r3, #8
 8000c4a:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4c:	9404      	str	r4, [sp, #16]

		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	a903      	add	r1, sp, #12
 8000c50:	4630      	mov	r0, r6
 8000c52:	f000 f8eb 	bl	8000e2c <HAL_GPIO_Init>

		HAL_NVIC_SetPriority(USART2_IRQn, 0 , 1);
 8000c56:	462a      	mov	r2, r5
 8000c58:	4621      	mov	r1, r4
 8000c5a:	2026      	movs	r0, #38	; 0x26
 8000c5c:	f000 f86a 	bl	8000d34 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c60:	2026      	movs	r0, #38	; 0x26
 8000c62:	f000 f899 	bl	8000d98 <HAL_NVIC_EnableIRQ>
	}
}
 8000c66:	b008      	add	sp, #32
 8000c68:	bd70      	pop	{r4, r5, r6, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40004400 	.word	0x40004400
 8000c70:	40020000 	.word	0x40020000

08000c74 <hwInit>:


#include "hw.h"

void hwInit(void)
{
 8000c74:	b508      	push	{r3, lr}
  bspInit();
 8000c76:	f7ff fd23 	bl	80006c0 <bspInit>

  uartInit();//uartInit();
 8000c7a:	f7ff fe5d 	bl	8000938 <uartInit>
  ledInit();
 8000c7e:	f7ff fe01 	bl	8000884 <ledInit>
 8000c82:	bd08      	pop	{r3, pc}

08000c84 <delay>:
}

void delay(uint32_t time_ms)
{
 8000c84:	b508      	push	{r3, lr}
	HAL_Delay(time_ms);
 8000c86:	f000 f82f 	bl	8000ce8 <HAL_Delay>
 8000c8a:	bd08      	pop	{r3, pc}

08000c8c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000c8c:	4770      	bx	lr
	...

08000c90 <HAL_Init>:
{
 8000c90:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <HAL_Init+0x30>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c9a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ca2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000caa:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cac:	2003      	movs	r0, #3
 8000cae:	f000 f82f 	bl	8000d10 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb2:	200f      	movs	r0, #15
 8000cb4:	f000 ffdc 	bl	8001c70 <HAL_InitTick>
  HAL_MspInit();
 8000cb8:	f7ff ffe8 	bl	8000c8c <HAL_MspInit>
}
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	bd08      	pop	{r3, pc}
 8000cc0:	40023c00 	.word	0x40023c00

08000cc4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000cc4:	4a03      	ldr	r2, [pc, #12]	; (8000cd4 <HAL_IncTick+0x10>)
 8000cc6:	6811      	ldr	r1, [r2, #0]
 8000cc8:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <HAL_IncTick+0x14>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	440b      	add	r3, r1
 8000cce:	6013      	str	r3, [r2, #0]
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20000200 	.word	0x20000200
 8000cd8:	20000004 	.word	0x20000004

08000cdc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000cdc:	4b01      	ldr	r3, [pc, #4]	; (8000ce4 <HAL_GetTick+0x8>)
 8000cde:	6818      	ldr	r0, [r3, #0]
}
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000200 	.word	0x20000200

08000ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000cec:	f7ff fff6 	bl	8000cdc <HAL_GetTick>
 8000cf0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf2:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000cf6:	d002      	beq.n	8000cfe <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <HAL_Delay+0x24>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cfe:	f7ff ffed 	bl	8000cdc <HAL_GetTick>
 8000d02:	1b40      	subs	r0, r0, r5
 8000d04:	4284      	cmp	r4, r0
 8000d06:	d8fa      	bhi.n	8000cfe <HAL_Delay+0x16>
  {
  }
}
 8000d08:	bd38      	pop	{r3, r4, r5, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000004 	.word	0x20000004

08000d10 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d10:	4a07      	ldr	r2, [pc, #28]	; (8000d30 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000d12:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d14:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d18:	041b      	lsls	r3, r3, #16
 8000d1a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000d1c:	0200      	lsls	r0, r0, #8
 8000d1e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d22:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000d24:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000d28:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000d2c:	60d0      	str	r0, [r2, #12]
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d34:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d36:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <HAL_NVIC_SetPriority+0x5c>)
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d3e:	f1c3 0407 	rsb	r4, r3, #7
 8000d42:	2c04      	cmp	r4, #4
 8000d44:	bf28      	it	cs
 8000d46:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d48:	1d1d      	adds	r5, r3, #4
 8000d4a:	2d06      	cmp	r5, #6
 8000d4c:	d917      	bls.n	8000d7e <HAL_NVIC_SetPriority+0x4a>
 8000d4e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	2501      	movs	r5, #1
 8000d52:	fa05 f404 	lsl.w	r4, r5, r4
 8000d56:	3c01      	subs	r4, #1
 8000d58:	4021      	ands	r1, r4
 8000d5a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d5c:	fa05 f303 	lsl.w	r3, r5, r3
 8000d60:	3b01      	subs	r3, #1
 8000d62:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000d66:	2800      	cmp	r0, #0
 8000d68:	db0b      	blt.n	8000d82 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6a:	0109      	lsls	r1, r1, #4
 8000d6c:	b2c9      	uxtb	r1, r1
 8000d6e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000d72:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000d76:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000d7a:	bc30      	pop	{r4, r5}
 8000d7c:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7e:	2300      	movs	r3, #0
 8000d80:	e7e6      	b.n	8000d50 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d82:	f000 000f 	and.w	r0, r0, #15
 8000d86:	0109      	lsls	r1, r1, #4
 8000d88:	b2c9      	uxtb	r1, r1
 8000d8a:	4b02      	ldr	r3, [pc, #8]	; (8000d94 <HAL_NVIC_SetPriority+0x60>)
 8000d8c:	5419      	strb	r1, [r3, r0]
 8000d8e:	e7f4      	b.n	8000d7a <HAL_NVIC_SetPriority+0x46>
 8000d90:	e000ed00 	.word	0xe000ed00
 8000d94:	e000ed14 	.word	0xe000ed14

08000d98 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000d98:	0942      	lsrs	r2, r0, #5
 8000d9a:	f000 001f 	and.w	r0, r0, #31
 8000d9e:	2301      	movs	r3, #1
 8000da0:	fa03 f000 	lsl.w	r0, r3, r0
 8000da4:	4b01      	ldr	r3, [pc, #4]	; (8000dac <HAL_NVIC_EnableIRQ+0x14>)
 8000da6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100

08000db0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db0:	3801      	subs	r0, #1
 8000db2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000db6:	d20a      	bcs.n	8000dce <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_SYSTICK_Config+0x24>)
 8000dba:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbc:	21f0      	movs	r1, #240	; 0xf0
 8000dbe:	4a06      	ldr	r2, [pc, #24]	; (8000dd8 <HAL_SYSTICK_Config+0x28>)
 8000dc0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc8:	2207      	movs	r2, #7
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000dce:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000e010 	.word	0xe000e010
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000ddc:	2804      	cmp	r0, #4
 8000dde:	d005      	beq.n	8000dec <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000de0:	4a05      	ldr	r2, [pc, #20]	; (8000df8 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000de2:	6813      	ldr	r3, [r2, #0]
 8000de4:	f023 0304 	bic.w	r3, r3, #4
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000dec:	4a02      	ldr	r2, [pc, #8]	; (8000df8 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000dee:	6813      	ldr	r3, [r2, #0]
 8000df0:	f043 0304 	orr.w	r3, r3, #4
 8000df4:	6013      	str	r3, [r2, #0]
 8000df6:	4770      	bx	lr
 8000df8:	e000e010 	.word	0xe000e010

08000dfc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000dfc:	4770      	bx	lr

08000dfe <HAL_SYSTICK_IRQHandler>:
{
 8000dfe:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000e00:	f7ff fffc 	bl	8000dfc <HAL_SYSTICK_Callback>
 8000e04:	bd08      	pop	{r3, pc}

08000e06 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e06:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d003      	beq.n	8000e18 <HAL_DMA_Abort_IT+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e10:	2380      	movs	r3, #128	; 0x80
 8000e12:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000e14:	2001      	movs	r0, #1
 8000e16:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e18:	2305      	movs	r3, #5
 8000e1a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e1e:	6802      	ldr	r2, [r0, #0]
 8000e20:	6813      	ldr	r3, [r2, #0]
 8000e22:	f023 0301 	bic.w	r3, r3, #1
 8000e26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000e28:	2000      	movs	r0, #0
}
 8000e2a:	4770      	bx	lr

08000e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e2e:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e30:	2400      	movs	r4, #0
 8000e32:	e098      	b.n	8000f66 <HAL_GPIO_Init+0x13a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e34:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8000e38:	f10e 0e08 	add.w	lr, lr, #8
 8000e3c:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e40:	f004 0607 	and.w	r6, r4, #7
 8000e44:	00b6      	lsls	r6, r6, #2
 8000e46:	270f      	movs	r7, #15
 8000e48:	40b7      	lsls	r7, r6
 8000e4a:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e4e:	690f      	ldr	r7, [r1, #16]
 8000e50:	fa07 f606 	lsl.w	r6, r7, r6
 8000e54:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 8000e56:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
 8000e5a:	e094      	b.n	8000f86 <HAL_GPIO_Init+0x15a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e5c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e5e:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e60:	68cf      	ldr	r7, [r1, #12]
 8000e62:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e66:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000e68:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e6a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e6c:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e70:	684e      	ldr	r6, [r1, #4]
 8000e72:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8000e76:	40a6      	lsls	r6, r4
 8000e78:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8000e7a:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e7c:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e7e:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e80:	688b      	ldr	r3, [r1, #8]
 8000e82:	fa03 f30e 	lsl.w	r3, r3, lr
 8000e86:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 8000e88:	60c2      	str	r2, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e8a:	684b      	ldr	r3, [r1, #4]
 8000e8c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000e90:	d068      	beq.n	8000f64 <HAL_GPIO_Init+0x138>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	9301      	str	r3, [sp, #4]
 8000e96:	4b51      	ldr	r3, [pc, #324]	; (8000fdc <HAL_GPIO_Init+0x1b0>)
 8000e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e9e:	645a      	str	r2, [r3, #68]	; 0x44
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea6:	9301      	str	r3, [sp, #4]
 8000ea8:	9b01      	ldr	r3, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eaa:	08a3      	lsrs	r3, r4, #2
 8000eac:	1c9e      	adds	r6, r3, #2
 8000eae:	4a4c      	ldr	r2, [pc, #304]	; (8000fe0 <HAL_GPIO_Init+0x1b4>)
 8000eb0:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eb4:	f004 0603 	and.w	r6, r4, #3
 8000eb8:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8000ebc:	260f      	movs	r6, #15
 8000ebe:	fa06 f60e 	lsl.w	r6, r6, lr
 8000ec2:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ec6:	4f47      	ldr	r7, [pc, #284]	; (8000fe4 <HAL_GPIO_Init+0x1b8>)
 8000ec8:	42b8      	cmp	r0, r7
 8000eca:	d079      	beq.n	8000fc0 <HAL_GPIO_Init+0x194>
 8000ecc:	4e46      	ldr	r6, [pc, #280]	; (8000fe8 <HAL_GPIO_Init+0x1bc>)
 8000ece:	42b0      	cmp	r0, r6
 8000ed0:	d078      	beq.n	8000fc4 <HAL_GPIO_Init+0x198>
 8000ed2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000ed6:	42b0      	cmp	r0, r6
 8000ed8:	d076      	beq.n	8000fc8 <HAL_GPIO_Init+0x19c>
 8000eda:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000ede:	42b0      	cmp	r0, r6
 8000ee0:	d074      	beq.n	8000fcc <HAL_GPIO_Init+0x1a0>
 8000ee2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000ee6:	42b0      	cmp	r0, r6
 8000ee8:	d072      	beq.n	8000fd0 <HAL_GPIO_Init+0x1a4>
 8000eea:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000eee:	42b0      	cmp	r0, r6
 8000ef0:	d070      	beq.n	8000fd4 <HAL_GPIO_Init+0x1a8>
 8000ef2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000ef6:	42b0      	cmp	r0, r6
 8000ef8:	d060      	beq.n	8000fbc <HAL_GPIO_Init+0x190>
 8000efa:	2607      	movs	r6, #7
 8000efc:	fa06 f60e 	lsl.w	r6, r6, lr
 8000f00:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f02:	3302      	adds	r3, #2
 8000f04:	4e36      	ldr	r6, [pc, #216]	; (8000fe0 <HAL_GPIO_Init+0x1b4>)
 8000f06:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f0a:	4b38      	ldr	r3, [pc, #224]	; (8000fec <HAL_GPIO_Init+0x1c0>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f0e:	43eb      	mvns	r3, r5
 8000f10:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f14:	684f      	ldr	r7, [r1, #4]
 8000f16:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000f1a:	d001      	beq.n	8000f20 <HAL_GPIO_Init+0xf4>
        {
          temp |= iocurrent;
 8000f1c:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 8000f20:	4a32      	ldr	r2, [pc, #200]	; (8000fec <HAL_GPIO_Init+0x1c0>)
 8000f22:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000f24:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000f26:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f2a:	684f      	ldr	r7, [r1, #4]
 8000f2c:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000f30:	d001      	beq.n	8000f36 <HAL_GPIO_Init+0x10a>
        {
          temp |= iocurrent;
 8000f32:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 8000f36:	4a2d      	ldr	r2, [pc, #180]	; (8000fec <HAL_GPIO_Init+0x1c0>)
 8000f38:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f3a:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000f3c:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f40:	684f      	ldr	r7, [r1, #4]
 8000f42:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000f46:	d001      	beq.n	8000f4c <HAL_GPIO_Init+0x120>
        {
          temp |= iocurrent;
 8000f48:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 8000f4c:	4a27      	ldr	r2, [pc, #156]	; (8000fec <HAL_GPIO_Init+0x1c0>)
 8000f4e:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000f50:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000f52:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f54:	684e      	ldr	r6, [r1, #4]
 8000f56:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000f5a:	d001      	beq.n	8000f60 <HAL_GPIO_Init+0x134>
        {
          temp |= iocurrent;
 8000f5c:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 8000f60:	4a22      	ldr	r2, [pc, #136]	; (8000fec <HAL_GPIO_Init+0x1c0>)
 8000f62:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f64:	3401      	adds	r4, #1
 8000f66:	2c0f      	cmp	r4, #15
 8000f68:	d836      	bhi.n	8000fd8 <HAL_GPIO_Init+0x1ac>
    ioposition = 0x01U << position;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f6e:	680a      	ldr	r2, [r1, #0]
 8000f70:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 8000f74:	42ab      	cmp	r3, r5
 8000f76:	d1f5      	bne.n	8000f64 <HAL_GPIO_Init+0x138>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f78:	684a      	ldr	r2, [r1, #4]
 8000f7a:	2a02      	cmp	r2, #2
 8000f7c:	f43f af5a 	beq.w	8000e34 <HAL_GPIO_Init+0x8>
 8000f80:	2a12      	cmp	r2, #18
 8000f82:	f43f af57 	beq.w	8000e34 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8000f86:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f88:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	fa02 f20e 	lsl.w	r2, r2, lr
 8000f92:	43d2      	mvns	r2, r2
 8000f94:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f96:	684f      	ldr	r7, [r1, #4]
 8000f98:	f007 0703 	and.w	r7, r7, #3
 8000f9c:	fa07 f70e 	lsl.w	r7, r7, lr
 8000fa0:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8000fa2:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fa4:	684e      	ldr	r6, [r1, #4]
 8000fa6:	1e77      	subs	r7, r6, #1
 8000fa8:	2f01      	cmp	r7, #1
 8000faa:	f67f af57 	bls.w	8000e5c <HAL_GPIO_Init+0x30>
 8000fae:	2e11      	cmp	r6, #17
 8000fb0:	f43f af54 	beq.w	8000e5c <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb4:	2e12      	cmp	r6, #18
 8000fb6:	f47f af61 	bne.w	8000e7c <HAL_GPIO_Init+0x50>
 8000fba:	e74f      	b.n	8000e5c <HAL_GPIO_Init+0x30>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fbc:	2606      	movs	r6, #6
 8000fbe:	e79d      	b.n	8000efc <HAL_GPIO_Init+0xd0>
 8000fc0:	2600      	movs	r6, #0
 8000fc2:	e79b      	b.n	8000efc <HAL_GPIO_Init+0xd0>
 8000fc4:	2601      	movs	r6, #1
 8000fc6:	e799      	b.n	8000efc <HAL_GPIO_Init+0xd0>
 8000fc8:	2602      	movs	r6, #2
 8000fca:	e797      	b.n	8000efc <HAL_GPIO_Init+0xd0>
 8000fcc:	2603      	movs	r6, #3
 8000fce:	e795      	b.n	8000efc <HAL_GPIO_Init+0xd0>
 8000fd0:	2604      	movs	r6, #4
 8000fd2:	e793      	b.n	8000efc <HAL_GPIO_Init+0xd0>
 8000fd4:	2605      	movs	r6, #5
 8000fd6:	e791      	b.n	8000efc <HAL_GPIO_Init+0xd0>
      }
    }
  }
}
 8000fd8:	b003      	add	sp, #12
 8000fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40013800 	.word	0x40013800
 8000fe4:	40020000 	.word	0x40020000
 8000fe8:	40020400 	.word	0x40020400
 8000fec:	40013c00 	.word	0x40013c00

08000ff0 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000ff0:	6943      	ldr	r3, [r0, #20]
 8000ff2:	4059      	eors	r1, r3
 8000ff4:	6141      	str	r1, [r0, #20]
 8000ff6:	4770      	bx	lr

08000ff8 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000ff8:	2800      	cmp	r0, #0
 8000ffa:	f000 809d 	beq.w	8001138 <HAL_RCC_ClockConfig+0x140>
{
 8000ffe:	b570      	push	{r4, r5, r6, lr}
 8001000:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001002:	4b4f      	ldr	r3, [pc, #316]	; (8001140 <HAL_RCC_ClockConfig+0x148>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	428b      	cmp	r3, r1
 800100c:	d209      	bcs.n	8001022 <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800100e:	b2cb      	uxtb	r3, r1
 8001010:	4a4b      	ldr	r2, [pc, #300]	; (8001140 <HAL_RCC_ClockConfig+0x148>)
 8001012:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001014:	6813      	ldr	r3, [r2, #0]
 8001016:	f003 030f 	and.w	r3, r3, #15
 800101a:	4299      	cmp	r1, r3
 800101c:	d001      	beq.n	8001022 <HAL_RCC_ClockConfig+0x2a>
    {
      return HAL_ERROR;
 800101e:	2001      	movs	r0, #1
 8001020:	bd70      	pop	{r4, r5, r6, pc}
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001022:	6823      	ldr	r3, [r4, #0]
 8001024:	f013 0f02 	tst.w	r3, #2
 8001028:	d017      	beq.n	800105a <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800102a:	f013 0f04 	tst.w	r3, #4
 800102e:	d004      	beq.n	800103a <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001030:	4a44      	ldr	r2, [pc, #272]	; (8001144 <HAL_RCC_ClockConfig+0x14c>)
 8001032:	6893      	ldr	r3, [r2, #8]
 8001034:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001038:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800103a:	6823      	ldr	r3, [r4, #0]
 800103c:	f013 0f08 	tst.w	r3, #8
 8001040:	d004      	beq.n	800104c <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001042:	4a40      	ldr	r2, [pc, #256]	; (8001144 <HAL_RCC_ClockConfig+0x14c>)
 8001044:	6893      	ldr	r3, [r2, #8]
 8001046:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800104a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800104c:	4a3d      	ldr	r2, [pc, #244]	; (8001144 <HAL_RCC_ClockConfig+0x14c>)
 800104e:	6893      	ldr	r3, [r2, #8]
 8001050:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001054:	68a0      	ldr	r0, [r4, #8]
 8001056:	4303      	orrs	r3, r0
 8001058:	6093      	str	r3, [r2, #8]
 800105a:	460d      	mov	r5, r1
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800105c:	6823      	ldr	r3, [r4, #0]
 800105e:	f013 0f01 	tst.w	r3, #1
 8001062:	d032      	beq.n	80010ca <HAL_RCC_ClockConfig+0xd2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001064:	6863      	ldr	r3, [r4, #4]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d021      	beq.n	80010ae <HAL_RCC_ClockConfig+0xb6>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800106a:	1e9a      	subs	r2, r3, #2
 800106c:	2a01      	cmp	r2, #1
 800106e:	d925      	bls.n	80010bc <HAL_RCC_ClockConfig+0xc4>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001070:	4a34      	ldr	r2, [pc, #208]	; (8001144 <HAL_RCC_ClockConfig+0x14c>)
 8001072:	6812      	ldr	r2, [r2, #0]
 8001074:	f012 0f02 	tst.w	r2, #2
 8001078:	d060      	beq.n	800113c <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800107a:	4932      	ldr	r1, [pc, #200]	; (8001144 <HAL_RCC_ClockConfig+0x14c>)
 800107c:	688a      	ldr	r2, [r1, #8]
 800107e:	f022 0203 	bic.w	r2, r2, #3
 8001082:	4313      	orrs	r3, r2
 8001084:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001086:	f7ff fe29 	bl	8000cdc <HAL_GetTick>
 800108a:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800108c:	4b2d      	ldr	r3, [pc, #180]	; (8001144 <HAL_RCC_ClockConfig+0x14c>)
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f003 030c 	and.w	r3, r3, #12
 8001094:	6862      	ldr	r2, [r4, #4]
 8001096:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800109a:	d016      	beq.n	80010ca <HAL_RCC_ClockConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800109c:	f7ff fe1e 	bl	8000cdc <HAL_GetTick>
 80010a0:	1b80      	subs	r0, r0, r6
 80010a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d9f0      	bls.n	800108c <HAL_RCC_ClockConfig+0x94>
      {
        return HAL_TIMEOUT;
 80010aa:	2003      	movs	r0, #3
 80010ac:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ae:	4a25      	ldr	r2, [pc, #148]	; (8001144 <HAL_RCC_ClockConfig+0x14c>)
 80010b0:	6812      	ldr	r2, [r2, #0]
 80010b2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80010b6:	d1e0      	bne.n	800107a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80010b8:	2001      	movs	r0, #1
 80010ba:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010bc:	4a21      	ldr	r2, [pc, #132]	; (8001144 <HAL_RCC_ClockConfig+0x14c>)
 80010be:	6812      	ldr	r2, [r2, #0]
 80010c0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80010c4:	d1d9      	bne.n	800107a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80010c6:	2001      	movs	r0, #1
 80010c8:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010ca:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <HAL_RCC_ClockConfig+0x148>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 030f 	and.w	r3, r3, #15
 80010d2:	429d      	cmp	r5, r3
 80010d4:	d209      	bcs.n	80010ea <HAL_RCC_ClockConfig+0xf2>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010d6:	b2ea      	uxtb	r2, r5
 80010d8:	4b19      	ldr	r3, [pc, #100]	; (8001140 <HAL_RCC_ClockConfig+0x148>)
 80010da:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	429d      	cmp	r5, r3
 80010e4:	d001      	beq.n	80010ea <HAL_RCC_ClockConfig+0xf2>
    {
      return HAL_ERROR;
 80010e6:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 80010e8:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010ea:	6823      	ldr	r3, [r4, #0]
 80010ec:	f013 0f04 	tst.w	r3, #4
 80010f0:	d006      	beq.n	8001100 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010f2:	4a14      	ldr	r2, [pc, #80]	; (8001144 <HAL_RCC_ClockConfig+0x14c>)
 80010f4:	6893      	ldr	r3, [r2, #8]
 80010f6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80010fa:	68e1      	ldr	r1, [r4, #12]
 80010fc:	430b      	orrs	r3, r1
 80010fe:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001100:	6823      	ldr	r3, [r4, #0]
 8001102:	f013 0f08 	tst.w	r3, #8
 8001106:	d007      	beq.n	8001118 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001108:	4a0e      	ldr	r2, [pc, #56]	; (8001144 <HAL_RCC_ClockConfig+0x14c>)
 800110a:	6893      	ldr	r3, [r2, #8]
 800110c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001110:	6921      	ldr	r1, [r4, #16]
 8001112:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001116:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001118:	f000 fa80 	bl	800161c <HAL_RCC_GetSysClockFreq>
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <HAL_RCC_ClockConfig+0x14c>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001124:	4a08      	ldr	r2, [pc, #32]	; (8001148 <HAL_RCC_ClockConfig+0x150>)
 8001126:	5cd3      	ldrb	r3, [r2, r3]
 8001128:	40d8      	lsrs	r0, r3
 800112a:	4b08      	ldr	r3, [pc, #32]	; (800114c <HAL_RCC_ClockConfig+0x154>)
 800112c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800112e:	200f      	movs	r0, #15
 8001130:	f000 fd9e 	bl	8001c70 <HAL_InitTick>
  return HAL_OK;
 8001134:	2000      	movs	r0, #0
 8001136:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001138:	2001      	movs	r0, #1
 800113a:	4770      	bx	lr
        return HAL_ERROR;
 800113c:	2001      	movs	r0, #1
 800113e:	bd70      	pop	{r4, r5, r6, pc}
 8001140:	40023c00 	.word	0x40023c00
 8001144:	40023800 	.word	0x40023800
 8001148:	08002e80 	.word	0x08002e80
 800114c:	20000000 	.word	0x20000000

08001150 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001150:	4b01      	ldr	r3, [pc, #4]	; (8001158 <HAL_RCC_GetHCLKFreq+0x8>)
 8001152:	6818      	ldr	r0, [r3, #0]
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20000000 	.word	0x20000000

0800115c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800115c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800115e:	f7ff fff7 	bl	8001150 <HAL_RCC_GetHCLKFreq>
 8001162:	4b04      	ldr	r3, [pc, #16]	; (8001174 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800116a:	4a03      	ldr	r2, [pc, #12]	; (8001178 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800116c:	5cd3      	ldrb	r3, [r2, r3]
}
 800116e:	40d8      	lsrs	r0, r3
 8001170:	bd08      	pop	{r3, pc}
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800
 8001178:	08002e90 	.word	0x08002e90

0800117c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800117c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800117e:	f7ff ffe7 	bl	8001150 <HAL_RCC_GetHCLKFreq>
 8001182:	4b04      	ldr	r3, [pc, #16]	; (8001194 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800118a:	4a03      	ldr	r2, [pc, #12]	; (8001198 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800118c:	5cd3      	ldrb	r3, [r2, r3]
}
 800118e:	40d8      	lsrs	r0, r3
 8001190:	bd08      	pop	{r3, pc}
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800
 8001198:	08002e90 	.word	0x08002e90

0800119c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800119c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800119e:	b083      	sub	sp, #12
 80011a0:	4604      	mov	r4, r0

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80011a2:	6803      	ldr	r3, [r0, #0]
 80011a4:	f013 0f01 	tst.w	r3, #1
 80011a8:	d00c      	beq.n	80011c4 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80011aa:	4a97      	ldr	r2, [pc, #604]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80011ac:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80011b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80011b4:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80011b6:	430b      	orrs	r3, r1
 80011b8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80011bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80011be:	b33b      	cbz	r3, 8001210 <HAL_RCCEx_PeriphCLKConfig+0x74>
  uint32_t plli2sused = 0U;
 80011c0:	2700      	movs	r7, #0
 80011c2:	e000      	b.n	80011c6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 80011c4:	2700      	movs	r7, #0
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80011c6:	6823      	ldr	r3, [r4, #0]
 80011c8:	f013 0f02 	tst.w	r3, #2
 80011cc:	d00b      	beq.n	80011e6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80011ce:	4a8e      	ldr	r2, [pc, #568]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80011d0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80011d4:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 80011d8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80011da:	430b      	orrs	r3, r1
 80011dc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80011e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80011e2:	b903      	cbnz	r3, 80011e6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1U;
 80011e4:	2701      	movs	r7, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80011e6:	6823      	ldr	r3, [r4, #0]
 80011e8:	f013 0f04 	tst.w	r3, #4
 80011ec:	d014      	beq.n	8001218 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80011ee:	4a86      	ldr	r2, [pc, #536]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80011f0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80011f4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80011f8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80011fa:	430b      	orrs	r3, r1
 80011fc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001200:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001202:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001206:	d005      	beq.n	8001214 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001208:	2b00      	cmp	r3, #0
 800120a:	d07b      	beq.n	8001304 <HAL_RCCEx_PeriphCLKConfig+0x168>
  uint32_t pllsaiused = 0U;
 800120c:	2500      	movs	r5, #0
 800120e:	e004      	b.n	800121a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      plli2sused = 1U;
 8001210:	2701      	movs	r7, #1
 8001212:	e7d8      	b.n	80011c6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1U;
 8001214:	2701      	movs	r7, #1
 8001216:	e7f7      	b.n	8001208 <HAL_RCCEx_PeriphCLKConfig+0x6c>
  uint32_t pllsaiused = 0U;
 8001218:	2500      	movs	r5, #0
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800121a:	6823      	ldr	r3, [r4, #0]
 800121c:	f013 0f08 	tst.w	r3, #8
 8001220:	d00e      	beq.n	8001240 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001222:	4a79      	ldr	r2, [pc, #484]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001224:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001228:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800122c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800122e:	430b      	orrs	r3, r1
 8001230:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001234:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001236:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800123a:	d065      	beq.n	8001308 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800123c:	b903      	cbnz	r3, 8001240 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      pllsaiused = 1U;
 800123e:	2501      	movs	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001240:	6823      	ldr	r3, [r4, #0]
 8001242:	f013 0f20 	tst.w	r3, #32
 8001246:	d161      	bne.n	800130c <HAL_RCCEx_PeriphCLKConfig+0x170>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001248:	6823      	ldr	r3, [r4, #0]
 800124a:	f013 0f10 	tst.w	r3, #16
 800124e:	d003      	beq.n	8001258 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001250:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 8001254:	4b6d      	ldr	r3, [pc, #436]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8001256:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001258:	6823      	ldr	r3, [r4, #0]
 800125a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800125e:	d008      	beq.n	8001272 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001260:	4a69      	ldr	r2, [pc, #420]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001262:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001266:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800126a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800126c:	430b      	orrs	r3, r1
 800126e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001272:	6823      	ldr	r3, [r4, #0]
 8001274:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001278:	d008      	beq.n	800128c <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800127a:	4a63      	ldr	r2, [pc, #396]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800127c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001280:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001284:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001286:	430b      	orrs	r3, r1
 8001288:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800128c:	6823      	ldr	r3, [r4, #0]
 800128e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001292:	d00d      	beq.n	80012b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001294:	4a5c      	ldr	r2, [pc, #368]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001296:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800129a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800129e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80012a0:	430b      	orrs	r3, r1
 80012a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80012a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80012a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80012ac:	f000 8095 	beq.w	80013da <HAL_RCCEx_PeriphCLKConfig+0x23e>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80012b0:	6823      	ldr	r3, [r4, #0]
 80012b2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80012b6:	d008      	beq.n	80012ca <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80012b8:	4a53      	ldr	r2, [pc, #332]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80012ba:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80012be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012c2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80012c4:	430b      	orrs	r3, r1
 80012c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80012ca:	6823      	ldr	r3, [r4, #0]
 80012cc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80012d0:	d00c      	beq.n	80012ec <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80012d2:	4a4d      	ldr	r2, [pc, #308]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80012d4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80012d8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80012dc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80012de:	430b      	orrs	r3, r1
 80012e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80012e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80012e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012ea:	d078      	beq.n	80013de <HAL_RCCEx_PeriphCLKConfig+0x242>
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80012ec:	2f00      	cmp	r7, #0
 80012ee:	d178      	bne.n	80013e2 <HAL_RCCEx_PeriphCLKConfig+0x246>
 80012f0:	6823      	ldr	r3, [r4, #0]
 80012f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012f6:	d074      	beq.n	80013e2 <HAL_RCCEx_PeriphCLKConfig+0x246>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80012f8:	2d00      	cmp	r5, #0
 80012fa:	f040 8125 	bne.w	8001548 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80012fe:	2000      	movs	r0, #0
}
 8001300:	b003      	add	sp, #12
 8001302:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pllsaiused = 1U;
 8001304:	2501      	movs	r5, #1
 8001306:	e788      	b.n	800121a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      plli2sused = 1U;
 8001308:	2701      	movs	r7, #1
 800130a:	e797      	b.n	800123c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    __HAL_RCC_PWR_CLK_ENABLE();
 800130c:	2300      	movs	r3, #0
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	4b3d      	ldr	r3, [pc, #244]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001312:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001314:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001318:	641a      	str	r2, [r3, #64]	; 0x40
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001324:	4a3a      	ldr	r2, [pc, #232]	; (8001410 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8001326:	6813      	ldr	r3, [r2, #0]
 8001328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800132c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800132e:	f7ff fcd5 	bl	8000cdc <HAL_GetTick>
 8001332:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001334:	4b36      	ldr	r3, [pc, #216]	; (8001410 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f413 7f80 	tst.w	r3, #256	; 0x100
 800133c:	d106      	bne.n	800134c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800133e:	f7ff fccd 	bl	8000cdc <HAL_GetTick>
 8001342:	1b80      	subs	r0, r0, r6
 8001344:	2802      	cmp	r0, #2
 8001346:	d9f5      	bls.n	8001334 <HAL_RCCEx_PeriphCLKConfig+0x198>
        return HAL_TIMEOUT;
 8001348:	2003      	movs	r0, #3
 800134a:	e7d9      	b.n	8001300 <HAL_RCCEx_PeriphCLKConfig+0x164>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800134c:	4b2e      	ldr	r3, [pc, #184]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800134e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001350:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001354:	d012      	beq.n	800137c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8001356:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001358:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800135c:	4293      	cmp	r3, r2
 800135e:	d00d      	beq.n	800137c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001360:	4b29      	ldr	r3, [pc, #164]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001362:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001364:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001368:	492a      	ldr	r1, [pc, #168]	; (8001414 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800136a:	2001      	movs	r0, #1
 800136c:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800136e:	2000      	movs	r0, #0
 8001370:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 8001372:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001376:	f013 0f01 	tst.w	r3, #1
 800137a:	d112      	bne.n	80013a2 <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800137c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800137e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001382:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001386:	d01d      	beq.n	80013c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8001388:	4a1f      	ldr	r2, [pc, #124]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800138a:	6893      	ldr	r3, [r2, #8]
 800138c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001390:	6093      	str	r3, [r2, #8]
 8001392:	491d      	ldr	r1, [pc, #116]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001394:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8001396:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001398:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800139c:	4313      	orrs	r3, r2
 800139e:	670b      	str	r3, [r1, #112]	; 0x70
 80013a0:	e752      	b.n	8001248 <HAL_RCCEx_PeriphCLKConfig+0xac>
        tickstart = HAL_GetTick();
 80013a2:	f7ff fc9b 	bl	8000cdc <HAL_GetTick>
 80013a6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a8:	4b17      	ldr	r3, [pc, #92]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80013aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ac:	f013 0f02 	tst.w	r3, #2
 80013b0:	d1e4      	bne.n	800137c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013b2:	f7ff fc93 	bl	8000cdc <HAL_GetTick>
 80013b6:	1b80      	subs	r0, r0, r6
 80013b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80013bc:	4298      	cmp	r0, r3
 80013be:	d9f3      	bls.n	80013a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
            return HAL_TIMEOUT;
 80013c0:	2003      	movs	r0, #3
 80013c2:	e79d      	b.n	8001300 <HAL_RCCEx_PeriphCLKConfig+0x164>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80013c4:	4910      	ldr	r1, [pc, #64]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80013c6:	688a      	ldr	r2, [r1, #8]
 80013c8:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80013cc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80013d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013d4:	4313      	orrs	r3, r2
 80013d6:	608b      	str	r3, [r1, #8]
 80013d8:	e7db      	b.n	8001392 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      pllsaiused = 1U;
 80013da:	2501      	movs	r5, #1
 80013dc:	e768      	b.n	80012b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      plli2sused = 1U;
 80013de:	2701      	movs	r7, #1
 80013e0:	e784      	b.n	80012ec <HAL_RCCEx_PeriphCLKConfig+0x150>
    __HAL_RCC_PLLI2S_DISABLE();
 80013e2:	2200      	movs	r2, #0
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80013e6:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80013e8:	f7ff fc78 	bl	8000cdc <HAL_GetTick>
 80013ec:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80013f6:	d011      	beq.n	800141c <HAL_RCCEx_PeriphCLKConfig+0x280>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80013f8:	f7ff fc70 	bl	8000cdc <HAL_GetTick>
 80013fc:	1b80      	subs	r0, r0, r6
 80013fe:	2802      	cmp	r0, #2
 8001400:	d9f5      	bls.n	80013ee <HAL_RCCEx_PeriphCLKConfig+0x252>
        return HAL_TIMEOUT;
 8001402:	2003      	movs	r0, #3
 8001404:	e77c      	b.n	8001300 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800
 800140c:	424711e0 	.word	0x424711e0
 8001410:	40007000 	.word	0x40007000
 8001414:	42470e40 	.word	0x42470e40
 8001418:	42470068 	.word	0x42470068
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800141c:	6823      	ldr	r3, [r4, #0]
 800141e:	f013 0f01 	tst.w	r3, #1
 8001422:	d001      	beq.n	8001428 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8001424:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001426:	b122      	cbz	r2, 8001432 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8001428:	f013 0f02 	tst.w	r3, #2
 800142c:	d015      	beq.n	800145a <HAL_RCCEx_PeriphCLKConfig+0x2be>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800142e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001430:	b99b      	cbnz	r3, 800145a <HAL_RCCEx_PeriphCLKConfig+0x2be>
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001432:	4a77      	ldr	r2, [pc, #476]	; (8001610 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001434:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001438:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800143c:	6863      	ldr	r3, [r4, #4]
 800143e:	68a6      	ldr	r6, [r4, #8]
 8001440:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8001444:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8001448:	4303      	orrs	r3, r0
 800144a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800144e:	430b      	orrs	r3, r1
 8001450:	6961      	ldr	r1, [r4, #20]
 8001452:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001456:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800145a:	6823      	ldr	r3, [r4, #0]
 800145c:	f013 0f04 	tst.w	r3, #4
 8001460:	d003      	beq.n	800146a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8001462:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001464:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001468:	d037      	beq.n	80014da <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800146a:	f013 0f08 	tst.w	r3, #8
 800146e:	d003      	beq.n	8001478 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001470:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001472:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001476:	d030      	beq.n	80014da <HAL_RCCEx_PeriphCLKConfig+0x33e>
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001478:	6823      	ldr	r3, [r4, #0]
 800147a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800147e:	d003      	beq.n	8001488 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 8001480:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001482:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001486:	d046      	beq.n	8001516 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001488:	6823      	ldr	r3, [r4, #0]
 800148a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800148e:	d011      	beq.n	80014b4 <HAL_RCCEx_PeriphCLKConfig+0x318>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001490:	6863      	ldr	r3, [r4, #4]
 8001492:	68a2      	ldr	r2, [r4, #8]
 8001494:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001498:	68e2      	ldr	r2, [r4, #12]
 800149a:	0852      	lsrs	r2, r2, #1
 800149c:	3a01      	subs	r2, #1
 800149e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80014a2:	6922      	ldr	r2, [r4, #16]
 80014a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80014a8:	6962      	ldr	r2, [r4, #20]
 80014aa:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80014ae:	4a58      	ldr	r2, [pc, #352]	; (8001610 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80014b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80014b4:	2201      	movs	r2, #1
 80014b6:	4b57      	ldr	r3, [pc, #348]	; (8001614 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 80014b8:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80014ba:	f7ff fc0f 	bl	8000cdc <HAL_GetTick>
 80014be:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80014c0:	4b53      	ldr	r3, [pc, #332]	; (8001610 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80014c8:	f47f af16 	bne.w	80012f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80014cc:	f7ff fc06 	bl	8000cdc <HAL_GetTick>
 80014d0:	1b80      	subs	r0, r0, r6
 80014d2:	2802      	cmp	r0, #2
 80014d4:	d9f4      	bls.n	80014c0 <HAL_RCCEx_PeriphCLKConfig+0x324>
        return HAL_TIMEOUT;
 80014d6:	2003      	movs	r0, #3
 80014d8:	e712      	b.n	8001300 <HAL_RCCEx_PeriphCLKConfig+0x164>
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80014da:	4a4d      	ldr	r2, [pc, #308]	; (8001610 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80014dc:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80014e0:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80014e4:	6863      	ldr	r3, [r4, #4]
 80014e6:	68a6      	ldr	r6, [r4, #8]
 80014e8:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 80014ec:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 80014f0:	4303      	orrs	r3, r0
 80014f2:	6920      	ldr	r0, [r4, #16]
 80014f4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80014f8:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80014fc:	430b      	orrs	r3, r1
 80014fe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001502:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001506:	f023 031f 	bic.w	r3, r3, #31
 800150a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800150c:	3901      	subs	r1, #1
 800150e:	430b      	orrs	r3, r1
 8001510:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001514:	e7b0      	b.n	8001478 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001516:	483e      	ldr	r0, [pc, #248]	; (8001610 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001518:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800151c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001520:	1c5a      	adds	r2, r3, #1
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001522:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001526:	6863      	ldr	r3, [r4, #4]
 8001528:	68a1      	ldr	r1, [r4, #8]
 800152a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800152e:	68e1      	ldr	r1, [r4, #12]
 8001530:	0849      	lsrs	r1, r1, #1
 8001532:	3901      	subs	r1, #1
 8001534:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001538:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800153c:	f006 42e0 	and.w	r2, r6, #1879048192	; 0x70000000
 8001540:	4313      	orrs	r3, r2
 8001542:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 8001546:	e79f      	b.n	8001488 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    __HAL_RCC_PLLSAI_DISABLE();
 8001548:	2200      	movs	r2, #0
 800154a:	4b33      	ldr	r3, [pc, #204]	; (8001618 <HAL_RCCEx_PeriphCLKConfig+0x47c>)
 800154c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800154e:	f7ff fbc5 	bl	8000cdc <HAL_GetTick>
 8001552:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001554:	4b2e      	ldr	r3, [pc, #184]	; (8001610 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800155c:	d006      	beq.n	800156c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800155e:	f7ff fbbd 	bl	8000cdc <HAL_GetTick>
 8001562:	1b40      	subs	r0, r0, r5
 8001564:	2802      	cmp	r0, #2
 8001566:	d9f5      	bls.n	8001554 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
        return HAL_TIMEOUT;
 8001568:	2003      	movs	r0, #3
 800156a:	e6c9      	b.n	8001300 <HAL_RCCEx_PeriphCLKConfig+0x164>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800156c:	6823      	ldr	r3, [r4, #0]
 800156e:	f013 0f04 	tst.w	r3, #4
 8001572:	d001      	beq.n	8001578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8001574:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001576:	b122      	cbz	r2, 8001582 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8001578:	f013 0f08 	tst.w	r3, #8
 800157c:	d01a      	beq.n	80015b4 <HAL_RCCEx_PeriphCLKConfig+0x418>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800157e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001580:	b9c3      	cbnz	r3, 80015b4 <HAL_RCCEx_PeriphCLKConfig+0x418>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001582:	4a23      	ldr	r2, [pc, #140]	; (8001610 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001584:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001588:	69a3      	ldr	r3, [r4, #24]
 800158a:	69e0      	ldr	r0, [r4, #28]
 800158c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001590:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 8001594:	430b      	orrs	r3, r1
 8001596:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001598:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800159c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80015a0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80015a4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80015a8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80015aa:	3901      	subs	r1, #1
 80015ac:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80015b0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80015b4:	6823      	ldr	r3, [r4, #0]
 80015b6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80015ba:	d003      	beq.n	80015c4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80015bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80015be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80015c2:	d011      	beq.n	80015e8 <HAL_RCCEx_PeriphCLKConfig+0x44c>
    __HAL_RCC_PLLSAI_ENABLE();
 80015c4:	2201      	movs	r2, #1
 80015c6:	4b14      	ldr	r3, [pc, #80]	; (8001618 <HAL_RCCEx_PeriphCLKConfig+0x47c>)
 80015c8:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80015ca:	f7ff fb87 	bl	8000cdc <HAL_GetTick>
 80015ce:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80015d0:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80015d8:	d118      	bne.n	800160c <HAL_RCCEx_PeriphCLKConfig+0x470>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80015da:	f7ff fb7f 	bl	8000cdc <HAL_GetTick>
 80015de:	1b00      	subs	r0, r0, r4
 80015e0:	2802      	cmp	r0, #2
 80015e2:	d9f5      	bls.n	80015d0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        return HAL_TIMEOUT;
 80015e4:	2003      	movs	r0, #3
 80015e6:	e68b      	b.n	8001300 <HAL_RCCEx_PeriphCLKConfig+0x164>
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80015e8:	4809      	ldr	r0, [pc, #36]	; (8001610 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80015ea:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80015ee:	69a3      	ldr	r3, [r4, #24]
 80015f0:	69e2      	ldr	r2, [r4, #28]
 80015f2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80015f6:	6a22      	ldr	r2, [r4, #32]
 80015f8:	0852      	lsrs	r2, r2, #1
 80015fa:	3a01      	subs	r2, #1
 80015fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001600:	f001 6270 	and.w	r2, r1, #251658240	; 0xf000000
 8001604:	4313      	orrs	r3, r2
 8001606:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 800160a:	e7db      	b.n	80015c4 <HAL_RCCEx_PeriphCLKConfig+0x428>
  return HAL_OK;
 800160c:	2000      	movs	r0, #0
 800160e:	e677      	b.n	8001300 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8001610:	40023800 	.word	0x40023800
 8001614:	42470068 	.word	0x42470068
 8001618:	42470070 	.word	0x42470070

0800161c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800161c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800161e:	4b44      	ldr	r3, [pc, #272]	; (8001730 <HAL_RCC_GetSysClockFreq+0x114>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 030c 	and.w	r3, r3, #12
 8001626:	2b08      	cmp	r3, #8
 8001628:	d005      	beq.n	8001636 <HAL_RCC_GetSysClockFreq+0x1a>
 800162a:	2b0c      	cmp	r3, #12
 800162c:	d041      	beq.n	80016b2 <HAL_RCC_GetSysClockFreq+0x96>
 800162e:	2b04      	cmp	r3, #4
 8001630:	d07b      	beq.n	800172a <HAL_RCC_GetSysClockFreq+0x10e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001632:	4840      	ldr	r0, [pc, #256]	; (8001734 <HAL_RCC_GetSysClockFreq+0x118>)
 8001634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001636:	4b3e      	ldr	r3, [pc, #248]	; (8001730 <HAL_RCC_GetSysClockFreq+0x114>)
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001644:	d012      	beq.n	800166c <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001646:	4b3a      	ldr	r3, [pc, #232]	; (8001730 <HAL_RCC_GetSysClockFreq+0x114>)
 8001648:	6859      	ldr	r1, [r3, #4]
 800164a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800164e:	2300      	movs	r3, #0
 8001650:	4839      	ldr	r0, [pc, #228]	; (8001738 <HAL_RCC_GetSysClockFreq+0x11c>)
 8001652:	fba1 0100 	umull	r0, r1, r1, r0
 8001656:	f7fe fe2b 	bl	80002b0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800165a:	4b35      	ldr	r3, [pc, #212]	; (8001730 <HAL_RCC_GetSysClockFreq+0x114>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001662:	3301      	adds	r3, #1
 8001664:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001666:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800166a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800166c:	4b30      	ldr	r3, [pc, #192]	; (8001730 <HAL_RCC_GetSysClockFreq+0x114>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001674:	461e      	mov	r6, r3
 8001676:	2700      	movs	r7, #0
 8001678:	015c      	lsls	r4, r3, #5
 800167a:	2500      	movs	r5, #0
 800167c:	1ae4      	subs	r4, r4, r3
 800167e:	eb65 0507 	sbc.w	r5, r5, r7
 8001682:	01a9      	lsls	r1, r5, #6
 8001684:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001688:	01a0      	lsls	r0, r4, #6
 800168a:	1b00      	subs	r0, r0, r4
 800168c:	eb61 0105 	sbc.w	r1, r1, r5
 8001690:	00cb      	lsls	r3, r1, #3
 8001692:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001696:	00c4      	lsls	r4, r0, #3
 8001698:	19a0      	adds	r0, r4, r6
 800169a:	eb43 0107 	adc.w	r1, r3, r7
 800169e:	028b      	lsls	r3, r1, #10
 80016a0:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80016a4:	0284      	lsls	r4, r0, #10
 80016a6:	4620      	mov	r0, r4
 80016a8:	4619      	mov	r1, r3
 80016aa:	2300      	movs	r3, #0
 80016ac:	f7fe fe00 	bl	80002b0 <__aeabi_uldivmod>
 80016b0:	e7d3      	b.n	800165a <HAL_RCC_GetSysClockFreq+0x3e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016b2:	4b1f      	ldr	r3, [pc, #124]	; (8001730 <HAL_RCC_GetSysClockFreq+0x114>)
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80016c0:	d010      	beq.n	80016e4 <HAL_RCC_GetSysClockFreq+0xc8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016c2:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <HAL_RCC_GetSysClockFreq+0x114>)
 80016c4:	6859      	ldr	r1, [r3, #4]
 80016c6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80016ca:	2300      	movs	r3, #0
 80016cc:	481a      	ldr	r0, [pc, #104]	; (8001738 <HAL_RCC_GetSysClockFreq+0x11c>)
 80016ce:	fba1 0100 	umull	r0, r1, r1, r0
 80016d2:	f7fe fded 	bl	80002b0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80016d6:	4b16      	ldr	r3, [pc, #88]	; (8001730 <HAL_RCC_GetSysClockFreq+0x114>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f3c3 7302 	ubfx	r3, r3, #28, #3

      sysclockfreq = pllvco/pllr;
 80016de:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80016e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <HAL_RCC_GetSysClockFreq+0x114>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80016ec:	461e      	mov	r6, r3
 80016ee:	2700      	movs	r7, #0
 80016f0:	015c      	lsls	r4, r3, #5
 80016f2:	2500      	movs	r5, #0
 80016f4:	1ae4      	subs	r4, r4, r3
 80016f6:	eb65 0507 	sbc.w	r5, r5, r7
 80016fa:	01a9      	lsls	r1, r5, #6
 80016fc:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001700:	01a0      	lsls	r0, r4, #6
 8001702:	1b00      	subs	r0, r0, r4
 8001704:	eb61 0105 	sbc.w	r1, r1, r5
 8001708:	00cb      	lsls	r3, r1, #3
 800170a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800170e:	00c4      	lsls	r4, r0, #3
 8001710:	19a0      	adds	r0, r4, r6
 8001712:	eb43 0107 	adc.w	r1, r3, r7
 8001716:	028b      	lsls	r3, r1, #10
 8001718:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 800171c:	0284      	lsls	r4, r0, #10
 800171e:	4620      	mov	r0, r4
 8001720:	4619      	mov	r1, r3
 8001722:	2300      	movs	r3, #0
 8001724:	f7fe fdc4 	bl	80002b0 <__aeabi_uldivmod>
 8001728:	e7d5      	b.n	80016d6 <HAL_RCC_GetSysClockFreq+0xba>
      sysclockfreq = HSE_VALUE;
 800172a:	4803      	ldr	r0, [pc, #12]	; (8001738 <HAL_RCC_GetSysClockFreq+0x11c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800172c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800
 8001734:	00f42400 	.word	0x00f42400
 8001738:	017d7840 	.word	0x017d7840

0800173c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800173c:	b570      	push	{r4, r5, r6, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001742:	6803      	ldr	r3, [r0, #0]
 8001744:	f013 0f01 	tst.w	r3, #1
 8001748:	d041      	beq.n	80017ce <HAL_RCC_OscConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800174a:	4ba6      	ldr	r3, [pc, #664]	; (80019e4 <HAL_RCC_OscConfig+0x2a8>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 030c 	and.w	r3, r3, #12
 8001752:	2b04      	cmp	r3, #4
 8001754:	d032      	beq.n	80017bc <HAL_RCC_OscConfig+0x80>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001756:	4ba3      	ldr	r3, [pc, #652]	; (80019e4 <HAL_RCC_OscConfig+0x2a8>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800175e:	2b08      	cmp	r3, #8
 8001760:	d027      	beq.n	80017b2 <HAL_RCC_OscConfig+0x76>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001762:	4ba0      	ldr	r3, [pc, #640]	; (80019e4 <HAL_RCC_OscConfig+0x2a8>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800176a:	2b0c      	cmp	r3, #12
 800176c:	d059      	beq.n	8001822 <HAL_RCC_OscConfig+0xe6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800176e:	6863      	ldr	r3, [r4, #4]
 8001770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001774:	d05b      	beq.n	800182e <HAL_RCC_OscConfig+0xf2>
 8001776:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800177a:	d05e      	beq.n	800183a <HAL_RCC_OscConfig+0xfe>
 800177c:	4b99      	ldr	r3, [pc, #612]	; (80019e4 <HAL_RCC_OscConfig+0x2a8>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800178c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800178e:	6863      	ldr	r3, [r4, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d05c      	beq.n	800184e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7ff faa2 	bl	8000cdc <HAL_GetTick>
 8001798:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179a:	4b92      	ldr	r3, [pc, #584]	; (80019e4 <HAL_RCC_OscConfig+0x2a8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80017a2:	d114      	bne.n	80017ce <HAL_RCC_OscConfig+0x92>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017a4:	f7ff fa9a 	bl	8000cdc <HAL_GetTick>
 80017a8:	1b40      	subs	r0, r0, r5
 80017aa:	2864      	cmp	r0, #100	; 0x64
 80017ac:	d9f5      	bls.n	800179a <HAL_RCC_OscConfig+0x5e>
          {
            return HAL_TIMEOUT;
 80017ae:	2003      	movs	r0, #3
 80017b0:	e19d      	b.n	8001aee <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017b2:	4b8c      	ldr	r3, [pc, #560]	; (80019e4 <HAL_RCC_OscConfig+0x2a8>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80017ba:	d0d2      	beq.n	8001762 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017bc:	4b89      	ldr	r3, [pc, #548]	; (80019e4 <HAL_RCC_OscConfig+0x2a8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80017c4:	d003      	beq.n	80017ce <HAL_RCC_OscConfig+0x92>
 80017c6:	6863      	ldr	r3, [r4, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 818d 	beq.w	8001ae8 <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ce:	6823      	ldr	r3, [r4, #0]
 80017d0:	f013 0f02 	tst.w	r3, #2
 80017d4:	d067      	beq.n	80018a6 <HAL_RCC_OscConfig+0x16a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80017d6:	4b83      	ldr	r3, [pc, #524]	; (80019e4 <HAL_RCC_OscConfig+0x2a8>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f013 0f0c 	tst.w	r3, #12
 80017de:	d04a      	beq.n	8001876 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017e0:	4b80      	ldr	r3, [pc, #512]	; (80019e4 <HAL_RCC_OscConfig+0x2a8>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80017e8:	2b08      	cmp	r3, #8
 80017ea:	d03f      	beq.n	800186c <HAL_RCC_OscConfig+0x130>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ec:	4b7d      	ldr	r3, [pc, #500]	; (80019e4 <HAL_RCC_OscConfig+0x2a8>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017f4:	2b0c      	cmp	r3, #12
 80017f6:	d048      	beq.n	800188a <HAL_RCC_OscConfig+0x14e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017f8:	68e3      	ldr	r3, [r4, #12]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d074      	beq.n	80018e8 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017fe:	2201      	movs	r2, #1
 8001800:	4b79      	ldr	r3, [pc, #484]	; (80019e8 <HAL_RCC_OscConfig+0x2ac>)
 8001802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001804:	f7ff fa6a 	bl	8000cdc <HAL_GetTick>
 8001808:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180a:	4b76      	ldr	r3, [pc, #472]	; (80019e4 <HAL_RCC_OscConfig+0x2a8>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f013 0f02 	tst.w	r3, #2
 8001812:	d160      	bne.n	80018d6 <HAL_RCC_OscConfig+0x19a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001814:	f7ff fa62 	bl	8000cdc <HAL_GetTick>
 8001818:	1b40      	subs	r0, r0, r5
 800181a:	2802      	cmp	r0, #2
 800181c:	d9f5      	bls.n	800180a <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 800181e:	2003      	movs	r0, #3
 8001820:	e165      	b.n	8001aee <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001822:	4b70      	ldr	r3, [pc, #448]	; (80019e4 <HAL_RCC_OscConfig+0x2a8>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800182a:	d0a0      	beq.n	800176e <HAL_RCC_OscConfig+0x32>
 800182c:	e7c6      	b.n	80017bc <HAL_RCC_OscConfig+0x80>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800182e:	4a6d      	ldr	r2, [pc, #436]	; (80019e4 <HAL_RCC_OscConfig+0x2a8>)
 8001830:	6813      	ldr	r3, [r2, #0]
 8001832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	e7a9      	b.n	800178e <HAL_RCC_OscConfig+0x52>
 800183a:	4b6a      	ldr	r3, [pc, #424]	; (80019e4 <HAL_RCC_OscConfig+0x2a8>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	e79f      	b.n	800178e <HAL_RCC_OscConfig+0x52>
        tickstart = HAL_GetTick();
 800184e:	f7ff fa45 	bl	8000cdc <HAL_GetTick>
 8001852:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001854:	4b63      	ldr	r3, [pc, #396]	; (80019e4 <HAL_RCC_OscConfig+0x2a8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800185c:	d0b7      	beq.n	80017ce <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800185e:	f7ff fa3d 	bl	8000cdc <HAL_GetTick>
 8001862:	1b40      	subs	r0, r0, r5
 8001864:	2864      	cmp	r0, #100	; 0x64
 8001866:	d9f5      	bls.n	8001854 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 8001868:	2003      	movs	r0, #3
 800186a:	e140      	b.n	8001aee <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800186c:	4b5d      	ldr	r3, [pc, #372]	; (80019e4 <HAL_RCC_OscConfig+0x2a8>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001874:	d1ba      	bne.n	80017ec <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001876:	4b5b      	ldr	r3, [pc, #364]	; (80019e4 <HAL_RCC_OscConfig+0x2a8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f013 0f02 	tst.w	r3, #2
 800187e:	d00a      	beq.n	8001896 <HAL_RCC_OscConfig+0x15a>
 8001880:	68e3      	ldr	r3, [r4, #12]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d007      	beq.n	8001896 <HAL_RCC_OscConfig+0x15a>
        return HAL_ERROR;
 8001886:	2001      	movs	r0, #1
 8001888:	e131      	b.n	8001aee <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800188a:	4b56      	ldr	r3, [pc, #344]	; (80019e4 <HAL_RCC_OscConfig+0x2a8>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001892:	d1b1      	bne.n	80017f8 <HAL_RCC_OscConfig+0xbc>
 8001894:	e7ef      	b.n	8001876 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001896:	4a53      	ldr	r2, [pc, #332]	; (80019e4 <HAL_RCC_OscConfig+0x2a8>)
 8001898:	6813      	ldr	r3, [r2, #0]
 800189a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800189e:	6921      	ldr	r1, [r4, #16]
 80018a0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80018a4:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a6:	6823      	ldr	r3, [r4, #0]
 80018a8:	f013 0f08 	tst.w	r3, #8
 80018ac:	d040      	beq.n	8001930 <HAL_RCC_OscConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018ae:	6963      	ldr	r3, [r4, #20]
 80018b0:	b363      	cbz	r3, 800190c <HAL_RCC_OscConfig+0x1d0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018b2:	2201      	movs	r2, #1
 80018b4:	4b4d      	ldr	r3, [pc, #308]	; (80019ec <HAL_RCC_OscConfig+0x2b0>)
 80018b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b8:	f7ff fa10 	bl	8000cdc <HAL_GetTick>
 80018bc:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018be:	4b49      	ldr	r3, [pc, #292]	; (80019e4 <HAL_RCC_OscConfig+0x2a8>)
 80018c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018c2:	f013 0f02 	tst.w	r3, #2
 80018c6:	d133      	bne.n	8001930 <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018c8:	f7ff fa08 	bl	8000cdc <HAL_GetTick>
 80018cc:	1b40      	subs	r0, r0, r5
 80018ce:	2802      	cmp	r0, #2
 80018d0:	d9f5      	bls.n	80018be <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 80018d2:	2003      	movs	r0, #3
 80018d4:	e10b      	b.n	8001aee <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d6:	4a43      	ldr	r2, [pc, #268]	; (80019e4 <HAL_RCC_OscConfig+0x2a8>)
 80018d8:	6813      	ldr	r3, [r2, #0]
 80018da:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80018de:	6921      	ldr	r1, [r4, #16]
 80018e0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	e7de      	b.n	80018a6 <HAL_RCC_OscConfig+0x16a>
        __HAL_RCC_HSI_DISABLE();
 80018e8:	2200      	movs	r2, #0
 80018ea:	4b3f      	ldr	r3, [pc, #252]	; (80019e8 <HAL_RCC_OscConfig+0x2ac>)
 80018ec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018ee:	f7ff f9f5 	bl	8000cdc <HAL_GetTick>
 80018f2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f4:	4b3b      	ldr	r3, [pc, #236]	; (80019e4 <HAL_RCC_OscConfig+0x2a8>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f013 0f02 	tst.w	r3, #2
 80018fc:	d0d3      	beq.n	80018a6 <HAL_RCC_OscConfig+0x16a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018fe:	f7ff f9ed 	bl	8000cdc <HAL_GetTick>
 8001902:	1b40      	subs	r0, r0, r5
 8001904:	2802      	cmp	r0, #2
 8001906:	d9f5      	bls.n	80018f4 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8001908:	2003      	movs	r0, #3
 800190a:	e0f0      	b.n	8001aee <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800190c:	2200      	movs	r2, #0
 800190e:	4b37      	ldr	r3, [pc, #220]	; (80019ec <HAL_RCC_OscConfig+0x2b0>)
 8001910:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001912:	f7ff f9e3 	bl	8000cdc <HAL_GetTick>
 8001916:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001918:	4b32      	ldr	r3, [pc, #200]	; (80019e4 <HAL_RCC_OscConfig+0x2a8>)
 800191a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800191c:	f013 0f02 	tst.w	r3, #2
 8001920:	d006      	beq.n	8001930 <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001922:	f7ff f9db 	bl	8000cdc <HAL_GetTick>
 8001926:	1b40      	subs	r0, r0, r5
 8001928:	2802      	cmp	r0, #2
 800192a:	d9f5      	bls.n	8001918 <HAL_RCC_OscConfig+0x1dc>
        {
          return HAL_TIMEOUT;
 800192c:	2003      	movs	r0, #3
 800192e:	e0de      	b.n	8001aee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001930:	6823      	ldr	r3, [r4, #0]
 8001932:	f013 0f04 	tst.w	r3, #4
 8001936:	d079      	beq.n	8001a2c <HAL_RCC_OscConfig+0x2f0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001938:	4b2a      	ldr	r3, [pc, #168]	; (80019e4 <HAL_RCC_OscConfig+0x2a8>)
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001940:	d133      	bne.n	80019aa <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	9301      	str	r3, [sp, #4]
 8001946:	4b27      	ldr	r3, [pc, #156]	; (80019e4 <HAL_RCC_OscConfig+0x2a8>)
 8001948:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800194a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800194e:	641a      	str	r2, [r3, #64]	; 0x40
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	9301      	str	r3, [sp, #4]
 8001958:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800195a:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195c:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <HAL_RCC_OscConfig+0x2b4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001964:	d023      	beq.n	80019ae <HAL_RCC_OscConfig+0x272>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001966:	68a3      	ldr	r3, [r4, #8]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d034      	beq.n	80019d6 <HAL_RCC_OscConfig+0x29a>
 800196c:	2b05      	cmp	r3, #5
 800196e:	d041      	beq.n	80019f4 <HAL_RCC_OscConfig+0x2b8>
 8001970:	4b1c      	ldr	r3, [pc, #112]	; (80019e4 <HAL_RCC_OscConfig+0x2a8>)
 8001972:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001974:	f022 0201 	bic.w	r2, r2, #1
 8001978:	671a      	str	r2, [r3, #112]	; 0x70
 800197a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800197c:	f022 0204 	bic.w	r2, r2, #4
 8001980:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001982:	68a3      	ldr	r3, [r4, #8]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d03f      	beq.n	8001a08 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001988:	f7ff f9a8 	bl	8000cdc <HAL_GetTick>
 800198c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800198e:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <HAL_RCC_OscConfig+0x2a8>)
 8001990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001992:	f013 0f02 	tst.w	r3, #2
 8001996:	d148      	bne.n	8001a2a <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001998:	f7ff f9a0 	bl	8000cdc <HAL_GetTick>
 800199c:	1b80      	subs	r0, r0, r6
 800199e:	f241 3388 	movw	r3, #5000	; 0x1388
 80019a2:	4298      	cmp	r0, r3
 80019a4:	d9f3      	bls.n	800198e <HAL_RCC_OscConfig+0x252>
        {
          return HAL_TIMEOUT;
 80019a6:	2003      	movs	r0, #3
 80019a8:	e0a1      	b.n	8001aee <HAL_RCC_OscConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 80019aa:	2500      	movs	r5, #0
 80019ac:	e7d6      	b.n	800195c <HAL_RCC_OscConfig+0x220>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ae:	4a10      	ldr	r2, [pc, #64]	; (80019f0 <HAL_RCC_OscConfig+0x2b4>)
 80019b0:	6813      	ldr	r3, [r2, #0]
 80019b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80019b8:	f7ff f990 	bl	8000cdc <HAL_GetTick>
 80019bc:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019be:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <HAL_RCC_OscConfig+0x2b4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80019c6:	d1ce      	bne.n	8001966 <HAL_RCC_OscConfig+0x22a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c8:	f7ff f988 	bl	8000cdc <HAL_GetTick>
 80019cc:	1b80      	subs	r0, r0, r6
 80019ce:	2802      	cmp	r0, #2
 80019d0:	d9f5      	bls.n	80019be <HAL_RCC_OscConfig+0x282>
          return HAL_TIMEOUT;
 80019d2:	2003      	movs	r0, #3
 80019d4:	e08b      	b.n	8001aee <HAL_RCC_OscConfig+0x3b2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d6:	4a03      	ldr	r2, [pc, #12]	; (80019e4 <HAL_RCC_OscConfig+0x2a8>)
 80019d8:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6713      	str	r3, [r2, #112]	; 0x70
 80019e0:	e7cf      	b.n	8001982 <HAL_RCC_OscConfig+0x246>
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800
 80019e8:	42470000 	.word	0x42470000
 80019ec:	42470e80 	.word	0x42470e80
 80019f0:	40007000 	.word	0x40007000
 80019f4:	4b40      	ldr	r3, [pc, #256]	; (8001af8 <HAL_RCC_OscConfig+0x3bc>)
 80019f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80019f8:	f042 0204 	orr.w	r2, r2, #4
 80019fc:	671a      	str	r2, [r3, #112]	; 0x70
 80019fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a00:	f042 0201 	orr.w	r2, r2, #1
 8001a04:	671a      	str	r2, [r3, #112]	; 0x70
 8001a06:	e7bc      	b.n	8001982 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a08:	f7ff f968 	bl	8000cdc <HAL_GetTick>
 8001a0c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a0e:	4b3a      	ldr	r3, [pc, #232]	; (8001af8 <HAL_RCC_OscConfig+0x3bc>)
 8001a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a12:	f013 0f02 	tst.w	r3, #2
 8001a16:	d008      	beq.n	8001a2a <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a18:	f7ff f960 	bl	8000cdc <HAL_GetTick>
 8001a1c:	1b80      	subs	r0, r0, r6
 8001a1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a22:	4298      	cmp	r0, r3
 8001a24:	d9f3      	bls.n	8001a0e <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 8001a26:	2003      	movs	r0, #3
 8001a28:	e061      	b.n	8001aee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a2a:	b9e5      	cbnz	r5, 8001a66 <HAL_RCC_OscConfig+0x32a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a2c:	69a3      	ldr	r3, [r4, #24]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d05c      	beq.n	8001aec <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a32:	4a31      	ldr	r2, [pc, #196]	; (8001af8 <HAL_RCC_OscConfig+0x3bc>)
 8001a34:	6892      	ldr	r2, [r2, #8]
 8001a36:	f002 020c 	and.w	r2, r2, #12
 8001a3a:	2a08      	cmp	r2, #8
 8001a3c:	d059      	beq.n	8001af2 <HAL_RCC_OscConfig+0x3b6>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d017      	beq.n	8001a72 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a42:	2200      	movs	r2, #0
 8001a44:	4b2d      	ldr	r3, [pc, #180]	; (8001afc <HAL_RCC_OscConfig+0x3c0>)
 8001a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a48:	f7ff f948 	bl	8000cdc <HAL_GetTick>
 8001a4c:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a4e:	4b2a      	ldr	r3, [pc, #168]	; (8001af8 <HAL_RCC_OscConfig+0x3bc>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001a56:	d045      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x3a8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a58:	f7ff f940 	bl	8000cdc <HAL_GetTick>
 8001a5c:	1b00      	subs	r0, r0, r4
 8001a5e:	2802      	cmp	r0, #2
 8001a60:	d9f5      	bls.n	8001a4e <HAL_RCC_OscConfig+0x312>
          {
            return HAL_TIMEOUT;
 8001a62:	2003      	movs	r0, #3
 8001a64:	e043      	b.n	8001aee <HAL_RCC_OscConfig+0x3b2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a66:	4a24      	ldr	r2, [pc, #144]	; (8001af8 <HAL_RCC_OscConfig+0x3bc>)
 8001a68:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001a6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a70:	e7dc      	b.n	8001a2c <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_PLL_DISABLE();
 8001a72:	2200      	movs	r2, #0
 8001a74:	4b21      	ldr	r3, [pc, #132]	; (8001afc <HAL_RCC_OscConfig+0x3c0>)
 8001a76:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a78:	f7ff f930 	bl	8000cdc <HAL_GetTick>
 8001a7c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a7e:	4b1e      	ldr	r3, [pc, #120]	; (8001af8 <HAL_RCC_OscConfig+0x3bc>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001a86:	d006      	beq.n	8001a96 <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a88:	f7ff f928 	bl	8000cdc <HAL_GetTick>
 8001a8c:	1b40      	subs	r0, r0, r5
 8001a8e:	2802      	cmp	r0, #2
 8001a90:	d9f5      	bls.n	8001a7e <HAL_RCC_OscConfig+0x342>
            return HAL_TIMEOUT;
 8001a92:	2003      	movs	r0, #3
 8001a94:	e02b      	b.n	8001aee <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a96:	69e3      	ldr	r3, [r4, #28]
 8001a98:	6a22      	ldr	r2, [r4, #32]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a9e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001aa2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001aa4:	0852      	lsrs	r2, r2, #1
 8001aa6:	3a01      	subs	r2, #1
 8001aa8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001aac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001aae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001ab2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001ab4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001ab8:	4a0f      	ldr	r2, [pc, #60]	; (8001af8 <HAL_RCC_OscConfig+0x3bc>)
 8001aba:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001abc:	2201      	movs	r2, #1
 8001abe:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <HAL_RCC_OscConfig+0x3c0>)
 8001ac0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ac2:	f7ff f90b 	bl	8000cdc <HAL_GetTick>
 8001ac6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_RCC_OscConfig+0x3bc>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001ad0:	d106      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad2:	f7ff f903 	bl	8000cdc <HAL_GetTick>
 8001ad6:	1b00      	subs	r0, r0, r4
 8001ad8:	2802      	cmp	r0, #2
 8001ada:	d9f5      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x38c>
            return HAL_TIMEOUT;
 8001adc:	2003      	movs	r0, #3
 8001ade:	e006      	b.n	8001aee <HAL_RCC_OscConfig+0x3b2>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	e004      	b.n	8001aee <HAL_RCC_OscConfig+0x3b2>
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	e002      	b.n	8001aee <HAL_RCC_OscConfig+0x3b2>
        return HAL_ERROR;
 8001ae8:	2001      	movs	r0, #1
 8001aea:	e000      	b.n	8001aee <HAL_RCC_OscConfig+0x3b2>
  return HAL_OK;
 8001aec:	2000      	movs	r0, #0
}
 8001aee:	b002      	add	sp, #8
 8001af0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001af2:	2001      	movs	r0, #1
 8001af4:	e7fb      	b.n	8001aee <HAL_RCC_OscConfig+0x3b2>
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800
 8001afc:	42470060 	.word	0x42470060

08001b00 <HAL_RTC_MspInit>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.  
  * @retval None
  */
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001b00:	4770      	bx	lr

08001b02 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8001b02:	b538      	push	{r3, r4, r5, lr}
 8001b04:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001b06:	6802      	ldr	r2, [r0, #0]
 8001b08:	68d3      	ldr	r3, [r2, #12]
 8001b0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001b0e:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b10:	f7ff f8e4 	bl	8000cdc <HAL_GetTick>
 8001b14:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001b16:	6823      	ldr	r3, [r4, #0]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	f013 0f20 	tst.w	r3, #32
 8001b1e:	d107      	bne.n	8001b30 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001b20:	f7ff f8dc 	bl	8000cdc <HAL_GetTick>
 8001b24:	1b40      	subs	r0, r0, r5
 8001b26:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001b2a:	d9f4      	bls.n	8001b16 <HAL_RTC_WaitForSynchro+0x14>
    {       
      return HAL_TIMEOUT;
 8001b2c:	2003      	movs	r0, #3
    } 
  }

  return HAL_OK;
}
 8001b2e:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8001b30:	2000      	movs	r0, #0
 8001b32:	bd38      	pop	{r3, r4, r5, pc}

08001b34 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001b34:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U; 
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001b36:	6803      	ldr	r3, [r0, #0]
 8001b38:	68da      	ldr	r2, [r3, #12]
 8001b3a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001b3e:	d001      	beq.n	8001b44 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8001b40:	2000      	movs	r0, #0
 8001b42:	bd38      	pop	{r3, r4, r5, pc}
 8001b44:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001b46:	f04f 32ff 	mov.w	r2, #4294967295
 8001b4a:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001b4c:	f7ff f8c6 	bl	8000cdc <HAL_GetTick>
 8001b50:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001b52:	6823      	ldr	r3, [r4, #0]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001b5a:	d107      	bne.n	8001b6c <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001b5c:	f7ff f8be 	bl	8000cdc <HAL_GetTick>
 8001b60:	1b40      	subs	r0, r0, r5
 8001b62:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001b66:	d9f4      	bls.n	8001b52 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8001b68:	2003      	movs	r0, #3
}
 8001b6a:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;  
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	bd38      	pop	{r3, r4, r5, pc}

08001b70 <HAL_RTC_Init>:
{
 8001b70:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8001b72:	2800      	cmp	r0, #0
 8001b74:	d05c      	beq.n	8001c30 <HAL_RTC_Init+0xc0>
 8001b76:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001b78:	7f43      	ldrb	r3, [r0, #29]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d041      	beq.n	8001c02 <HAL_RTC_Init+0x92>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001b7e:	2302      	movs	r3, #2
 8001b80:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001b82:	6823      	ldr	r3, [r4, #0]
 8001b84:	22ca      	movs	r2, #202	; 0xca
 8001b86:	625a      	str	r2, [r3, #36]	; 0x24
 8001b88:	6823      	ldr	r3, [r4, #0]
 8001b8a:	2253      	movs	r2, #83	; 0x53
 8001b8c:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001b8e:	4620      	mov	r0, r4
 8001b90:	f7ff ffd0 	bl	8001b34 <RTC_EnterInitMode>
 8001b94:	4605      	mov	r5, r0
 8001b96:	2800      	cmp	r0, #0
 8001b98:	d137      	bne.n	8001c0a <HAL_RTC_Init+0x9a>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001b9a:	6822      	ldr	r2, [r4, #0]
 8001b9c:	6893      	ldr	r3, [r2, #8]
 8001b9e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001ba2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ba6:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001ba8:	6821      	ldr	r1, [r4, #0]
 8001baa:	688a      	ldr	r2, [r1, #8]
 8001bac:	6863      	ldr	r3, [r4, #4]
 8001bae:	6920      	ldr	r0, [r4, #16]
 8001bb0:	4303      	orrs	r3, r0
 8001bb2:	6960      	ldr	r0, [r4, #20]
 8001bb4:	4303      	orrs	r3, r0
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001bba:	6823      	ldr	r3, [r4, #0]
 8001bbc:	68e2      	ldr	r2, [r4, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001bc0:	6822      	ldr	r2, [r4, #0]
 8001bc2:	6913      	ldr	r3, [r2, #16]
 8001bc4:	68a1      	ldr	r1, [r4, #8]
 8001bc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001bca:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8001bcc:	6822      	ldr	r2, [r4, #0]
 8001bce:	68d3      	ldr	r3, [r2, #12]
 8001bd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bd4:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001bd6:	6823      	ldr	r3, [r4, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f013 0f20 	tst.w	r3, #32
 8001bde:	d01b      	beq.n	8001c18 <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001be0:	6822      	ldr	r2, [r4, #0]
 8001be2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001be4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001be8:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001bea:	6822      	ldr	r2, [r4, #0]
 8001bec:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001bee:	69a1      	ldr	r1, [r4, #24]
 8001bf0:	430b      	orrs	r3, r1
 8001bf2:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001bf4:	6823      	ldr	r3, [r4, #0]
 8001bf6:	22ff      	movs	r2, #255	; 0xff
 8001bf8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	7763      	strb	r3, [r4, #29]
}
 8001bfe:	4628      	mov	r0, r5
 8001c00:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8001c02:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8001c04:	f7ff ff7c 	bl	8001b00 <HAL_RTC_MspInit>
 8001c08:	e7b9      	b.n	8001b7e <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001c0a:	6823      	ldr	r3, [r4, #0]
 8001c0c:	22ff      	movs	r2, #255	; 0xff
 8001c0e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001c10:	2304      	movs	r3, #4
 8001c12:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8001c14:	2501      	movs	r5, #1
 8001c16:	e7f2      	b.n	8001bfe <HAL_RTC_Init+0x8e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001c18:	4620      	mov	r0, r4
 8001c1a:	f7ff ff72 	bl	8001b02 <HAL_RTC_WaitForSynchro>
 8001c1e:	2800      	cmp	r0, #0
 8001c20:	d0de      	beq.n	8001be0 <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c22:	6823      	ldr	r3, [r4, #0]
 8001c24:	22ff      	movs	r2, #255	; 0xff
 8001c26:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001c28:	2304      	movs	r3, #4
 8001c2a:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8001c2c:	2501      	movs	r5, #1
 8001c2e:	e7e6      	b.n	8001bfe <HAL_RTC_Init+0x8e>
     return HAL_ERROR;
 8001c30:	2501      	movs	r5, #1
 8001c32:	e7e4      	b.n	8001bfe <HAL_RTC_Init+0x8e>

08001c34 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{  
 8001c34:	b510      	push	{r4, lr}
 8001c36:	4604      	mov	r4, r0
  if(__HAL_RTC_WAKEUPTIMER_GET_IT(hrtc, RTC_IT_WUT))
 8001c38:	6803      	ldr	r3, [r0, #0]
 8001c3a:	68da      	ldr	r2, [r3, #12]
 8001c3c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001c40:	d003      	beq.n	8001c4a <HAL_RTCEx_WakeUpTimerIRQHandler+0x16>
  {
    /* Get the status of the Interrupt */
    if((uint32_t)(hrtc->Instance->CR & RTC_IT_WUT) != (uint32_t)RESET)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001c48:	d106      	bne.n	8001c58 <HAL_RTCEx_WakeUpTimerIRQHandler+0x24>
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
    }
  }
  
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8001c4a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001c4e:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <HAL_RTCEx_WakeUpTimerIRQHandler+0x38>)
 8001c50:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY; 
 8001c52:	2301      	movs	r3, #1
 8001c54:	7763      	strb	r3, [r4, #29]
 8001c56:	bd10      	pop	{r4, pc}
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8001c58:	f000 f89c 	bl	8001d94 <HAL_RTCEx_WakeUpTimerEventCallback>
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8001c5c:	6822      	ldr	r2, [r4, #0]
 8001c5e:	68d3      	ldr	r3, [r2, #12]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8001c66:	60d3      	str	r3, [r2, #12]
 8001c68:	e7ef      	b.n	8001c4a <HAL_RTCEx_WakeUpTimerIRQHandler+0x16>
 8001c6a:	bf00      	nop
 8001c6c:	40013c00 	.word	0x40013c00

08001c70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8001c70:	b570      	push	{r4, r5, r6, lr}
 8001c72:	b0a6      	sub	sp, #152	; 0x98
 8001c74:	4605      	mov	r5, r0
  __IO uint32_t counter = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	9325      	str	r3, [sp, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
#elif defined (RTC_CLOCK_SOURCE_HSE)
  /* Configue HSE as RTC clock soucre */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	9218      	str	r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c7e:	931e      	str	r3, [sp, #120]	; 0x78
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c84:	9319      	str	r3, [sp, #100]	; 0x64
  /* Ensure that RTC is clocked by 1MHz */
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_1MHZ;
 8001c86:	4b3b      	ldr	r3, [pc, #236]	; (8001d74 <HAL_InitTick+0x104>)
 8001c88:	9311      	str	r3, [sp, #68]	; 0x44
#else
#error Please select the RTC Clock source
#endif /* RTC_CLOCK_SOURCE_LSE */

  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) == HAL_OK)
 8001c8a:	a818      	add	r0, sp, #96	; 0x60
 8001c8c:	f7ff fd56 	bl	800173c <HAL_RCC_OscConfig>
 8001c90:	b118      	cbz	r0, 8001c9a <HAL_InitTick+0x2a>
      HAL_NVIC_SetPriority(RTC_WKUP_IRQn, TickPriority, 0U);
      HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn); 
      return HAL_OK;
    }
  }
  return HAL_ERROR;
 8001c92:	2401      	movs	r4, #1
}
 8001c94:	4620      	mov	r0, r4
 8001c96:	b026      	add	sp, #152	; 0x98
 8001c98:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c9a:	a826      	add	r0, sp, #152	; 0x98
 8001c9c:	2320      	movs	r3, #32
 8001c9e:	f840 3d94 	str.w	r3, [r0, #-148]!
    if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) == HAL_OK)
 8001ca2:	f7ff fa7b 	bl	800119c <HAL_RCCEx_PeriphCLKConfig>
 8001ca6:	4604      	mov	r4, r0
 8001ca8:	b108      	cbz	r0, 8001cae <HAL_InitTick+0x3e>
  return HAL_ERROR;
 8001caa:	2401      	movs	r4, #1
 8001cac:	e7f2      	b.n	8001c94 <HAL_InitTick+0x24>
      __HAL_RCC_RTC_ENABLE();
 8001cae:	2201      	movs	r2, #1
 8001cb0:	4b31      	ldr	r3, [pc, #196]	; (8001d78 <HAL_InitTick+0x108>)
 8001cb2:	601a      	str	r2, [r3, #0]
      hRTC_Handle.Instance = RTC;
 8001cb4:	4e31      	ldr	r6, [pc, #196]	; (8001d7c <HAL_InitTick+0x10c>)
 8001cb6:	4b32      	ldr	r3, [pc, #200]	; (8001d80 <HAL_InitTick+0x110>)
 8001cb8:	6033      	str	r3, [r6, #0]
      hRTC_Handle.Init.HourFormat = RTC_HOURFORMAT_24;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	6073      	str	r3, [r6, #4]
      hRTC_Handle.Init.AsynchPrediv = RTC_ASYNCH_PREDIV;
 8001cbe:	2263      	movs	r2, #99	; 0x63
 8001cc0:	60b2      	str	r2, [r6, #8]
      hRTC_Handle.Init.SynchPrediv = RTC_SYNCH_PREDIV;
 8001cc2:	2209      	movs	r2, #9
 8001cc4:	60f2      	str	r2, [r6, #12]
      hRTC_Handle.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001cc6:	6133      	str	r3, [r6, #16]
      hRTC_Handle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001cc8:	6173      	str	r3, [r6, #20]
      hRTC_Handle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001cca:	61b3      	str	r3, [r6, #24]
      HAL_RTC_Init(&hRTC_Handle);
 8001ccc:	4630      	mov	r0, r6
 8001cce:	f7ff ff4f 	bl	8001b70 <HAL_RTC_Init>
      __HAL_RTC_WRITEPROTECTION_DISABLE(&hRTC_Handle);
 8001cd2:	6830      	ldr	r0, [r6, #0]
 8001cd4:	23ca      	movs	r3, #202	; 0xca
 8001cd6:	6243      	str	r3, [r0, #36]	; 0x24
 8001cd8:	2353      	movs	r3, #83	; 0x53
 8001cda:	6243      	str	r3, [r0, #36]	; 0x24
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hRTC_Handle);
 8001cdc:	6883      	ldr	r3, [r0, #8]
 8001cde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ce2:	6083      	str	r3, [r0, #8]
      __HAL_RTC_WAKEUPTIMER_DISABLE_IT(&hRTC_Handle,RTC_IT_WUT);
 8001ce4:	6883      	ldr	r3, [r0, #8]
 8001ce6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cea:	6083      	str	r3, [r0, #8]
      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hRTC_Handle, RTC_FLAG_WUTWF) == RESET)
 8001cec:	68c3      	ldr	r3, [r0, #12]
 8001cee:	f013 0f04 	tst.w	r3, #4
 8001cf2:	d10c      	bne.n	8001d0e <HAL_InitTick+0x9e>
        if(counter++ == (SystemCoreClock /48U)) 
 8001cf4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8001cf6:	1c53      	adds	r3, r2, #1
 8001cf8:	9325      	str	r3, [sp, #148]	; 0x94
 8001cfa:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <HAL_InitTick+0x114>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4922      	ldr	r1, [pc, #136]	; (8001d88 <HAL_InitTick+0x118>)
 8001d00:	fba1 1303 	umull	r1, r3, r1, r3
 8001d04:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8001d08:	d1f0      	bne.n	8001cec <HAL_InitTick+0x7c>
          return HAL_ERROR;
 8001d0a:	2401      	movs	r4, #1
 8001d0c:	e7c2      	b.n	8001c94 <HAL_InitTick+0x24>
      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8001d0e:	4a1f      	ldr	r2, [pc, #124]	; (8001d8c <HAL_InitTick+0x11c>)
 8001d10:	6813      	ldr	r3, [r2, #0]
 8001d12:	f043 0304 	orr.w	r3, r3, #4
 8001d16:	6013      	str	r3, [r2, #0]
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hRTC_Handle, RTC_FLAG_WUTF);
 8001d18:	4818      	ldr	r0, [pc, #96]	; (8001d7c <HAL_InitTick+0x10c>)
 8001d1a:	6803      	ldr	r3, [r0, #0]
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001d24:	60da      	str	r2, [r3, #12]
      hRTC_Handle.Instance->WUTR = 0U;
 8001d26:	2200      	movs	r2, #0
 8001d28:	615a      	str	r2, [r3, #20]
      hRTC_Handle.Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8001d2a:	6899      	ldr	r1, [r3, #8]
 8001d2c:	f021 0107 	bic.w	r1, r1, #7
 8001d30:	6099      	str	r1, [r3, #8]
      hRTC_Handle.Instance->CR |= (uint32_t)RTC_WAKEUPCLOCK_CK_SPRE_16BITS;
 8001d32:	6899      	ldr	r1, [r3, #8]
 8001d34:	f041 0104 	orr.w	r1, r1, #4
 8001d38:	6099      	str	r1, [r3, #8]
      __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8001d3a:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <HAL_InitTick+0x120>)
 8001d3c:	6819      	ldr	r1, [r3, #0]
 8001d3e:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8001d42:	6019      	str	r1, [r3, #0]
      __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8001d44:	6899      	ldr	r1, [r3, #8]
 8001d46:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8001d4a:	6099      	str	r1, [r3, #8]
      __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hRTC_Handle,RTC_IT_WUT);
 8001d4c:	6803      	ldr	r3, [r0, #0]
 8001d4e:	6899      	ldr	r1, [r3, #8]
 8001d50:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001d54:	6099      	str	r1, [r3, #8]
      __HAL_RTC_WAKEUPTIMER_ENABLE(&hRTC_Handle);
 8001d56:	6899      	ldr	r1, [r3, #8]
 8001d58:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001d5c:	6099      	str	r1, [r3, #8]
      __HAL_RTC_WRITEPROTECTION_ENABLE(&hRTC_Handle);
 8001d5e:	21ff      	movs	r1, #255	; 0xff
 8001d60:	6259      	str	r1, [r3, #36]	; 0x24
      HAL_NVIC_SetPriority(RTC_WKUP_IRQn, TickPriority, 0U);
 8001d62:	4629      	mov	r1, r5
 8001d64:	2003      	movs	r0, #3
 8001d66:	f7fe ffe5 	bl	8000d34 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn); 
 8001d6a:	2003      	movs	r0, #3
 8001d6c:	f7ff f814 	bl	8000d98 <HAL_NVIC_EnableIRQ>
      return HAL_OK;
 8001d70:	e790      	b.n	8001c94 <HAL_InitTick+0x24>
 8001d72:	bf00      	nop
 8001d74:	00190300 	.word	0x00190300
 8001d78:	42470e3c 	.word	0x42470e3c
 8001d7c:	20000204 	.word	0x20000204
 8001d80:	40002800 	.word	0x40002800
 8001d84:	20000000 	.word	0x20000000
 8001d88:	aaaaaaab 	.word	0xaaaaaaab
 8001d8c:	40007000 	.word	0x40007000
 8001d90:	40013c00 	.word	0x40013c00

08001d94 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  hrtc  RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001d94:	b508      	push	{r3, lr}
  HAL_IncTick();
 8001d96:	f7fe ff95 	bl	8000cc4 <HAL_IncTick>
 8001d9a:	bd08      	pop	{r3, pc}

08001d9c <RTC_WKUP_IRQHandler>:
/**
  * @brief  This function handles  WAKE UP TIMER  interrupt request.
  * @retval None
  */
void RTC_WKUP_IRQHandler(void)
{
 8001d9c:	b508      	push	{r3, lr}
  HAL_RTCEx_WakeUpTimerIRQHandler(&hRTC_Handle);
 8001d9e:	4802      	ldr	r0, [pc, #8]	; (8001da8 <RTC_WKUP_IRQHandler+0xc>)
 8001da0:	f7ff ff48 	bl	8001c34 <HAL_RTCEx_WakeUpTimerIRQHandler>
 8001da4:	bd08      	pop	{r3, pc}
 8001da6:	bf00      	nop
 8001da8:	20000204 	.word	0x20000204

08001dac <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001dac:	6802      	ldr	r2, [r0, #0]
 8001dae:	68d3      	ldr	r3, [r2, #12]
 8001db0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001db4:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001db6:	6802      	ldr	r2, [r0, #0]
 8001db8:	6953      	ldr	r3, [r2, #20]
 8001dba:	f023 0301 	bic.w	r3, r3, #1
 8001dbe:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001dc0:	2320      	movs	r3, #32
 8001dc2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001dc6:	4770      	bx	lr

08001dc8 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001dc8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b21      	cmp	r3, #33	; 0x21
 8001dd0:	d001      	beq.n	8001dd6 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	4770      	bx	lr
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001dd6:	6883      	ldr	r3, [r0, #8]
 8001dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ddc:	d017      	beq.n	8001e0e <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001dde:	6802      	ldr	r2, [r0, #0]
 8001de0:	6a03      	ldr	r3, [r0, #32]
 8001de2:	1c59      	adds	r1, r3, #1
 8001de4:	6201      	str	r1, [r0, #32]
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	6053      	str	r3, [r2, #4]
    if(--huart->TxXferCount == 0U)
 8001dea:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	3b01      	subs	r3, #1
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	84c3      	strh	r3, [r0, #38]	; 0x26
 8001df4:	b9db      	cbnz	r3, 8001e2e <UART_Transmit_IT+0x66>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001df6:	6802      	ldr	r2, [r0, #0]
 8001df8:	68d3      	ldr	r3, [r2, #12]
 8001dfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dfe:	60d3      	str	r3, [r2, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001e00:	6802      	ldr	r2, [r0, #0]
 8001e02:	68d3      	ldr	r3, [r2, #12]
 8001e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e08:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	4770      	bx	lr
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8001e0e:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001e10:	6802      	ldr	r2, [r0, #0]
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e18:	6053      	str	r3, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001e1a:	6903      	ldr	r3, [r0, #16]
 8001e1c:	b91b      	cbnz	r3, 8001e26 <UART_Transmit_IT+0x5e>
        huart->pTxBuffPtr += 2U;
 8001e1e:	6a03      	ldr	r3, [r0, #32]
 8001e20:	3302      	adds	r3, #2
 8001e22:	6203      	str	r3, [r0, #32]
 8001e24:	e7e1      	b.n	8001dea <UART_Transmit_IT+0x22>
        huart->pTxBuffPtr += 1U;
 8001e26:	6a03      	ldr	r3, [r0, #32]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	6203      	str	r3, [r0, #32]
 8001e2c:	e7dd      	b.n	8001dea <UART_Transmit_IT+0x22>
    return HAL_OK;
 8001e2e:	2000      	movs	r0, #0
  }
}
 8001e30:	4770      	bx	lr
	...

08001e34 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e38:	4604      	mov	r4, r0
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001e3a:	6802      	ldr	r2, [r0, #0]
 8001e3c:	6913      	ldr	r3, [r2, #16]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001e3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001e42:	68c1      	ldr	r1, [r0, #12]
 8001e44:	430b      	orrs	r3, r1
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001e46:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8001e48:	6801      	ldr	r1, [r0, #0]
 8001e4a:	68cb      	ldr	r3, [r1, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001e4c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001e50:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e54:	6882      	ldr	r2, [r0, #8]
 8001e56:	6900      	ldr	r0, [r0, #16]
 8001e58:	4302      	orrs	r2, r0
 8001e5a:	6960      	ldr	r0, [r4, #20]
 8001e5c:	4302      	orrs	r2, r0
 8001e5e:	69e0      	ldr	r0, [r4, #28]
 8001e60:	4302      	orrs	r2, r0
 8001e62:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001e64:	60cb      	str	r3, [r1, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001e66:	6822      	ldr	r2, [r4, #0]
 8001e68:	6953      	ldr	r3, [r2, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001e6e:	69a1      	ldr	r1, [r4, #24]
 8001e70:	430b      	orrs	r3, r1
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001e72:	6153      	str	r3, [r2, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e74:	69e3      	ldr	r3, [r4, #28]
 8001e76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e7a:	d062      	beq.n	8001f42 <UART_SetConfig+0x10e>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e7c:	f8d4 8000 	ldr.w	r8, [r4]
 8001e80:	4bbb      	ldr	r3, [pc, #748]	; (8002170 <UART_SetConfig+0x33c>)
 8001e82:	4598      	cmp	r8, r3
 8001e84:	f000 811b 	beq.w	80020be <UART_SetConfig+0x28a>
 8001e88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e8c:	4598      	cmp	r8, r3
 8001e8e:	f000 8116 	beq.w	80020be <UART_SetConfig+0x28a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001e92:	f7ff f963 	bl	800115c <HAL_RCC_GetPCLK1Freq>
 8001e96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001e9a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001e9e:	6865      	ldr	r5, [r4, #4]
 8001ea0:	00ad      	lsls	r5, r5, #2
 8001ea2:	fbb0 f5f5 	udiv	r5, r0, r5
 8001ea6:	4fb3      	ldr	r7, [pc, #716]	; (8002174 <UART_SetConfig+0x340>)
 8001ea8:	fba7 3505 	umull	r3, r5, r7, r5
 8001eac:	096d      	lsrs	r5, r5, #5
 8001eae:	012e      	lsls	r6, r5, #4
 8001eb0:	f7ff f954 	bl	800115c <HAL_RCC_GetPCLK1Freq>
 8001eb4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001eb8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ebc:	6865      	ldr	r5, [r4, #4]
 8001ebe:	00ad      	lsls	r5, r5, #2
 8001ec0:	fbb0 faf5 	udiv	sl, r0, r5
 8001ec4:	f7ff f94a 	bl	800115c <HAL_RCC_GetPCLK1Freq>
 8001ec8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ecc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ed0:	6865      	ldr	r5, [r4, #4]
 8001ed2:	00ad      	lsls	r5, r5, #2
 8001ed4:	fbb0 f5f5 	udiv	r5, r0, r5
 8001ed8:	fba7 3505 	umull	r3, r5, r7, r5
 8001edc:	096d      	lsrs	r5, r5, #5
 8001ede:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001ee2:	fb09 a515 	mls	r5, r9, r5, sl
 8001ee6:	012d      	lsls	r5, r5, #4
 8001ee8:	3532      	adds	r5, #50	; 0x32
 8001eea:	fba7 3505 	umull	r3, r5, r7, r5
 8001eee:	096d      	lsrs	r5, r5, #5
 8001ef0:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8001ef4:	4435      	add	r5, r6
 8001ef6:	f7ff f931 	bl	800115c <HAL_RCC_GetPCLK1Freq>
 8001efa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001efe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f02:	6866      	ldr	r6, [r4, #4]
 8001f04:	00b6      	lsls	r6, r6, #2
 8001f06:	fbb0 f6f6 	udiv	r6, r0, r6
 8001f0a:	f7ff f927 	bl	800115c <HAL_RCC_GetPCLK1Freq>
 8001f0e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f16:	6863      	ldr	r3, [r4, #4]
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f1e:	fba7 3000 	umull	r3, r0, r7, r0
 8001f22:	0940      	lsrs	r0, r0, #5
 8001f24:	fb09 6910 	mls	r9, r9, r0, r6
 8001f28:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8001f2c:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001f30:	fba7 3709 	umull	r3, r7, r7, r9
 8001f34:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8001f38:	442f      	add	r7, r5
 8001f3a:	f8c8 7008 	str.w	r7, [r8, #8]
 8001f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f42:	f8d4 8000 	ldr.w	r8, [r4]
 8001f46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001f4a:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8001f4e:	4598      	cmp	r8, r3
 8001f50:	d05c      	beq.n	800200c <UART_SetConfig+0x1d8>
 8001f52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f56:	4598      	cmp	r8, r3
 8001f58:	d058      	beq.n	800200c <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001f5a:	f7ff f8ff 	bl	800115c <HAL_RCC_GetPCLK1Freq>
 8001f5e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f62:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f66:	6865      	ldr	r5, [r4, #4]
 8001f68:	006d      	lsls	r5, r5, #1
 8001f6a:	fbb0 f5f5 	udiv	r5, r0, r5
 8001f6e:	4f81      	ldr	r7, [pc, #516]	; (8002174 <UART_SetConfig+0x340>)
 8001f70:	fba7 3505 	umull	r3, r5, r7, r5
 8001f74:	096d      	lsrs	r5, r5, #5
 8001f76:	012e      	lsls	r6, r5, #4
 8001f78:	f7ff f8f0 	bl	800115c <HAL_RCC_GetPCLK1Freq>
 8001f7c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f84:	6865      	ldr	r5, [r4, #4]
 8001f86:	006d      	lsls	r5, r5, #1
 8001f88:	fbb0 faf5 	udiv	sl, r0, r5
 8001f8c:	f7ff f8e6 	bl	800115c <HAL_RCC_GetPCLK1Freq>
 8001f90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f94:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f98:	6865      	ldr	r5, [r4, #4]
 8001f9a:	006d      	lsls	r5, r5, #1
 8001f9c:	fbb0 f5f5 	udiv	r5, r0, r5
 8001fa0:	fba7 3505 	umull	r3, r5, r7, r5
 8001fa4:	096d      	lsrs	r5, r5, #5
 8001fa6:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001faa:	fb09 a515 	mls	r5, r9, r5, sl
 8001fae:	00ed      	lsls	r5, r5, #3
 8001fb0:	3532      	adds	r5, #50	; 0x32
 8001fb2:	fba7 3505 	umull	r3, r5, r7, r5
 8001fb6:	096d      	lsrs	r5, r5, #5
 8001fb8:	006d      	lsls	r5, r5, #1
 8001fba:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8001fbe:	4435      	add	r5, r6
 8001fc0:	f7ff f8cc 	bl	800115c <HAL_RCC_GetPCLK1Freq>
 8001fc4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001fc8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001fcc:	6866      	ldr	r6, [r4, #4]
 8001fce:	0076      	lsls	r6, r6, #1
 8001fd0:	fbb0 f6f6 	udiv	r6, r0, r6
 8001fd4:	f7ff f8c2 	bl	800115c <HAL_RCC_GetPCLK1Freq>
 8001fd8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001fdc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001fe0:	6863      	ldr	r3, [r4, #4]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fe8:	fba7 2303 	umull	r2, r3, r7, r3
 8001fec:	095b      	lsrs	r3, r3, #5
 8001fee:	fb09 6913 	mls	r9, r9, r3, r6
 8001ff2:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8001ff6:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001ffa:	fba7 3709 	umull	r3, r7, r7, r9
 8001ffe:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8002002:	442f      	add	r7, r5
 8002004:	f8c8 7008 	str.w	r7, [r8, #8]
 8002008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800200c:	f7ff f8b6 	bl	800117c <HAL_RCC_GetPCLK2Freq>
 8002010:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002014:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002018:	6865      	ldr	r5, [r4, #4]
 800201a:	006d      	lsls	r5, r5, #1
 800201c:	fbb0 f5f5 	udiv	r5, r0, r5
 8002020:	4f54      	ldr	r7, [pc, #336]	; (8002174 <UART_SetConfig+0x340>)
 8002022:	fba7 3505 	umull	r3, r5, r7, r5
 8002026:	096d      	lsrs	r5, r5, #5
 8002028:	012e      	lsls	r6, r5, #4
 800202a:	f7ff f8a7 	bl	800117c <HAL_RCC_GetPCLK2Freq>
 800202e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002032:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002036:	6865      	ldr	r5, [r4, #4]
 8002038:	006d      	lsls	r5, r5, #1
 800203a:	fbb0 faf5 	udiv	sl, r0, r5
 800203e:	f7ff f89d 	bl	800117c <HAL_RCC_GetPCLK2Freq>
 8002042:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002046:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800204a:	6865      	ldr	r5, [r4, #4]
 800204c:	006d      	lsls	r5, r5, #1
 800204e:	fbb0 f5f5 	udiv	r5, r0, r5
 8002052:	fba7 3505 	umull	r3, r5, r7, r5
 8002056:	096d      	lsrs	r5, r5, #5
 8002058:	f04f 0964 	mov.w	r9, #100	; 0x64
 800205c:	fb09 a515 	mls	r5, r9, r5, sl
 8002060:	00ed      	lsls	r5, r5, #3
 8002062:	3532      	adds	r5, #50	; 0x32
 8002064:	fba7 3505 	umull	r3, r5, r7, r5
 8002068:	096d      	lsrs	r5, r5, #5
 800206a:	006d      	lsls	r5, r5, #1
 800206c:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8002070:	4435      	add	r5, r6
 8002072:	f7ff f883 	bl	800117c <HAL_RCC_GetPCLK2Freq>
 8002076:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800207a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800207e:	6866      	ldr	r6, [r4, #4]
 8002080:	0076      	lsls	r6, r6, #1
 8002082:	fbb0 f6f6 	udiv	r6, r0, r6
 8002086:	f7ff f879 	bl	800117c <HAL_RCC_GetPCLK2Freq>
 800208a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800208e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002092:	6863      	ldr	r3, [r4, #4]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	fbb0 f3f3 	udiv	r3, r0, r3
 800209a:	fba7 2303 	umull	r2, r3, r7, r3
 800209e:	095b      	lsrs	r3, r3, #5
 80020a0:	fb09 6913 	mls	r9, r9, r3, r6
 80020a4:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80020a8:	f109 0932 	add.w	r9, r9, #50	; 0x32
 80020ac:	fba7 3709 	umull	r3, r7, r7, r9
 80020b0:	f3c7 1742 	ubfx	r7, r7, #5, #3
 80020b4:	442f      	add	r7, r5
 80020b6:	f8c8 7008 	str.w	r7, [r8, #8]
 80020ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80020be:	f7ff f85d 	bl	800117c <HAL_RCC_GetPCLK2Freq>
 80020c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80020c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80020ca:	6865      	ldr	r5, [r4, #4]
 80020cc:	00ad      	lsls	r5, r5, #2
 80020ce:	fbb0 f5f5 	udiv	r5, r0, r5
 80020d2:	4f28      	ldr	r7, [pc, #160]	; (8002174 <UART_SetConfig+0x340>)
 80020d4:	fba7 3505 	umull	r3, r5, r7, r5
 80020d8:	096d      	lsrs	r5, r5, #5
 80020da:	012e      	lsls	r6, r5, #4
 80020dc:	f7ff f84e 	bl	800117c <HAL_RCC_GetPCLK2Freq>
 80020e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80020e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80020e8:	6865      	ldr	r5, [r4, #4]
 80020ea:	00ad      	lsls	r5, r5, #2
 80020ec:	fbb0 faf5 	udiv	sl, r0, r5
 80020f0:	f7ff f844 	bl	800117c <HAL_RCC_GetPCLK2Freq>
 80020f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80020f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80020fc:	6865      	ldr	r5, [r4, #4]
 80020fe:	00ad      	lsls	r5, r5, #2
 8002100:	fbb0 f5f5 	udiv	r5, r0, r5
 8002104:	fba7 3505 	umull	r3, r5, r7, r5
 8002108:	096d      	lsrs	r5, r5, #5
 800210a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800210e:	fb09 a515 	mls	r5, r9, r5, sl
 8002112:	012d      	lsls	r5, r5, #4
 8002114:	3532      	adds	r5, #50	; 0x32
 8002116:	fba7 3505 	umull	r3, r5, r7, r5
 800211a:	096d      	lsrs	r5, r5, #5
 800211c:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8002120:	4435      	add	r5, r6
 8002122:	f7ff f82b 	bl	800117c <HAL_RCC_GetPCLK2Freq>
 8002126:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800212a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800212e:	6866      	ldr	r6, [r4, #4]
 8002130:	00b6      	lsls	r6, r6, #2
 8002132:	fbb0 f6f6 	udiv	r6, r0, r6
 8002136:	f7ff f821 	bl	800117c <HAL_RCC_GetPCLK2Freq>
 800213a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800213e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002142:	6863      	ldr	r3, [r4, #4]
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	fbb0 f3f3 	udiv	r3, r0, r3
 800214a:	fba7 2303 	umull	r2, r3, r7, r3
 800214e:	095b      	lsrs	r3, r3, #5
 8002150:	fb09 6913 	mls	r9, r9, r3, r6
 8002154:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8002158:	f109 0932 	add.w	r9, r9, #50	; 0x32
 800215c:	fba7 3709 	umull	r3, r7, r7, r9
 8002160:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8002164:	442f      	add	r7, r5
 8002166:	f8c8 7008 	str.w	r7, [r8, #8]
 800216a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800216e:	bf00      	nop
 8002170:	40011000 	.word	0x40011000
 8002174:	51eb851f 	.word	0x51eb851f

08002178 <UART_WaitOnFlagUntilTimeout>:
{
 8002178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800217c:	4605      	mov	r5, r0
 800217e:	460f      	mov	r7, r1
 8002180:	4616      	mov	r6, r2
 8002182:	4698      	mov	r8, r3
 8002184:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002186:	682b      	ldr	r3, [r5, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	ea37 0303 	bics.w	r3, r7, r3
 800218e:	bf0c      	ite	eq
 8002190:	2301      	moveq	r3, #1
 8002192:	2300      	movne	r3, #0
 8002194:	42b3      	cmp	r3, r6
 8002196:	d11e      	bne.n	80021d6 <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8002198:	f1b4 3fff 	cmp.w	r4, #4294967295
 800219c:	d0f3      	beq.n	8002186 <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800219e:	b12c      	cbz	r4, 80021ac <UART_WaitOnFlagUntilTimeout+0x34>
 80021a0:	f7fe fd9c 	bl	8000cdc <HAL_GetTick>
 80021a4:	eba0 0008 	sub.w	r0, r0, r8
 80021a8:	4284      	cmp	r4, r0
 80021aa:	d2ec      	bcs.n	8002186 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021ac:	682a      	ldr	r2, [r5, #0]
 80021ae:	68d3      	ldr	r3, [r2, #12]
 80021b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80021b4:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021b6:	682a      	ldr	r2, [r5, #0]
 80021b8:	6953      	ldr	r3, [r2, #20]
 80021ba:	f023 0301 	bic.w	r3, r3, #1
 80021be:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80021c0:	2320      	movs	r3, #32
 80021c2:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80021c6:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80021ca:	2300      	movs	r3, #0
 80021cc:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 80021d0:	2003      	movs	r0, #3
 80021d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 80021d6:	2000      	movs	r0, #0
}
 80021d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080021dc <HAL_UART_Init>:
  if(huart == NULL)
 80021dc:	b358      	cbz	r0, 8002236 <HAL_UART_Init+0x5a>
{
 80021de:	b510      	push	{r4, lr}
 80021e0:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 80021e2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80021e6:	b30b      	cbz	r3, 800222c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80021e8:	2324      	movs	r3, #36	; 0x24
 80021ea:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80021ee:	6822      	ldr	r2, [r4, #0]
 80021f0:	68d3      	ldr	r3, [r2, #12]
 80021f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021f6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80021f8:	4620      	mov	r0, r4
 80021fa:	f7ff fe1b 	bl	8001e34 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021fe:	6822      	ldr	r2, [r4, #0]
 8002200:	6913      	ldr	r3, [r2, #16]
 8002202:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002206:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002208:	6822      	ldr	r2, [r4, #0]
 800220a:	6953      	ldr	r3, [r2, #20]
 800220c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002210:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002212:	6822      	ldr	r2, [r4, #0]
 8002214:	68d3      	ldr	r3, [r2, #12]
 8002216:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800221a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800221c:	2000      	movs	r0, #0
 800221e:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002220:	2320      	movs	r3, #32
 8002222:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002226:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800222a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800222c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002230:	f7fe fce0 	bl	8000bf4 <HAL_UART_MspInit>
 8002234:	e7d8      	b.n	80021e8 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002236:	2001      	movs	r0, #1
 8002238:	4770      	bx	lr

0800223a <HAL_UART_MspDeInit>:
{
 800223a:	4770      	bx	lr

0800223c <HAL_UART_DeInit>:
  if(huart == NULL)
 800223c:	b178      	cbz	r0, 800225e <HAL_UART_DeInit+0x22>
{
 800223e:	b510      	push	{r4, lr}
 8002240:	4604      	mov	r4, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8002242:	2324      	movs	r3, #36	; 0x24
 8002244:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_MspDeInit(huart);
 8002248:	f7ff fff7 	bl	800223a <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800224c:	2000      	movs	r0, #0
 800224e:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8002250:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8002254:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
  __HAL_UNLOCK(huart);
 8002258:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 800225c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800225e:	2001      	movs	r0, #1
 8002260:	4770      	bx	lr

08002262 <HAL_UART_Transmit>:
{
 8002262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 800226a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b20      	cmp	r3, #32
 8002272:	d004      	beq.n	800227e <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 8002274:	2302      	movs	r3, #2
}
 8002276:	4618      	mov	r0, r3
 8002278:	b002      	add	sp, #8
 800227a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800227e:	4604      	mov	r4, r0
 8002280:	460d      	mov	r5, r1
 8002282:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0)) 
 8002284:	2900      	cmp	r1, #0
 8002286:	d055      	beq.n	8002334 <HAL_UART_Transmit+0xd2>
 8002288:	2a00      	cmp	r2, #0
 800228a:	d055      	beq.n	8002338 <HAL_UART_Transmit+0xd6>
    __HAL_LOCK(huart);
 800228c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002290:	2b01      	cmp	r3, #1
 8002292:	d101      	bne.n	8002298 <HAL_UART_Transmit+0x36>
 8002294:	2302      	movs	r3, #2
 8002296:	e7ee      	b.n	8002276 <HAL_UART_Transmit+0x14>
 8002298:	2301      	movs	r3, #1
 800229a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800229e:	2300      	movs	r3, #0
 80022a0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022a2:	2321      	movs	r3, #33	; 0x21
 80022a4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80022a8:	f7fe fd18 	bl	8000cdc <HAL_GetTick>
 80022ac:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80022ae:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80022b2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80022b6:	e010      	b.n	80022da <HAL_UART_Transmit+0x78>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022b8:	9600      	str	r6, [sp, #0]
 80022ba:	463b      	mov	r3, r7
 80022bc:	2200      	movs	r2, #0
 80022be:	2180      	movs	r1, #128	; 0x80
 80022c0:	4620      	mov	r0, r4
 80022c2:	f7ff ff59 	bl	8002178 <UART_WaitOnFlagUntilTimeout>
 80022c6:	2800      	cmp	r0, #0
 80022c8:	d138      	bne.n	800233c <HAL_UART_Transmit+0xda>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80022ca:	6822      	ldr	r2, [r4, #0]
 80022cc:	882b      	ldrh	r3, [r5, #0]
 80022ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022d2:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80022d4:	6923      	ldr	r3, [r4, #16]
 80022d6:	b9cb      	cbnz	r3, 800230c <HAL_UART_Transmit+0xaa>
          pData +=2U;
 80022d8:	3502      	adds	r5, #2
    while(huart->TxXferCount > 0U)
 80022da:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80022dc:	b29b      	uxth	r3, r3
 80022de:	b1bb      	cbz	r3, 8002310 <HAL_UART_Transmit+0xae>
      huart->TxXferCount--;
 80022e0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	3b01      	subs	r3, #1
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80022ea:	68a3      	ldr	r3, [r4, #8]
 80022ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022f0:	d0e2      	beq.n	80022b8 <HAL_UART_Transmit+0x56>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022f2:	9600      	str	r6, [sp, #0]
 80022f4:	463b      	mov	r3, r7
 80022f6:	2200      	movs	r2, #0
 80022f8:	2180      	movs	r1, #128	; 0x80
 80022fa:	4620      	mov	r0, r4
 80022fc:	f7ff ff3c 	bl	8002178 <UART_WaitOnFlagUntilTimeout>
 8002300:	b9f0      	cbnz	r0, 8002340 <HAL_UART_Transmit+0xde>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002302:	6823      	ldr	r3, [r4, #0]
 8002304:	782a      	ldrb	r2, [r5, #0]
 8002306:	605a      	str	r2, [r3, #4]
 8002308:	3501      	adds	r5, #1
 800230a:	e7e6      	b.n	80022da <HAL_UART_Transmit+0x78>
          pData +=1U;
 800230c:	3501      	adds	r5, #1
 800230e:	e7e4      	b.n	80022da <HAL_UART_Transmit+0x78>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002310:	9600      	str	r6, [sp, #0]
 8002312:	463b      	mov	r3, r7
 8002314:	2200      	movs	r2, #0
 8002316:	2140      	movs	r1, #64	; 0x40
 8002318:	4620      	mov	r0, r4
 800231a:	f7ff ff2d 	bl	8002178 <UART_WaitOnFlagUntilTimeout>
 800231e:	4603      	mov	r3, r0
 8002320:	b108      	cbz	r0, 8002326 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e7a7      	b.n	8002276 <HAL_UART_Transmit+0x14>
      huart->gState = HAL_UART_STATE_READY;
 8002326:	2220      	movs	r2, #32
 8002328:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800232c:	2200      	movs	r2, #0
 800232e:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8002332:	e7a0      	b.n	8002276 <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e79e      	b.n	8002276 <HAL_UART_Transmit+0x14>
 8002338:	2301      	movs	r3, #1
 800233a:	e79c      	b.n	8002276 <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e79a      	b.n	8002276 <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e798      	b.n	8002276 <HAL_UART_Transmit+0x14>

08002344 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8002344:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b20      	cmp	r3, #32
 800234c:	d001      	beq.n	8002352 <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY; 
 800234e:	2002      	movs	r0, #2
 8002350:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0)) 
 8002352:	b1d1      	cbz	r1, 800238a <HAL_UART_Receive_IT+0x46>
 8002354:	b1da      	cbz	r2, 800238e <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 8002356:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800235a:	2b01      	cmp	r3, #1
 800235c:	d019      	beq.n	8002392 <HAL_UART_Receive_IT+0x4e>
    huart->pRxBuffPtr = pData;
 800235e:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8002360:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002362:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002364:	2300      	movs	r3, #0
 8002366:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002368:	2222      	movs	r2, #34	; 0x22
 800236a:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 800236e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002372:	6801      	ldr	r1, [r0, #0]
 8002374:	694a      	ldr	r2, [r1, #20]
 8002376:	f042 0201 	orr.w	r2, r2, #1
 800237a:	614a      	str	r2, [r1, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800237c:	6801      	ldr	r1, [r0, #0]
 800237e:	68ca      	ldr	r2, [r1, #12]
 8002380:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8002384:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8002386:	4618      	mov	r0, r3
 8002388:	4770      	bx	lr
      return HAL_ERROR;
 800238a:	2001      	movs	r0, #1
 800238c:	4770      	bx	lr
 800238e:	2001      	movs	r0, #1
 8002390:	4770      	bx	lr
    __HAL_LOCK(huart);
 8002392:	2002      	movs	r0, #2
}
 8002394:	4770      	bx	lr

08002396 <HAL_UART_TxCpltCallback>:
{
 8002396:	4770      	bx	lr

08002398 <UART_EndTransmit_IT>:
{
 8002398:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800239a:	6801      	ldr	r1, [r0, #0]
 800239c:	68cb      	ldr	r3, [r1, #12]
 800239e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023a2:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 80023a4:	2320      	movs	r3, #32
 80023a6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80023aa:	f7ff fff4 	bl	8002396 <HAL_UART_TxCpltCallback>
}
 80023ae:	2000      	movs	r0, #0
 80023b0:	bd08      	pop	{r3, pc}

080023b2 <UART_Receive_IT>:
{
 80023b2:	b508      	push	{r3, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80023b4:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b22      	cmp	r3, #34	; 0x22
 80023bc:	d001      	beq.n	80023c2 <UART_Receive_IT+0x10>
    return HAL_BUSY;
 80023be:	2002      	movs	r0, #2
 80023c0:	bd08      	pop	{r3, pc}
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80023c2:	6883      	ldr	r3, [r0, #8]
 80023c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c8:	d00f      	beq.n	80023ea <UART_Receive_IT+0x38>
      if(huart->Init.Parity == UART_PARITY_NONE)
 80023ca:	6903      	ldr	r3, [r0, #16]
 80023cc:	bb0b      	cbnz	r3, 8002412 <UART_Receive_IT+0x60>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80023ce:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	6282      	str	r2, [r0, #40]	; 0x28
 80023d4:	6802      	ldr	r2, [r0, #0]
 80023d6:	6852      	ldr	r2, [r2, #4]
 80023d8:	701a      	strb	r2, [r3, #0]
    if(--huart->RxXferCount == 0U)
 80023da:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80023dc:	b29b      	uxth	r3, r3
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80023e4:	b1f3      	cbz	r3, 8002424 <UART_Receive_IT+0x72>
    return HAL_OK;
 80023e6:	2000      	movs	r0, #0
}
 80023e8:	bd08      	pop	{r3, pc}
      tmp = (uint16_t*) huart->pRxBuffPtr;
 80023ea:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 80023ec:	6903      	ldr	r3, [r0, #16]
 80023ee:	b943      	cbnz	r3, 8002402 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80023f0:	6803      	ldr	r3, [r0, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023f8:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 80023fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80023fc:	3302      	adds	r3, #2
 80023fe:	6283      	str	r3, [r0, #40]	; 0x28
 8002400:	e7eb      	b.n	80023da <UART_Receive_IT+0x28>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002402:	6803      	ldr	r3, [r0, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	b2db      	uxtb	r3, r3
 8002408:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 800240a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800240c:	3301      	adds	r3, #1
 800240e:	6283      	str	r3, [r0, #40]	; 0x28
 8002410:	e7e3      	b.n	80023da <UART_Receive_IT+0x28>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002412:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002414:	1c53      	adds	r3, r2, #1
 8002416:	6283      	str	r3, [r0, #40]	; 0x28
 8002418:	6803      	ldr	r3, [r0, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002420:	7013      	strb	r3, [r2, #0]
 8002422:	e7da      	b.n	80023da <UART_Receive_IT+0x28>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002424:	6802      	ldr	r2, [r0, #0]
 8002426:	68d3      	ldr	r3, [r2, #12]
 8002428:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800242c:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800242e:	6802      	ldr	r2, [r0, #0]
 8002430:	6953      	ldr	r3, [r2, #20]
 8002432:	f023 0301 	bic.w	r3, r3, #1
 8002436:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002438:	2320      	movs	r3, #32
 800243a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800243e:	f7fe fb7b 	bl	8000b38 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8002442:	2000      	movs	r0, #0
 8002444:	bd08      	pop	{r3, pc}
	...

08002448 <HAL_UART_IRQHandler>:
{
 8002448:	b510      	push	{r4, lr}
 800244a:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800244c:	6802      	ldr	r2, [r0, #0]
 800244e:	6813      	ldr	r3, [r2, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002450:	68d1      	ldr	r1, [r2, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002452:	6952      	ldr	r2, [r2, #20]
  if(errorflags == RESET)
 8002454:	f013 000f 	ands.w	r0, r3, #15
 8002458:	d105      	bne.n	8002466 <HAL_UART_IRQHandler+0x1e>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800245a:	f013 0f20 	tst.w	r3, #32
 800245e:	d002      	beq.n	8002466 <HAL_UART_IRQHandler+0x1e>
 8002460:	f011 0f20 	tst.w	r1, #32
 8002464:	d153      	bne.n	800250e <HAL_UART_IRQHandler+0xc6>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002466:	2800      	cmp	r0, #0
 8002468:	d067      	beq.n	800253a <HAL_UART_IRQHandler+0xf2>
 800246a:	f012 0201 	ands.w	r2, r2, #1
 800246e:	d102      	bne.n	8002476 <HAL_UART_IRQHandler+0x2e>
 8002470:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002474:	d061      	beq.n	800253a <HAL_UART_IRQHandler+0xf2>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002476:	f013 0f01 	tst.w	r3, #1
 800247a:	d006      	beq.n	800248a <HAL_UART_IRQHandler+0x42>
 800247c:	f411 7f80 	tst.w	r1, #256	; 0x100
 8002480:	d003      	beq.n	800248a <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002482:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002484:	f040 0001 	orr.w	r0, r0, #1
 8002488:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800248a:	f013 0f04 	tst.w	r3, #4
 800248e:	d004      	beq.n	800249a <HAL_UART_IRQHandler+0x52>
 8002490:	b11a      	cbz	r2, 800249a <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002492:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002494:	f040 0002 	orr.w	r0, r0, #2
 8002498:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800249a:	f013 0f02 	tst.w	r3, #2
 800249e:	d004      	beq.n	80024aa <HAL_UART_IRQHandler+0x62>
 80024a0:	b11a      	cbz	r2, 80024aa <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024a2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80024a4:	f040 0004 	orr.w	r0, r0, #4
 80024a8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024aa:	f013 0f08 	tst.w	r3, #8
 80024ae:	d004      	beq.n	80024ba <HAL_UART_IRQHandler+0x72>
 80024b0:	b11a      	cbz	r2, 80024ba <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024b2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80024b4:	f042 0208 	orr.w	r2, r2, #8
 80024b8:	63e2      	str	r2, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024ba:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80024bc:	2a00      	cmp	r2, #0
 80024be:	d048      	beq.n	8002552 <HAL_UART_IRQHandler+0x10a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024c0:	f013 0f20 	tst.w	r3, #32
 80024c4:	d002      	beq.n	80024cc <HAL_UART_IRQHandler+0x84>
 80024c6:	f011 0f20 	tst.w	r1, #32
 80024ca:	d124      	bne.n	8002516 <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80024cc:	6823      	ldr	r3, [r4, #0]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80024d4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80024d6:	f012 0f08 	tst.w	r2, #8
 80024da:	d100      	bne.n	80024de <HAL_UART_IRQHandler+0x96>
 80024dc:	b33b      	cbz	r3, 800252e <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 80024de:	4620      	mov	r0, r4
 80024e0:	f7ff fc64 	bl	8001dac <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024e4:	6823      	ldr	r3, [r4, #0]
 80024e6:	695a      	ldr	r2, [r3, #20]
 80024e8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80024ec:	d01b      	beq.n	8002526 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024ee:	695a      	ldr	r2, [r3, #20]
 80024f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024f4:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 80024f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80024f8:	b18b      	cbz	r3, 800251e <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024fa:	4a1a      	ldr	r2, [pc, #104]	; (8002564 <HAL_UART_IRQHandler+0x11c>)
 80024fc:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024fe:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002500:	f7fe fc81 	bl	8000e06 <HAL_DMA_Abort_IT>
 8002504:	b328      	cbz	r0, 8002552 <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002506:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002508:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800250a:	4798      	blx	r3
 800250c:	bd10      	pop	{r4, pc}
      UART_Receive_IT(huart);
 800250e:	4620      	mov	r0, r4
 8002510:	f7ff ff4f 	bl	80023b2 <UART_Receive_IT>
      return;
 8002514:	bd10      	pop	{r4, pc}
        UART_Receive_IT(huart);
 8002516:	4620      	mov	r0, r4
 8002518:	f7ff ff4b 	bl	80023b2 <UART_Receive_IT>
 800251c:	e7d6      	b.n	80024cc <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 800251e:	4620      	mov	r0, r4
 8002520:	f7fe fb32 	bl	8000b88 <HAL_UART_ErrorCallback>
 8002524:	bd10      	pop	{r4, pc}
          HAL_UART_ErrorCallback(huart);
 8002526:	4620      	mov	r0, r4
 8002528:	f7fe fb2e 	bl	8000b88 <HAL_UART_ErrorCallback>
 800252c:	bd10      	pop	{r4, pc}
        HAL_UART_ErrorCallback(huart);
 800252e:	4620      	mov	r0, r4
 8002530:	f7fe fb2a 	bl	8000b88 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002534:	2300      	movs	r3, #0
 8002536:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002538:	bd10      	pop	{r4, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800253a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800253e:	d002      	beq.n	8002546 <HAL_UART_IRQHandler+0xfe>
 8002540:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002544:	d106      	bne.n	8002554 <HAL_UART_IRQHandler+0x10c>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002546:	f013 0f40 	tst.w	r3, #64	; 0x40
 800254a:	d002      	beq.n	8002552 <HAL_UART_IRQHandler+0x10a>
 800254c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002550:	d104      	bne.n	800255c <HAL_UART_IRQHandler+0x114>
 8002552:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8002554:	4620      	mov	r0, r4
 8002556:	f7ff fc37 	bl	8001dc8 <UART_Transmit_IT>
    return;
 800255a:	bd10      	pop	{r4, pc}
    UART_EndTransmit_IT(huart);
 800255c:	4620      	mov	r0, r4
 800255e:	f7ff ff1b 	bl	8002398 <UART_EndTransmit_IT>
    return;
 8002562:	e7f6      	b.n	8002552 <HAL_UART_IRQHandler+0x10a>
 8002564:	08002569 	.word	0x08002569

08002568 <UART_DMAAbortOnError>:
{
 8002568:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800256a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8002570:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002572:	f7fe fb09 	bl	8000b88 <HAL_UART_ErrorCallback>
 8002576:	bd08      	pop	{r3, pc}

08002578 <main>:
 *      Author: 이진한
 */
#include "main.h"

int main(void)
{
 8002578:	b508      	push	{r3, lr}

  hwInit();
 800257a:	f7fe fb7b 	bl	8000c74 <hwInit>
  apInit();
 800257e:	f7fe f81f 	bl	80005c0 <apInit>

  apMain();
 8002582:	f7fe f825 	bl	80005d0 <apMain>

}
 8002586:	2000      	movs	r0, #0
 8002588:	bd08      	pop	{r3, pc}
	...

0800258c <_sbrk>:
#endif
	return -1;
}

void * _sbrk(int32_t incr)
{
 800258c:	4603      	mov	r3, r0
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 800258e:	4a06      	ldr	r2, [pc, #24]	; (80025a8 <_sbrk+0x1c>)
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	b122      	cbz	r2, 800259e <_sbrk+0x12>
		heap_end = & end;
	}

	prev_heap_end = heap_end;
 8002594:	4a04      	ldr	r2, [pc, #16]	; (80025a8 <_sbrk+0x1c>)
 8002596:	6810      	ldr	r0, [r2, #0]
	heap_end += incr;
 8002598:	4403      	add	r3, r0
 800259a:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
}
 800259c:	4770      	bx	lr
		heap_end = & end;
 800259e:	4903      	ldr	r1, [pc, #12]	; (80025ac <_sbrk+0x20>)
 80025a0:	4a01      	ldr	r2, [pc, #4]	; (80025a8 <_sbrk+0x1c>)
 80025a2:	6011      	str	r1, [r2, #0]
 80025a4:	e7f6      	b.n	8002594 <_sbrk+0x8>
 80025a6:	bf00      	nop
 80025a8:	20000088 	.word	0x20000088
 80025ac:	20000228 	.word	0x20000228

080025b0 <__libc_init_array>:
 80025b0:	b570      	push	{r4, r5, r6, lr}
 80025b2:	4e0d      	ldr	r6, [pc, #52]	; (80025e8 <__libc_init_array+0x38>)
 80025b4:	4c0d      	ldr	r4, [pc, #52]	; (80025ec <__libc_init_array+0x3c>)
 80025b6:	1ba4      	subs	r4, r4, r6
 80025b8:	10a4      	asrs	r4, r4, #2
 80025ba:	2500      	movs	r5, #0
 80025bc:	42a5      	cmp	r5, r4
 80025be:	d109      	bne.n	80025d4 <__libc_init_array+0x24>
 80025c0:	4e0b      	ldr	r6, [pc, #44]	; (80025f0 <__libc_init_array+0x40>)
 80025c2:	4c0c      	ldr	r4, [pc, #48]	; (80025f4 <__libc_init_array+0x44>)
 80025c4:	f000 fc4a 	bl	8002e5c <_init>
 80025c8:	1ba4      	subs	r4, r4, r6
 80025ca:	10a4      	asrs	r4, r4, #2
 80025cc:	2500      	movs	r5, #0
 80025ce:	42a5      	cmp	r5, r4
 80025d0:	d105      	bne.n	80025de <__libc_init_array+0x2e>
 80025d2:	bd70      	pop	{r4, r5, r6, pc}
 80025d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025d8:	4798      	blx	r3
 80025da:	3501      	adds	r5, #1
 80025dc:	e7ee      	b.n	80025bc <__libc_init_array+0xc>
 80025de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025e2:	4798      	blx	r3
 80025e4:	3501      	adds	r5, #1
 80025e6:	e7f2      	b.n	80025ce <__libc_init_array+0x1e>
 80025e8:	08002ed4 	.word	0x08002ed4
 80025ec:	08002ed4 	.word	0x08002ed4
 80025f0:	08002ed4 	.word	0x08002ed4
 80025f4:	08002ed8 	.word	0x08002ed8

080025f8 <_vsniprintf_r>:
 80025f8:	b530      	push	{r4, r5, lr}
 80025fa:	1e14      	subs	r4, r2, #0
 80025fc:	4605      	mov	r5, r0
 80025fe:	b09b      	sub	sp, #108	; 0x6c
 8002600:	4618      	mov	r0, r3
 8002602:	da05      	bge.n	8002610 <_vsniprintf_r+0x18>
 8002604:	238b      	movs	r3, #139	; 0x8b
 8002606:	602b      	str	r3, [r5, #0]
 8002608:	f04f 30ff 	mov.w	r0, #4294967295
 800260c:	b01b      	add	sp, #108	; 0x6c
 800260e:	bd30      	pop	{r4, r5, pc}
 8002610:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002614:	f8ad 300c 	strh.w	r3, [sp, #12]
 8002618:	bf14      	ite	ne
 800261a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800261e:	4623      	moveq	r3, r4
 8002620:	9302      	str	r3, [sp, #8]
 8002622:	9305      	str	r3, [sp, #20]
 8002624:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002628:	9100      	str	r1, [sp, #0]
 800262a:	9104      	str	r1, [sp, #16]
 800262c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8002630:	4602      	mov	r2, r0
 8002632:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002634:	4669      	mov	r1, sp
 8002636:	4628      	mov	r0, r5
 8002638:	f000 f920 	bl	800287c <_svfiprintf_r>
 800263c:	1c43      	adds	r3, r0, #1
 800263e:	bfbc      	itt	lt
 8002640:	238b      	movlt	r3, #139	; 0x8b
 8002642:	602b      	strlt	r3, [r5, #0]
 8002644:	2c00      	cmp	r4, #0
 8002646:	d0e1      	beq.n	800260c <_vsniprintf_r+0x14>
 8002648:	9b00      	ldr	r3, [sp, #0]
 800264a:	2200      	movs	r2, #0
 800264c:	701a      	strb	r2, [r3, #0]
 800264e:	e7dd      	b.n	800260c <_vsniprintf_r+0x14>

08002650 <vsniprintf>:
 8002650:	b507      	push	{r0, r1, r2, lr}
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	4613      	mov	r3, r2
 8002656:	460a      	mov	r2, r1
 8002658:	4601      	mov	r1, r0
 800265a:	4803      	ldr	r0, [pc, #12]	; (8002668 <vsniprintf+0x18>)
 800265c:	6800      	ldr	r0, [r0, #0]
 800265e:	f7ff ffcb 	bl	80025f8 <_vsniprintf_r>
 8002662:	b003      	add	sp, #12
 8002664:	f85d fb04 	ldr.w	pc, [sp], #4
 8002668:	20000008 	.word	0x20000008

0800266c <_free_r>:
 800266c:	b538      	push	{r3, r4, r5, lr}
 800266e:	4605      	mov	r5, r0
 8002670:	2900      	cmp	r1, #0
 8002672:	d045      	beq.n	8002700 <_free_r+0x94>
 8002674:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002678:	1f0c      	subs	r4, r1, #4
 800267a:	2b00      	cmp	r3, #0
 800267c:	bfb8      	it	lt
 800267e:	18e4      	addlt	r4, r4, r3
 8002680:	f000 fbbb 	bl	8002dfa <__malloc_lock>
 8002684:	4a1f      	ldr	r2, [pc, #124]	; (8002704 <_free_r+0x98>)
 8002686:	6813      	ldr	r3, [r2, #0]
 8002688:	4610      	mov	r0, r2
 800268a:	b933      	cbnz	r3, 800269a <_free_r+0x2e>
 800268c:	6063      	str	r3, [r4, #4]
 800268e:	6014      	str	r4, [r2, #0]
 8002690:	4628      	mov	r0, r5
 8002692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002696:	f000 bbb1 	b.w	8002dfc <__malloc_unlock>
 800269a:	42a3      	cmp	r3, r4
 800269c:	d90c      	bls.n	80026b8 <_free_r+0x4c>
 800269e:	6821      	ldr	r1, [r4, #0]
 80026a0:	1862      	adds	r2, r4, r1
 80026a2:	4293      	cmp	r3, r2
 80026a4:	bf04      	itt	eq
 80026a6:	681a      	ldreq	r2, [r3, #0]
 80026a8:	685b      	ldreq	r3, [r3, #4]
 80026aa:	6063      	str	r3, [r4, #4]
 80026ac:	bf04      	itt	eq
 80026ae:	1852      	addeq	r2, r2, r1
 80026b0:	6022      	streq	r2, [r4, #0]
 80026b2:	6004      	str	r4, [r0, #0]
 80026b4:	e7ec      	b.n	8002690 <_free_r+0x24>
 80026b6:	4613      	mov	r3, r2
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	b10a      	cbz	r2, 80026c0 <_free_r+0x54>
 80026bc:	42a2      	cmp	r2, r4
 80026be:	d9fa      	bls.n	80026b6 <_free_r+0x4a>
 80026c0:	6819      	ldr	r1, [r3, #0]
 80026c2:	1858      	adds	r0, r3, r1
 80026c4:	42a0      	cmp	r0, r4
 80026c6:	d10b      	bne.n	80026e0 <_free_r+0x74>
 80026c8:	6820      	ldr	r0, [r4, #0]
 80026ca:	4401      	add	r1, r0
 80026cc:	1858      	adds	r0, r3, r1
 80026ce:	4282      	cmp	r2, r0
 80026d0:	6019      	str	r1, [r3, #0]
 80026d2:	d1dd      	bne.n	8002690 <_free_r+0x24>
 80026d4:	6810      	ldr	r0, [r2, #0]
 80026d6:	6852      	ldr	r2, [r2, #4]
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	4401      	add	r1, r0
 80026dc:	6019      	str	r1, [r3, #0]
 80026de:	e7d7      	b.n	8002690 <_free_r+0x24>
 80026e0:	d902      	bls.n	80026e8 <_free_r+0x7c>
 80026e2:	230c      	movs	r3, #12
 80026e4:	602b      	str	r3, [r5, #0]
 80026e6:	e7d3      	b.n	8002690 <_free_r+0x24>
 80026e8:	6820      	ldr	r0, [r4, #0]
 80026ea:	1821      	adds	r1, r4, r0
 80026ec:	428a      	cmp	r2, r1
 80026ee:	bf04      	itt	eq
 80026f0:	6811      	ldreq	r1, [r2, #0]
 80026f2:	6852      	ldreq	r2, [r2, #4]
 80026f4:	6062      	str	r2, [r4, #4]
 80026f6:	bf04      	itt	eq
 80026f8:	1809      	addeq	r1, r1, r0
 80026fa:	6021      	streq	r1, [r4, #0]
 80026fc:	605c      	str	r4, [r3, #4]
 80026fe:	e7c7      	b.n	8002690 <_free_r+0x24>
 8002700:	bd38      	pop	{r3, r4, r5, pc}
 8002702:	bf00      	nop
 8002704:	2000008c 	.word	0x2000008c

08002708 <_malloc_r>:
 8002708:	b570      	push	{r4, r5, r6, lr}
 800270a:	1ccd      	adds	r5, r1, #3
 800270c:	f025 0503 	bic.w	r5, r5, #3
 8002710:	3508      	adds	r5, #8
 8002712:	2d0c      	cmp	r5, #12
 8002714:	bf38      	it	cc
 8002716:	250c      	movcc	r5, #12
 8002718:	2d00      	cmp	r5, #0
 800271a:	4606      	mov	r6, r0
 800271c:	db01      	blt.n	8002722 <_malloc_r+0x1a>
 800271e:	42a9      	cmp	r1, r5
 8002720:	d903      	bls.n	800272a <_malloc_r+0x22>
 8002722:	230c      	movs	r3, #12
 8002724:	6033      	str	r3, [r6, #0]
 8002726:	2000      	movs	r0, #0
 8002728:	bd70      	pop	{r4, r5, r6, pc}
 800272a:	f000 fb66 	bl	8002dfa <__malloc_lock>
 800272e:	4a23      	ldr	r2, [pc, #140]	; (80027bc <_malloc_r+0xb4>)
 8002730:	6814      	ldr	r4, [r2, #0]
 8002732:	4621      	mov	r1, r4
 8002734:	b991      	cbnz	r1, 800275c <_malloc_r+0x54>
 8002736:	4c22      	ldr	r4, [pc, #136]	; (80027c0 <_malloc_r+0xb8>)
 8002738:	6823      	ldr	r3, [r4, #0]
 800273a:	b91b      	cbnz	r3, 8002744 <_malloc_r+0x3c>
 800273c:	4630      	mov	r0, r6
 800273e:	f000 fb27 	bl	8002d90 <_sbrk_r>
 8002742:	6020      	str	r0, [r4, #0]
 8002744:	4629      	mov	r1, r5
 8002746:	4630      	mov	r0, r6
 8002748:	f000 fb22 	bl	8002d90 <_sbrk_r>
 800274c:	1c43      	adds	r3, r0, #1
 800274e:	d126      	bne.n	800279e <_malloc_r+0x96>
 8002750:	230c      	movs	r3, #12
 8002752:	6033      	str	r3, [r6, #0]
 8002754:	4630      	mov	r0, r6
 8002756:	f000 fb51 	bl	8002dfc <__malloc_unlock>
 800275a:	e7e4      	b.n	8002726 <_malloc_r+0x1e>
 800275c:	680b      	ldr	r3, [r1, #0]
 800275e:	1b5b      	subs	r3, r3, r5
 8002760:	d41a      	bmi.n	8002798 <_malloc_r+0x90>
 8002762:	2b0b      	cmp	r3, #11
 8002764:	d90f      	bls.n	8002786 <_malloc_r+0x7e>
 8002766:	600b      	str	r3, [r1, #0]
 8002768:	50cd      	str	r5, [r1, r3]
 800276a:	18cc      	adds	r4, r1, r3
 800276c:	4630      	mov	r0, r6
 800276e:	f000 fb45 	bl	8002dfc <__malloc_unlock>
 8002772:	f104 000b 	add.w	r0, r4, #11
 8002776:	1d23      	adds	r3, r4, #4
 8002778:	f020 0007 	bic.w	r0, r0, #7
 800277c:	1ac3      	subs	r3, r0, r3
 800277e:	d01b      	beq.n	80027b8 <_malloc_r+0xb0>
 8002780:	425a      	negs	r2, r3
 8002782:	50e2      	str	r2, [r4, r3]
 8002784:	bd70      	pop	{r4, r5, r6, pc}
 8002786:	428c      	cmp	r4, r1
 8002788:	bf0d      	iteet	eq
 800278a:	6863      	ldreq	r3, [r4, #4]
 800278c:	684b      	ldrne	r3, [r1, #4]
 800278e:	6063      	strne	r3, [r4, #4]
 8002790:	6013      	streq	r3, [r2, #0]
 8002792:	bf18      	it	ne
 8002794:	460c      	movne	r4, r1
 8002796:	e7e9      	b.n	800276c <_malloc_r+0x64>
 8002798:	460c      	mov	r4, r1
 800279a:	6849      	ldr	r1, [r1, #4]
 800279c:	e7ca      	b.n	8002734 <_malloc_r+0x2c>
 800279e:	1cc4      	adds	r4, r0, #3
 80027a0:	f024 0403 	bic.w	r4, r4, #3
 80027a4:	42a0      	cmp	r0, r4
 80027a6:	d005      	beq.n	80027b4 <_malloc_r+0xac>
 80027a8:	1a21      	subs	r1, r4, r0
 80027aa:	4630      	mov	r0, r6
 80027ac:	f000 faf0 	bl	8002d90 <_sbrk_r>
 80027b0:	3001      	adds	r0, #1
 80027b2:	d0cd      	beq.n	8002750 <_malloc_r+0x48>
 80027b4:	6025      	str	r5, [r4, #0]
 80027b6:	e7d9      	b.n	800276c <_malloc_r+0x64>
 80027b8:	bd70      	pop	{r4, r5, r6, pc}
 80027ba:	bf00      	nop
 80027bc:	2000008c 	.word	0x2000008c
 80027c0:	20000090 	.word	0x20000090

080027c4 <__ssputs_r>:
 80027c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027c8:	688e      	ldr	r6, [r1, #8]
 80027ca:	429e      	cmp	r6, r3
 80027cc:	4682      	mov	sl, r0
 80027ce:	460c      	mov	r4, r1
 80027d0:	4691      	mov	r9, r2
 80027d2:	4698      	mov	r8, r3
 80027d4:	d835      	bhi.n	8002842 <__ssputs_r+0x7e>
 80027d6:	898a      	ldrh	r2, [r1, #12]
 80027d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80027dc:	d031      	beq.n	8002842 <__ssputs_r+0x7e>
 80027de:	6825      	ldr	r5, [r4, #0]
 80027e0:	6909      	ldr	r1, [r1, #16]
 80027e2:	1a6f      	subs	r7, r5, r1
 80027e4:	6965      	ldr	r5, [r4, #20]
 80027e6:	2302      	movs	r3, #2
 80027e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80027ec:	fb95 f5f3 	sdiv	r5, r5, r3
 80027f0:	f108 0301 	add.w	r3, r8, #1
 80027f4:	443b      	add	r3, r7
 80027f6:	429d      	cmp	r5, r3
 80027f8:	bf38      	it	cc
 80027fa:	461d      	movcc	r5, r3
 80027fc:	0553      	lsls	r3, r2, #21
 80027fe:	d531      	bpl.n	8002864 <__ssputs_r+0xa0>
 8002800:	4629      	mov	r1, r5
 8002802:	f7ff ff81 	bl	8002708 <_malloc_r>
 8002806:	4606      	mov	r6, r0
 8002808:	b950      	cbnz	r0, 8002820 <__ssputs_r+0x5c>
 800280a:	230c      	movs	r3, #12
 800280c:	f8ca 3000 	str.w	r3, [sl]
 8002810:	89a3      	ldrh	r3, [r4, #12]
 8002812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002816:	81a3      	strh	r3, [r4, #12]
 8002818:	f04f 30ff 	mov.w	r0, #4294967295
 800281c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002820:	463a      	mov	r2, r7
 8002822:	6921      	ldr	r1, [r4, #16]
 8002824:	f000 fac4 	bl	8002db0 <memcpy>
 8002828:	89a3      	ldrh	r3, [r4, #12]
 800282a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800282e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002832:	81a3      	strh	r3, [r4, #12]
 8002834:	6126      	str	r6, [r4, #16]
 8002836:	6165      	str	r5, [r4, #20]
 8002838:	443e      	add	r6, r7
 800283a:	1bed      	subs	r5, r5, r7
 800283c:	6026      	str	r6, [r4, #0]
 800283e:	60a5      	str	r5, [r4, #8]
 8002840:	4646      	mov	r6, r8
 8002842:	4546      	cmp	r6, r8
 8002844:	bf28      	it	cs
 8002846:	4646      	movcs	r6, r8
 8002848:	4632      	mov	r2, r6
 800284a:	4649      	mov	r1, r9
 800284c:	6820      	ldr	r0, [r4, #0]
 800284e:	f000 faba 	bl	8002dc6 <memmove>
 8002852:	68a3      	ldr	r3, [r4, #8]
 8002854:	1b9b      	subs	r3, r3, r6
 8002856:	60a3      	str	r3, [r4, #8]
 8002858:	6823      	ldr	r3, [r4, #0]
 800285a:	441e      	add	r6, r3
 800285c:	6026      	str	r6, [r4, #0]
 800285e:	2000      	movs	r0, #0
 8002860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002864:	462a      	mov	r2, r5
 8002866:	f000 faca 	bl	8002dfe <_realloc_r>
 800286a:	4606      	mov	r6, r0
 800286c:	2800      	cmp	r0, #0
 800286e:	d1e1      	bne.n	8002834 <__ssputs_r+0x70>
 8002870:	6921      	ldr	r1, [r4, #16]
 8002872:	4650      	mov	r0, sl
 8002874:	f7ff fefa 	bl	800266c <_free_r>
 8002878:	e7c7      	b.n	800280a <__ssputs_r+0x46>
	...

0800287c <_svfiprintf_r>:
 800287c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002880:	b09d      	sub	sp, #116	; 0x74
 8002882:	4680      	mov	r8, r0
 8002884:	9303      	str	r3, [sp, #12]
 8002886:	898b      	ldrh	r3, [r1, #12]
 8002888:	061c      	lsls	r4, r3, #24
 800288a:	460d      	mov	r5, r1
 800288c:	4616      	mov	r6, r2
 800288e:	d50f      	bpl.n	80028b0 <_svfiprintf_r+0x34>
 8002890:	690b      	ldr	r3, [r1, #16]
 8002892:	b96b      	cbnz	r3, 80028b0 <_svfiprintf_r+0x34>
 8002894:	2140      	movs	r1, #64	; 0x40
 8002896:	f7ff ff37 	bl	8002708 <_malloc_r>
 800289a:	6028      	str	r0, [r5, #0]
 800289c:	6128      	str	r0, [r5, #16]
 800289e:	b928      	cbnz	r0, 80028ac <_svfiprintf_r+0x30>
 80028a0:	230c      	movs	r3, #12
 80028a2:	f8c8 3000 	str.w	r3, [r8]
 80028a6:	f04f 30ff 	mov.w	r0, #4294967295
 80028aa:	e0c5      	b.n	8002a38 <_svfiprintf_r+0x1bc>
 80028ac:	2340      	movs	r3, #64	; 0x40
 80028ae:	616b      	str	r3, [r5, #20]
 80028b0:	2300      	movs	r3, #0
 80028b2:	9309      	str	r3, [sp, #36]	; 0x24
 80028b4:	2320      	movs	r3, #32
 80028b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80028ba:	2330      	movs	r3, #48	; 0x30
 80028bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80028c0:	f04f 0b01 	mov.w	fp, #1
 80028c4:	4637      	mov	r7, r6
 80028c6:	463c      	mov	r4, r7
 80028c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d13c      	bne.n	800294a <_svfiprintf_r+0xce>
 80028d0:	ebb7 0a06 	subs.w	sl, r7, r6
 80028d4:	d00b      	beq.n	80028ee <_svfiprintf_r+0x72>
 80028d6:	4653      	mov	r3, sl
 80028d8:	4632      	mov	r2, r6
 80028da:	4629      	mov	r1, r5
 80028dc:	4640      	mov	r0, r8
 80028de:	f7ff ff71 	bl	80027c4 <__ssputs_r>
 80028e2:	3001      	adds	r0, #1
 80028e4:	f000 80a3 	beq.w	8002a2e <_svfiprintf_r+0x1b2>
 80028e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028ea:	4453      	add	r3, sl
 80028ec:	9309      	str	r3, [sp, #36]	; 0x24
 80028ee:	783b      	ldrb	r3, [r7, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 809c 	beq.w	8002a2e <_svfiprintf_r+0x1b2>
 80028f6:	2300      	movs	r3, #0
 80028f8:	f04f 32ff 	mov.w	r2, #4294967295
 80028fc:	9304      	str	r3, [sp, #16]
 80028fe:	9307      	str	r3, [sp, #28]
 8002900:	9205      	str	r2, [sp, #20]
 8002902:	9306      	str	r3, [sp, #24]
 8002904:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002908:	931a      	str	r3, [sp, #104]	; 0x68
 800290a:	2205      	movs	r2, #5
 800290c:	7821      	ldrb	r1, [r4, #0]
 800290e:	4850      	ldr	r0, [pc, #320]	; (8002a50 <_svfiprintf_r+0x1d4>)
 8002910:	f7fd fc7e 	bl	8000210 <memchr>
 8002914:	1c67      	adds	r7, r4, #1
 8002916:	9b04      	ldr	r3, [sp, #16]
 8002918:	b9d8      	cbnz	r0, 8002952 <_svfiprintf_r+0xd6>
 800291a:	06d9      	lsls	r1, r3, #27
 800291c:	bf44      	itt	mi
 800291e:	2220      	movmi	r2, #32
 8002920:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002924:	071a      	lsls	r2, r3, #28
 8002926:	bf44      	itt	mi
 8002928:	222b      	movmi	r2, #43	; 0x2b
 800292a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800292e:	7822      	ldrb	r2, [r4, #0]
 8002930:	2a2a      	cmp	r2, #42	; 0x2a
 8002932:	d016      	beq.n	8002962 <_svfiprintf_r+0xe6>
 8002934:	9a07      	ldr	r2, [sp, #28]
 8002936:	2100      	movs	r1, #0
 8002938:	200a      	movs	r0, #10
 800293a:	4627      	mov	r7, r4
 800293c:	3401      	adds	r4, #1
 800293e:	783b      	ldrb	r3, [r7, #0]
 8002940:	3b30      	subs	r3, #48	; 0x30
 8002942:	2b09      	cmp	r3, #9
 8002944:	d951      	bls.n	80029ea <_svfiprintf_r+0x16e>
 8002946:	b1c9      	cbz	r1, 800297c <_svfiprintf_r+0x100>
 8002948:	e011      	b.n	800296e <_svfiprintf_r+0xf2>
 800294a:	2b25      	cmp	r3, #37	; 0x25
 800294c:	d0c0      	beq.n	80028d0 <_svfiprintf_r+0x54>
 800294e:	4627      	mov	r7, r4
 8002950:	e7b9      	b.n	80028c6 <_svfiprintf_r+0x4a>
 8002952:	4a3f      	ldr	r2, [pc, #252]	; (8002a50 <_svfiprintf_r+0x1d4>)
 8002954:	1a80      	subs	r0, r0, r2
 8002956:	fa0b f000 	lsl.w	r0, fp, r0
 800295a:	4318      	orrs	r0, r3
 800295c:	9004      	str	r0, [sp, #16]
 800295e:	463c      	mov	r4, r7
 8002960:	e7d3      	b.n	800290a <_svfiprintf_r+0x8e>
 8002962:	9a03      	ldr	r2, [sp, #12]
 8002964:	1d11      	adds	r1, r2, #4
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	9103      	str	r1, [sp, #12]
 800296a:	2a00      	cmp	r2, #0
 800296c:	db01      	blt.n	8002972 <_svfiprintf_r+0xf6>
 800296e:	9207      	str	r2, [sp, #28]
 8002970:	e004      	b.n	800297c <_svfiprintf_r+0x100>
 8002972:	4252      	negs	r2, r2
 8002974:	f043 0302 	orr.w	r3, r3, #2
 8002978:	9207      	str	r2, [sp, #28]
 800297a:	9304      	str	r3, [sp, #16]
 800297c:	783b      	ldrb	r3, [r7, #0]
 800297e:	2b2e      	cmp	r3, #46	; 0x2e
 8002980:	d10e      	bne.n	80029a0 <_svfiprintf_r+0x124>
 8002982:	787b      	ldrb	r3, [r7, #1]
 8002984:	2b2a      	cmp	r3, #42	; 0x2a
 8002986:	f107 0101 	add.w	r1, r7, #1
 800298a:	d132      	bne.n	80029f2 <_svfiprintf_r+0x176>
 800298c:	9b03      	ldr	r3, [sp, #12]
 800298e:	1d1a      	adds	r2, r3, #4
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	9203      	str	r2, [sp, #12]
 8002994:	2b00      	cmp	r3, #0
 8002996:	bfb8      	it	lt
 8002998:	f04f 33ff 	movlt.w	r3, #4294967295
 800299c:	3702      	adds	r7, #2
 800299e:	9305      	str	r3, [sp, #20]
 80029a0:	4c2c      	ldr	r4, [pc, #176]	; (8002a54 <_svfiprintf_r+0x1d8>)
 80029a2:	7839      	ldrb	r1, [r7, #0]
 80029a4:	2203      	movs	r2, #3
 80029a6:	4620      	mov	r0, r4
 80029a8:	f7fd fc32 	bl	8000210 <memchr>
 80029ac:	b138      	cbz	r0, 80029be <_svfiprintf_r+0x142>
 80029ae:	2340      	movs	r3, #64	; 0x40
 80029b0:	1b00      	subs	r0, r0, r4
 80029b2:	fa03 f000 	lsl.w	r0, r3, r0
 80029b6:	9b04      	ldr	r3, [sp, #16]
 80029b8:	4303      	orrs	r3, r0
 80029ba:	9304      	str	r3, [sp, #16]
 80029bc:	3701      	adds	r7, #1
 80029be:	7839      	ldrb	r1, [r7, #0]
 80029c0:	4825      	ldr	r0, [pc, #148]	; (8002a58 <_svfiprintf_r+0x1dc>)
 80029c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80029c6:	2206      	movs	r2, #6
 80029c8:	1c7e      	adds	r6, r7, #1
 80029ca:	f7fd fc21 	bl	8000210 <memchr>
 80029ce:	2800      	cmp	r0, #0
 80029d0:	d035      	beq.n	8002a3e <_svfiprintf_r+0x1c2>
 80029d2:	4b22      	ldr	r3, [pc, #136]	; (8002a5c <_svfiprintf_r+0x1e0>)
 80029d4:	b9fb      	cbnz	r3, 8002a16 <_svfiprintf_r+0x19a>
 80029d6:	9b03      	ldr	r3, [sp, #12]
 80029d8:	3307      	adds	r3, #7
 80029da:	f023 0307 	bic.w	r3, r3, #7
 80029de:	3308      	adds	r3, #8
 80029e0:	9303      	str	r3, [sp, #12]
 80029e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029e4:	444b      	add	r3, r9
 80029e6:	9309      	str	r3, [sp, #36]	; 0x24
 80029e8:	e76c      	b.n	80028c4 <_svfiprintf_r+0x48>
 80029ea:	fb00 3202 	mla	r2, r0, r2, r3
 80029ee:	2101      	movs	r1, #1
 80029f0:	e7a3      	b.n	800293a <_svfiprintf_r+0xbe>
 80029f2:	2300      	movs	r3, #0
 80029f4:	9305      	str	r3, [sp, #20]
 80029f6:	4618      	mov	r0, r3
 80029f8:	240a      	movs	r4, #10
 80029fa:	460f      	mov	r7, r1
 80029fc:	3101      	adds	r1, #1
 80029fe:	783a      	ldrb	r2, [r7, #0]
 8002a00:	3a30      	subs	r2, #48	; 0x30
 8002a02:	2a09      	cmp	r2, #9
 8002a04:	d903      	bls.n	8002a0e <_svfiprintf_r+0x192>
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0ca      	beq.n	80029a0 <_svfiprintf_r+0x124>
 8002a0a:	9005      	str	r0, [sp, #20]
 8002a0c:	e7c8      	b.n	80029a0 <_svfiprintf_r+0x124>
 8002a0e:	fb04 2000 	mla	r0, r4, r0, r2
 8002a12:	2301      	movs	r3, #1
 8002a14:	e7f1      	b.n	80029fa <_svfiprintf_r+0x17e>
 8002a16:	ab03      	add	r3, sp, #12
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	462a      	mov	r2, r5
 8002a1c:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <_svfiprintf_r+0x1e4>)
 8002a1e:	a904      	add	r1, sp, #16
 8002a20:	4640      	mov	r0, r8
 8002a22:	f3af 8000 	nop.w
 8002a26:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002a2a:	4681      	mov	r9, r0
 8002a2c:	d1d9      	bne.n	80029e2 <_svfiprintf_r+0x166>
 8002a2e:	89ab      	ldrh	r3, [r5, #12]
 8002a30:	065b      	lsls	r3, r3, #25
 8002a32:	f53f af38 	bmi.w	80028a6 <_svfiprintf_r+0x2a>
 8002a36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a38:	b01d      	add	sp, #116	; 0x74
 8002a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a3e:	ab03      	add	r3, sp, #12
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	462a      	mov	r2, r5
 8002a44:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <_svfiprintf_r+0x1e4>)
 8002a46:	a904      	add	r1, sp, #16
 8002a48:	4640      	mov	r0, r8
 8002a4a:	f000 f881 	bl	8002b50 <_printf_i>
 8002a4e:	e7ea      	b.n	8002a26 <_svfiprintf_r+0x1aa>
 8002a50:	08002e98 	.word	0x08002e98
 8002a54:	08002e9e 	.word	0x08002e9e
 8002a58:	08002ea2 	.word	0x08002ea2
 8002a5c:	00000000 	.word	0x00000000
 8002a60:	080027c5 	.word	0x080027c5

08002a64 <_printf_common>:
 8002a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a68:	4691      	mov	r9, r2
 8002a6a:	461f      	mov	r7, r3
 8002a6c:	688a      	ldr	r2, [r1, #8]
 8002a6e:	690b      	ldr	r3, [r1, #16]
 8002a70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a74:	4293      	cmp	r3, r2
 8002a76:	bfb8      	it	lt
 8002a78:	4613      	movlt	r3, r2
 8002a7a:	f8c9 3000 	str.w	r3, [r9]
 8002a7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a82:	4606      	mov	r6, r0
 8002a84:	460c      	mov	r4, r1
 8002a86:	b112      	cbz	r2, 8002a8e <_printf_common+0x2a>
 8002a88:	3301      	adds	r3, #1
 8002a8a:	f8c9 3000 	str.w	r3, [r9]
 8002a8e:	6823      	ldr	r3, [r4, #0]
 8002a90:	0699      	lsls	r1, r3, #26
 8002a92:	bf42      	ittt	mi
 8002a94:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002a98:	3302      	addmi	r3, #2
 8002a9a:	f8c9 3000 	strmi.w	r3, [r9]
 8002a9e:	6825      	ldr	r5, [r4, #0]
 8002aa0:	f015 0506 	ands.w	r5, r5, #6
 8002aa4:	d107      	bne.n	8002ab6 <_printf_common+0x52>
 8002aa6:	f104 0a19 	add.w	sl, r4, #25
 8002aaa:	68e3      	ldr	r3, [r4, #12]
 8002aac:	f8d9 2000 	ldr.w	r2, [r9]
 8002ab0:	1a9b      	subs	r3, r3, r2
 8002ab2:	429d      	cmp	r5, r3
 8002ab4:	db29      	blt.n	8002b0a <_printf_common+0xa6>
 8002ab6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002aba:	6822      	ldr	r2, [r4, #0]
 8002abc:	3300      	adds	r3, #0
 8002abe:	bf18      	it	ne
 8002ac0:	2301      	movne	r3, #1
 8002ac2:	0692      	lsls	r2, r2, #26
 8002ac4:	d42e      	bmi.n	8002b24 <_printf_common+0xc0>
 8002ac6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002aca:	4639      	mov	r1, r7
 8002acc:	4630      	mov	r0, r6
 8002ace:	47c0      	blx	r8
 8002ad0:	3001      	adds	r0, #1
 8002ad2:	d021      	beq.n	8002b18 <_printf_common+0xb4>
 8002ad4:	6823      	ldr	r3, [r4, #0]
 8002ad6:	68e5      	ldr	r5, [r4, #12]
 8002ad8:	f8d9 2000 	ldr.w	r2, [r9]
 8002adc:	f003 0306 	and.w	r3, r3, #6
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	bf08      	it	eq
 8002ae4:	1aad      	subeq	r5, r5, r2
 8002ae6:	68a3      	ldr	r3, [r4, #8]
 8002ae8:	6922      	ldr	r2, [r4, #16]
 8002aea:	bf0c      	ite	eq
 8002aec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002af0:	2500      	movne	r5, #0
 8002af2:	4293      	cmp	r3, r2
 8002af4:	bfc4      	itt	gt
 8002af6:	1a9b      	subgt	r3, r3, r2
 8002af8:	18ed      	addgt	r5, r5, r3
 8002afa:	f04f 0900 	mov.w	r9, #0
 8002afe:	341a      	adds	r4, #26
 8002b00:	454d      	cmp	r5, r9
 8002b02:	d11b      	bne.n	8002b3c <_printf_common+0xd8>
 8002b04:	2000      	movs	r0, #0
 8002b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	4652      	mov	r2, sl
 8002b0e:	4639      	mov	r1, r7
 8002b10:	4630      	mov	r0, r6
 8002b12:	47c0      	blx	r8
 8002b14:	3001      	adds	r0, #1
 8002b16:	d103      	bne.n	8002b20 <_printf_common+0xbc>
 8002b18:	f04f 30ff 	mov.w	r0, #4294967295
 8002b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b20:	3501      	adds	r5, #1
 8002b22:	e7c2      	b.n	8002aaa <_printf_common+0x46>
 8002b24:	18e1      	adds	r1, r4, r3
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	2030      	movs	r0, #48	; 0x30
 8002b2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b2e:	4422      	add	r2, r4
 8002b30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b38:	3302      	adds	r3, #2
 8002b3a:	e7c4      	b.n	8002ac6 <_printf_common+0x62>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	4622      	mov	r2, r4
 8002b40:	4639      	mov	r1, r7
 8002b42:	4630      	mov	r0, r6
 8002b44:	47c0      	blx	r8
 8002b46:	3001      	adds	r0, #1
 8002b48:	d0e6      	beq.n	8002b18 <_printf_common+0xb4>
 8002b4a:	f109 0901 	add.w	r9, r9, #1
 8002b4e:	e7d7      	b.n	8002b00 <_printf_common+0x9c>

08002b50 <_printf_i>:
 8002b50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b54:	4617      	mov	r7, r2
 8002b56:	7e0a      	ldrb	r2, [r1, #24]
 8002b58:	b085      	sub	sp, #20
 8002b5a:	2a6e      	cmp	r2, #110	; 0x6e
 8002b5c:	4698      	mov	r8, r3
 8002b5e:	4606      	mov	r6, r0
 8002b60:	460c      	mov	r4, r1
 8002b62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002b64:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002b68:	f000 80bc 	beq.w	8002ce4 <_printf_i+0x194>
 8002b6c:	d81a      	bhi.n	8002ba4 <_printf_i+0x54>
 8002b6e:	2a63      	cmp	r2, #99	; 0x63
 8002b70:	d02e      	beq.n	8002bd0 <_printf_i+0x80>
 8002b72:	d80a      	bhi.n	8002b8a <_printf_i+0x3a>
 8002b74:	2a00      	cmp	r2, #0
 8002b76:	f000 80c8 	beq.w	8002d0a <_printf_i+0x1ba>
 8002b7a:	2a58      	cmp	r2, #88	; 0x58
 8002b7c:	f000 808a 	beq.w	8002c94 <_printf_i+0x144>
 8002b80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b84:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002b88:	e02a      	b.n	8002be0 <_printf_i+0x90>
 8002b8a:	2a64      	cmp	r2, #100	; 0x64
 8002b8c:	d001      	beq.n	8002b92 <_printf_i+0x42>
 8002b8e:	2a69      	cmp	r2, #105	; 0x69
 8002b90:	d1f6      	bne.n	8002b80 <_printf_i+0x30>
 8002b92:	6821      	ldr	r1, [r4, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002b9a:	d023      	beq.n	8002be4 <_printf_i+0x94>
 8002b9c:	1d11      	adds	r1, r2, #4
 8002b9e:	6019      	str	r1, [r3, #0]
 8002ba0:	6813      	ldr	r3, [r2, #0]
 8002ba2:	e027      	b.n	8002bf4 <_printf_i+0xa4>
 8002ba4:	2a73      	cmp	r2, #115	; 0x73
 8002ba6:	f000 80b4 	beq.w	8002d12 <_printf_i+0x1c2>
 8002baa:	d808      	bhi.n	8002bbe <_printf_i+0x6e>
 8002bac:	2a6f      	cmp	r2, #111	; 0x6f
 8002bae:	d02a      	beq.n	8002c06 <_printf_i+0xb6>
 8002bb0:	2a70      	cmp	r2, #112	; 0x70
 8002bb2:	d1e5      	bne.n	8002b80 <_printf_i+0x30>
 8002bb4:	680a      	ldr	r2, [r1, #0]
 8002bb6:	f042 0220 	orr.w	r2, r2, #32
 8002bba:	600a      	str	r2, [r1, #0]
 8002bbc:	e003      	b.n	8002bc6 <_printf_i+0x76>
 8002bbe:	2a75      	cmp	r2, #117	; 0x75
 8002bc0:	d021      	beq.n	8002c06 <_printf_i+0xb6>
 8002bc2:	2a78      	cmp	r2, #120	; 0x78
 8002bc4:	d1dc      	bne.n	8002b80 <_printf_i+0x30>
 8002bc6:	2278      	movs	r2, #120	; 0x78
 8002bc8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002bcc:	496e      	ldr	r1, [pc, #440]	; (8002d88 <_printf_i+0x238>)
 8002bce:	e064      	b.n	8002c9a <_printf_i+0x14a>
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002bd6:	1d11      	adds	r1, r2, #4
 8002bd8:	6019      	str	r1, [r3, #0]
 8002bda:	6813      	ldr	r3, [r2, #0]
 8002bdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002be0:	2301      	movs	r3, #1
 8002be2:	e0a3      	b.n	8002d2c <_printf_i+0x1dc>
 8002be4:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002be8:	f102 0104 	add.w	r1, r2, #4
 8002bec:	6019      	str	r1, [r3, #0]
 8002bee:	d0d7      	beq.n	8002ba0 <_printf_i+0x50>
 8002bf0:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	da03      	bge.n	8002c00 <_printf_i+0xb0>
 8002bf8:	222d      	movs	r2, #45	; 0x2d
 8002bfa:	425b      	negs	r3, r3
 8002bfc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002c00:	4962      	ldr	r1, [pc, #392]	; (8002d8c <_printf_i+0x23c>)
 8002c02:	220a      	movs	r2, #10
 8002c04:	e017      	b.n	8002c36 <_printf_i+0xe6>
 8002c06:	6820      	ldr	r0, [r4, #0]
 8002c08:	6819      	ldr	r1, [r3, #0]
 8002c0a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002c0e:	d003      	beq.n	8002c18 <_printf_i+0xc8>
 8002c10:	1d08      	adds	r0, r1, #4
 8002c12:	6018      	str	r0, [r3, #0]
 8002c14:	680b      	ldr	r3, [r1, #0]
 8002c16:	e006      	b.n	8002c26 <_printf_i+0xd6>
 8002c18:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002c1c:	f101 0004 	add.w	r0, r1, #4
 8002c20:	6018      	str	r0, [r3, #0]
 8002c22:	d0f7      	beq.n	8002c14 <_printf_i+0xc4>
 8002c24:	880b      	ldrh	r3, [r1, #0]
 8002c26:	4959      	ldr	r1, [pc, #356]	; (8002d8c <_printf_i+0x23c>)
 8002c28:	2a6f      	cmp	r2, #111	; 0x6f
 8002c2a:	bf14      	ite	ne
 8002c2c:	220a      	movne	r2, #10
 8002c2e:	2208      	moveq	r2, #8
 8002c30:	2000      	movs	r0, #0
 8002c32:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002c36:	6865      	ldr	r5, [r4, #4]
 8002c38:	60a5      	str	r5, [r4, #8]
 8002c3a:	2d00      	cmp	r5, #0
 8002c3c:	f2c0 809c 	blt.w	8002d78 <_printf_i+0x228>
 8002c40:	6820      	ldr	r0, [r4, #0]
 8002c42:	f020 0004 	bic.w	r0, r0, #4
 8002c46:	6020      	str	r0, [r4, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d13f      	bne.n	8002ccc <_printf_i+0x17c>
 8002c4c:	2d00      	cmp	r5, #0
 8002c4e:	f040 8095 	bne.w	8002d7c <_printf_i+0x22c>
 8002c52:	4675      	mov	r5, lr
 8002c54:	2a08      	cmp	r2, #8
 8002c56:	d10b      	bne.n	8002c70 <_printf_i+0x120>
 8002c58:	6823      	ldr	r3, [r4, #0]
 8002c5a:	07da      	lsls	r2, r3, #31
 8002c5c:	d508      	bpl.n	8002c70 <_printf_i+0x120>
 8002c5e:	6923      	ldr	r3, [r4, #16]
 8002c60:	6862      	ldr	r2, [r4, #4]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	bfde      	ittt	le
 8002c66:	2330      	movle	r3, #48	; 0x30
 8002c68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c70:	ebae 0305 	sub.w	r3, lr, r5
 8002c74:	6123      	str	r3, [r4, #16]
 8002c76:	f8cd 8000 	str.w	r8, [sp]
 8002c7a:	463b      	mov	r3, r7
 8002c7c:	aa03      	add	r2, sp, #12
 8002c7e:	4621      	mov	r1, r4
 8002c80:	4630      	mov	r0, r6
 8002c82:	f7ff feef 	bl	8002a64 <_printf_common>
 8002c86:	3001      	adds	r0, #1
 8002c88:	d155      	bne.n	8002d36 <_printf_i+0x1e6>
 8002c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8e:	b005      	add	sp, #20
 8002c90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c94:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002c98:	493c      	ldr	r1, [pc, #240]	; (8002d8c <_printf_i+0x23c>)
 8002c9a:	6822      	ldr	r2, [r4, #0]
 8002c9c:	6818      	ldr	r0, [r3, #0]
 8002c9e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002ca2:	f100 0504 	add.w	r5, r0, #4
 8002ca6:	601d      	str	r5, [r3, #0]
 8002ca8:	d001      	beq.n	8002cae <_printf_i+0x15e>
 8002caa:	6803      	ldr	r3, [r0, #0]
 8002cac:	e002      	b.n	8002cb4 <_printf_i+0x164>
 8002cae:	0655      	lsls	r5, r2, #25
 8002cb0:	d5fb      	bpl.n	8002caa <_printf_i+0x15a>
 8002cb2:	8803      	ldrh	r3, [r0, #0]
 8002cb4:	07d0      	lsls	r0, r2, #31
 8002cb6:	bf44      	itt	mi
 8002cb8:	f042 0220 	orrmi.w	r2, r2, #32
 8002cbc:	6022      	strmi	r2, [r4, #0]
 8002cbe:	b91b      	cbnz	r3, 8002cc8 <_printf_i+0x178>
 8002cc0:	6822      	ldr	r2, [r4, #0]
 8002cc2:	f022 0220 	bic.w	r2, r2, #32
 8002cc6:	6022      	str	r2, [r4, #0]
 8002cc8:	2210      	movs	r2, #16
 8002cca:	e7b1      	b.n	8002c30 <_printf_i+0xe0>
 8002ccc:	4675      	mov	r5, lr
 8002cce:	fbb3 f0f2 	udiv	r0, r3, r2
 8002cd2:	fb02 3310 	mls	r3, r2, r0, r3
 8002cd6:	5ccb      	ldrb	r3, [r1, r3]
 8002cd8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2800      	cmp	r0, #0
 8002ce0:	d1f5      	bne.n	8002cce <_printf_i+0x17e>
 8002ce2:	e7b7      	b.n	8002c54 <_printf_i+0x104>
 8002ce4:	6808      	ldr	r0, [r1, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	6949      	ldr	r1, [r1, #20]
 8002cea:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002cee:	d004      	beq.n	8002cfa <_printf_i+0x1aa>
 8002cf0:	1d10      	adds	r0, r2, #4
 8002cf2:	6018      	str	r0, [r3, #0]
 8002cf4:	6813      	ldr	r3, [r2, #0]
 8002cf6:	6019      	str	r1, [r3, #0]
 8002cf8:	e007      	b.n	8002d0a <_printf_i+0x1ba>
 8002cfa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002cfe:	f102 0004 	add.w	r0, r2, #4
 8002d02:	6018      	str	r0, [r3, #0]
 8002d04:	6813      	ldr	r3, [r2, #0]
 8002d06:	d0f6      	beq.n	8002cf6 <_printf_i+0x1a6>
 8002d08:	8019      	strh	r1, [r3, #0]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	6123      	str	r3, [r4, #16]
 8002d0e:	4675      	mov	r5, lr
 8002d10:	e7b1      	b.n	8002c76 <_printf_i+0x126>
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	1d11      	adds	r1, r2, #4
 8002d16:	6019      	str	r1, [r3, #0]
 8002d18:	6815      	ldr	r5, [r2, #0]
 8002d1a:	6862      	ldr	r2, [r4, #4]
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	4628      	mov	r0, r5
 8002d20:	f7fd fa76 	bl	8000210 <memchr>
 8002d24:	b108      	cbz	r0, 8002d2a <_printf_i+0x1da>
 8002d26:	1b40      	subs	r0, r0, r5
 8002d28:	6060      	str	r0, [r4, #4]
 8002d2a:	6863      	ldr	r3, [r4, #4]
 8002d2c:	6123      	str	r3, [r4, #16]
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d34:	e79f      	b.n	8002c76 <_printf_i+0x126>
 8002d36:	6923      	ldr	r3, [r4, #16]
 8002d38:	462a      	mov	r2, r5
 8002d3a:	4639      	mov	r1, r7
 8002d3c:	4630      	mov	r0, r6
 8002d3e:	47c0      	blx	r8
 8002d40:	3001      	adds	r0, #1
 8002d42:	d0a2      	beq.n	8002c8a <_printf_i+0x13a>
 8002d44:	6823      	ldr	r3, [r4, #0]
 8002d46:	079b      	lsls	r3, r3, #30
 8002d48:	d507      	bpl.n	8002d5a <_printf_i+0x20a>
 8002d4a:	2500      	movs	r5, #0
 8002d4c:	f104 0919 	add.w	r9, r4, #25
 8002d50:	68e3      	ldr	r3, [r4, #12]
 8002d52:	9a03      	ldr	r2, [sp, #12]
 8002d54:	1a9b      	subs	r3, r3, r2
 8002d56:	429d      	cmp	r5, r3
 8002d58:	db05      	blt.n	8002d66 <_printf_i+0x216>
 8002d5a:	68e0      	ldr	r0, [r4, #12]
 8002d5c:	9b03      	ldr	r3, [sp, #12]
 8002d5e:	4298      	cmp	r0, r3
 8002d60:	bfb8      	it	lt
 8002d62:	4618      	movlt	r0, r3
 8002d64:	e793      	b.n	8002c8e <_printf_i+0x13e>
 8002d66:	2301      	movs	r3, #1
 8002d68:	464a      	mov	r2, r9
 8002d6a:	4639      	mov	r1, r7
 8002d6c:	4630      	mov	r0, r6
 8002d6e:	47c0      	blx	r8
 8002d70:	3001      	adds	r0, #1
 8002d72:	d08a      	beq.n	8002c8a <_printf_i+0x13a>
 8002d74:	3501      	adds	r5, #1
 8002d76:	e7eb      	b.n	8002d50 <_printf_i+0x200>
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1a7      	bne.n	8002ccc <_printf_i+0x17c>
 8002d7c:	780b      	ldrb	r3, [r1, #0]
 8002d7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d82:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d86:	e765      	b.n	8002c54 <_printf_i+0x104>
 8002d88:	08002eba 	.word	0x08002eba
 8002d8c:	08002ea9 	.word	0x08002ea9

08002d90 <_sbrk_r>:
 8002d90:	b538      	push	{r3, r4, r5, lr}
 8002d92:	4c06      	ldr	r4, [pc, #24]	; (8002dac <_sbrk_r+0x1c>)
 8002d94:	2300      	movs	r3, #0
 8002d96:	4605      	mov	r5, r0
 8002d98:	4608      	mov	r0, r1
 8002d9a:	6023      	str	r3, [r4, #0]
 8002d9c:	f7ff fbf6 	bl	800258c <_sbrk>
 8002da0:	1c43      	adds	r3, r0, #1
 8002da2:	d102      	bne.n	8002daa <_sbrk_r+0x1a>
 8002da4:	6823      	ldr	r3, [r4, #0]
 8002da6:	b103      	cbz	r3, 8002daa <_sbrk_r+0x1a>
 8002da8:	602b      	str	r3, [r5, #0]
 8002daa:	bd38      	pop	{r3, r4, r5, pc}
 8002dac:	20000224 	.word	0x20000224

08002db0 <memcpy>:
 8002db0:	b510      	push	{r4, lr}
 8002db2:	1e43      	subs	r3, r0, #1
 8002db4:	440a      	add	r2, r1
 8002db6:	4291      	cmp	r1, r2
 8002db8:	d100      	bne.n	8002dbc <memcpy+0xc>
 8002dba:	bd10      	pop	{r4, pc}
 8002dbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002dc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002dc4:	e7f7      	b.n	8002db6 <memcpy+0x6>

08002dc6 <memmove>:
 8002dc6:	4288      	cmp	r0, r1
 8002dc8:	b510      	push	{r4, lr}
 8002dca:	eb01 0302 	add.w	r3, r1, r2
 8002dce:	d803      	bhi.n	8002dd8 <memmove+0x12>
 8002dd0:	1e42      	subs	r2, r0, #1
 8002dd2:	4299      	cmp	r1, r3
 8002dd4:	d10c      	bne.n	8002df0 <memmove+0x2a>
 8002dd6:	bd10      	pop	{r4, pc}
 8002dd8:	4298      	cmp	r0, r3
 8002dda:	d2f9      	bcs.n	8002dd0 <memmove+0xa>
 8002ddc:	1881      	adds	r1, r0, r2
 8002dde:	1ad2      	subs	r2, r2, r3
 8002de0:	42d3      	cmn	r3, r2
 8002de2:	d100      	bne.n	8002de6 <memmove+0x20>
 8002de4:	bd10      	pop	{r4, pc}
 8002de6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002dea:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002dee:	e7f7      	b.n	8002de0 <memmove+0x1a>
 8002df0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002df4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002df8:	e7eb      	b.n	8002dd2 <memmove+0xc>

08002dfa <__malloc_lock>:
 8002dfa:	4770      	bx	lr

08002dfc <__malloc_unlock>:
 8002dfc:	4770      	bx	lr

08002dfe <_realloc_r>:
 8002dfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e00:	4607      	mov	r7, r0
 8002e02:	4614      	mov	r4, r2
 8002e04:	460e      	mov	r6, r1
 8002e06:	b921      	cbnz	r1, 8002e12 <_realloc_r+0x14>
 8002e08:	4611      	mov	r1, r2
 8002e0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002e0e:	f7ff bc7b 	b.w	8002708 <_malloc_r>
 8002e12:	b922      	cbnz	r2, 8002e1e <_realloc_r+0x20>
 8002e14:	f7ff fc2a 	bl	800266c <_free_r>
 8002e18:	4625      	mov	r5, r4
 8002e1a:	4628      	mov	r0, r5
 8002e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e1e:	f000 f814 	bl	8002e4a <_malloc_usable_size_r>
 8002e22:	4284      	cmp	r4, r0
 8002e24:	d90f      	bls.n	8002e46 <_realloc_r+0x48>
 8002e26:	4621      	mov	r1, r4
 8002e28:	4638      	mov	r0, r7
 8002e2a:	f7ff fc6d 	bl	8002708 <_malloc_r>
 8002e2e:	4605      	mov	r5, r0
 8002e30:	2800      	cmp	r0, #0
 8002e32:	d0f2      	beq.n	8002e1a <_realloc_r+0x1c>
 8002e34:	4631      	mov	r1, r6
 8002e36:	4622      	mov	r2, r4
 8002e38:	f7ff ffba 	bl	8002db0 <memcpy>
 8002e3c:	4631      	mov	r1, r6
 8002e3e:	4638      	mov	r0, r7
 8002e40:	f7ff fc14 	bl	800266c <_free_r>
 8002e44:	e7e9      	b.n	8002e1a <_realloc_r+0x1c>
 8002e46:	4635      	mov	r5, r6
 8002e48:	e7e7      	b.n	8002e1a <_realloc_r+0x1c>

08002e4a <_malloc_usable_size_r>:
 8002e4a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002e4e:	2800      	cmp	r0, #0
 8002e50:	f1a0 0004 	sub.w	r0, r0, #4
 8002e54:	bfbc      	itt	lt
 8002e56:	580b      	ldrlt	r3, [r1, r0]
 8002e58:	18c0      	addlt	r0, r0, r3
 8002e5a:	4770      	bx	lr

08002e5c <_init>:
 8002e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5e:	bf00      	nop
 8002e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e62:	bc08      	pop	{r3}
 8002e64:	469e      	mov	lr, r3
 8002e66:	4770      	bx	lr

08002e68 <_fini>:
 8002e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6a:	bf00      	nop
 8002e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e6e:	bc08      	pop	{r3}
 8002e70:	469e      	mov	lr, r3
 8002e72:	4770      	bx	lr
